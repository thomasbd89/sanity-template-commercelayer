{"version":3,"file":"next-sanity.cjs.production.min.js","sources":["../src/aborter.ts","../src/currentUser.ts","../src/client.ts","../src/imageUrlBuilder.ts","../src/portableText.tsx","../src/useSubscription.ts"],"sourcesContent":["export interface Aborter {\n  abort(): void\n  signal?: AbortSignal\n}\n\nexport function getAborter(): Aborter {\n  return typeof AbortController === 'undefined'\n    ? {signal: undefined, abort: noop}\n    : new AbortController()\n}\n\nfunction noop() {\n  // intentional noop\n}\n","import {useEffect, useState} from 'react'\nimport {CurrentUser} from './types'\nimport {getAborter, Aborter} from './aborter'\n\nexport function createCurrentUserHook({projectId}: {projectId: string; dataset?: string}) {\n  return () => useCurrentUser(projectId)\n}\n\nexport function getCurrentUser(projectId: string, abort?: Aborter): Promise<CurrentUser | null> {\n  return fetch(`https://${projectId}.api.sanity.io/v1/users/me`, {\n    credentials: 'include',\n    signal: abort?.signal,\n  })\n    .then((res) => res.json())\n    .then((res) => (res?.id ? res : null))\n    .catch((err: Error) => (err.name === 'AbortError' ? null : Promise.reject(err)))\n}\n\nfunction useCurrentUser(projectId: string) {\n  const [data, setUser] = useState<CurrentUser | null>()\n  const [error, setError] = useState<Error>()\n\n  useEffect(() => {\n    const aborter = getAborter()\n    getCurrentUser(projectId, aborter).then(setUser).catch(setError)\n    return () => aborter.abort()\n  }, [projectId])\n\n  return {data, error, loading: data !== null || !error}\n}\n","import picoSanity from 'picosanity'\nimport {ClientConfig} from './types'\n\nexport function createClient(config: ClientConfig) {\n  return picoSanity(config)\n}\n","import getImageUrlBuilder from '@sanity/image-url'\nimport {ProjectConfig} from './types'\n\nexport function createImageUrlBuilder({projectId, dataset}: ProjectConfig) {\n  return getImageUrlBuilder({projectId, dataset})\n}\n","import React from 'react'\nimport SanityPortableText, {\n  PortableTextProps,\n  PortableTextSerializers,\n} from '@sanity/block-content-to-react'\nimport {ProjectConfig} from './types'\n\nexport function createPortableTextComponent({\n  projectId,\n  dataset,\n  serializers,\n}: ProjectConfig & {serializers?: PortableTextSerializers}) {\n  return function PortableText(props: PortableTextProps) {\n    return (\n      <SanityPortableText\n        projectId={projectId}\n        dataset={dataset}\n        serializers={serializers}\n        {...props}\n      />\n    )\n  }\n}\n","import {useState} from 'react'\nimport {GroqStore, Subscription} from '@sanity/groq-store'\nimport {useDeepCompareEffectNoCheck as useDeepCompareEffect} from 'use-deep-compare-effect'\nimport {ProjectConfig} from './types'\nimport {getCurrentUser} from './currentUser'\nimport {getAborter} from './aborter'\n\ninterface SubscriptionOptions<R = any> {\n  enabled?: boolean\n  params?: Record<string, unknown>\n  initialData?: R\n}\n\nexport function createPreviewSubscriptionHook({\n  projectId,\n  dataset,\n  documentLimit = 3000,\n}: ProjectConfig & {documentLimit?: number}) {\n  // Only construct/setup the store when `getStore()` is called\n  let store: Promise<GroqStore>\n\n  return function usePreviewSubscription<R = any>(\n    query: string,\n    options: SubscriptionOptions<R> = {}\n  ) {\n    const {params = {}, initialData, enabled} = options\n    return useQuerySubscription<R>({\n      getStore,\n      projectId,\n      query,\n      params,\n      initialData: initialData as any,\n      enabled: enabled ? typeof window !== 'undefined' : false,\n    })\n  }\n\n  function getStore() {\n    if (!store) {\n      store = import('@sanity/groq-store').then(({groqStore}) =>\n        groqStore({\n          projectId,\n          dataset,\n          documentLimit,\n          listen: true,\n          overlayDrafts: true,\n          subscriptionThrottleMs: 10,\n        })\n      )\n    }\n    return store\n  }\n}\n\nfunction useQuerySubscription<R = any>(options: {\n  getStore: () => Promise<GroqStore>\n  projectId: string\n  query: string\n  params: Record<string, unknown>\n  initialData: R\n  enabled: boolean\n}) {\n  const {getStore, projectId, query, params, initialData, enabled = false} = options\n  const [error, setError] = useState<Error>()\n  const [loading, setLoading] = useState(false)\n  const [data, setData] = useState<R>()\n\n  // Use \"deep\" dependency comparison because params are often not _referentially_ equal,\n  // but contains the same shallow properties, eg `{\"slug\": \"some-slug\"}`\n  useDeepCompareEffect(() => {\n    if (!enabled) {\n      return () => {\n        /* intentional noop */\n      }\n    }\n\n    setLoading(true)\n\n    const aborter = getAborter()\n    let subscription: Subscription | undefined\n    getCurrentUser(projectId, aborter)\n      .then((user) => {\n        if (user) {\n          return\n        }\n\n        // eslint-disable-next-line no-console\n        console.warn('Not authenticated - preview not available')\n        throw new Error('Not authenticated - preview not available')\n      })\n      .then(getStore)\n      .then((store) => {\n        subscription = store.subscribe(query, params, (err, result) => {\n          if (err) {\n            setError(err)\n          } else {\n            setData(result)\n          }\n        })\n      })\n      .catch(setError)\n      .finally(() => setLoading(false))\n\n    return () => {\n      if (subscription) {\n        subscription.unsubscribe()\n      }\n\n      aborter.abort()\n    }\n  }, [getStore, query, params, enabled])\n\n  return {\n    data: typeof data === 'undefined' ? initialData : data,\n    loading,\n    error,\n  }\n}\n"],"names":["getAborter","AbortController","signal","undefined","abort","noop","getCurrentUser","projectId","fetch","credentials","then","res","json","id","catch","err","name","Promise","reject","config","picoSanity","useState","data","setUser","error","setError","useEffect","aborter","loading","useCurrentUser","getImageUrlBuilder","dataset","serializers","props","React","SanityPortableText","store","documentLimit","query","options","params","getStore","initialData","enabled","setLoading","setData","useDeepCompareEffect","subscription","user","console","warn","Error","subscribe","result","finally","unsubscribe","useQuerySubscription","window","groqStore","listen","overlayDrafts","subscriptionThrottleMs"],"mappings":"uVAKgBA,UACoB,oBAApBC,gBACV,CAACC,YAAQC,EAAWC,MAAOC,GAC3B,IAAIJ,gBAGV,SAASI,cCHOC,EAAeC,EAAmBH,UACzCI,iBAAiBD,+BAAuC,CAC7DE,YAAa,UACbP,aAAQE,SAAAA,EAAOF,SAEdQ,KAAMC,GAAQA,EAAIC,QAClBF,KAAMC,UAASA,SAAAA,EAAKE,IAAKF,EAAM,MAC/BG,MAAOC,GAA6B,eAAbA,EAAIC,KAAwB,KAAOC,QAAQC,OAAOH,iDCZjDI,UACpBC,EAAWD,kDDAmBZ,IAAAA,gBAC9B,IAaT,SAAwBA,WACEc,aAAjBC,OAAMC,SACaF,aAAnBG,OAAOC,cAEdC,YAAU,WACFC,EAAU3B,WAChBM,EAAeC,EAAWoB,GAASjB,KAAKa,GAAST,MAAMW,GAChD,IAAME,EAAQvB,SACpB,CAACG,IAEG,CAACe,KAAAA,EAAME,MAAAA,EAAOI,QAAkB,OAATN,IAAkBE,GAvBnCK,CAAetB,qDEDrBuB,EAAmB,CAACvB,YADUA,UACCwB,UADUA,+DCKhDxB,IAAAA,UACAwB,IAAAA,QACAC,IAAAA,mBAEO,SAAsBC,UAEzBC,gBAACC,iBACC5B,UAAWA,EACXwB,QAASA,EACTC,YAAaA,GACTC,4DCCNG,EALJ7B,IAAAA,UACAwB,IAAAA,YACAM,cAAAA,aAAgB,aAKT,SACLC,EACAC,YAAAA,IAAAA,EAAkC,YAEUA,EAArCC,cA4BX,SAAuCD,SAQ9BE,EAAoEF,EAApEE,SAAUlC,EAA0DgC,EAA1DhC,UAAW+B,EAA+CC,EAA/CD,MAAOE,EAAwCD,EAAxCC,OAAQE,EAAgCH,EAAhCG,cAAgCH,EAAnBI,QAAAA,kBAC9BtB,aAAnBG,OAAOC,SACgBJ,YAAS,GAAhCO,OAASgB,SACQvB,aAAjBC,OAAMuB,cAIbC,8BAAqB,SACdH,QACI,OAKTC,GAAW,SAELjB,EAAU3B,QACZ+C,SACJzC,EAAeC,EAAWoB,GACvBjB,KAAMsC,QACDA,QAKJC,QAAQC,KAAK,6CACP,IAAIC,MAAM,+CAEjBzC,KAAK+B,GACL/B,KAAM0B,IACLW,EAAeX,EAAMgB,UAAUd,EAAOE,EAAQ,CAACzB,EAAKsC,KAC9CtC,EACFU,EAASV,GAET8B,EAAQQ,OAIbvC,MAAMW,GACN6B,QAAQ,IAAMV,GAAW,IAErB,KACDG,GACFA,EAAaQ,cAGf5B,EAAQvB,UAET,CAACqC,EAAUH,EAAOE,EAAQG,IAEtB,CACLrB,UAAsB,IAATA,EAAuBoB,EAAcpB,EAClDM,QAAAA,EACAJ,MAAAA,GAxFOgC,CAAwB,CAC7Bf,SAAAA,EACAlC,UAAAA,EACA+B,MAAAA,EACAE,kBALc,KAMdE,YAN0CH,EAAxBG,YAOlBC,UAP0CJ,EAAXI,SAOM,oBAAXc,mBAIrBhB,WACFL,IACHA,EAAQ,8QAAO,2BAAsB1B,SACnCgD,IAD0CA,WAChC,CACRnD,UAAAA,EACAwB,QAAAA,EACAM,cAAAA,EACAsB,QAAQ,EACRC,eAAe,EACfC,uBAAwB,OAIvBzB"}