"use strict";
var fs = require('fs');
var path = require('path');
var _a = require('rxjs'), from = _a.from, merge = _a.merge, of = _a.of;
var _b = require('rxjs/operators'), concatMap = _b.concatMap, filter = _b.filter, map = _b.map, switchMap = _b.switchMap;
var buildFile = require('./utils/buildFile').buildFile;
var watchFiles = require('./utils/watchFiles').watchFiles;
var _c = require('./utils/fs'), readJsonFile = _c.readJsonFile, rimraf = _c.rimraf;
function watch(opts) {
    if (!opts.basedir) {
        throw new Error('Missing basedir');
    }
    var templateDir = path.resolve(opts.basedir, 'template');
    var buildDir = path.resolve(opts.basedir, 'build');
    var templateValuesPath = path.resolve(opts.basedir, opts.templateValuesPath);
    var templateValuesPathChange$ = watchFiles(templateValuesPath);
    var templateValues$ = templateValuesPathChange$.pipe(concatMap(function () { return from(readJsonFile(templateValuesPath)); }));
    var templateFile$ = templateValues$.pipe(switchMap(function (templateValues) {
        return watchFiles(templateDir, {
            ignored: /\/node_modules\//
        }).pipe(map(function (_a) {
            var type = _a.type, file = _a.file;
            return ({
                type: type,
                file: path.relative(templateDir, file),
                templateValues: templateValues
            });
        }));
    }));
    var addOrChangedFile$ = templateFile$.pipe(filter(function (_a) {
        var type = _a.type;
        return ['add', 'change'].indexOf(type) > -1;
    }));
    var unlinkFile$ = templateFile$.pipe(filter(function (_a) {
        var type = _a.type;
        return type === 'unlink';
    }));
    var builtFile$ = addOrChangedFile$.pipe(concatMap(function (_a) {
        var file = _a.file, templateValues = _a.templateValues;
        var fromPath = path.resolve(templateDir, file);
        var toPath = path.resolve(buildDir, file);
        var isFile = fs.statSync(fromPath).isFile();
        if (isFile) {
            return from(buildFile(fromPath, toPath, templateValues).then(function () { return ({
                type: 'built',
                file: file
            }); }));
        }
        return of({ type: 'ignore', file: file });
    }));
    var unlinkedFile$ = unlinkFile$.pipe(concatMap(function (_a) {
        var file = _a.file;
        return from(rimraf(path.resolve(buildDir, file)).then(function () { return ({
            type: 'unlinked',
            file: file
        }); }));
    }));
    return merge(builtFile$, unlinkedFile$);
}
module.exports = watch;
