"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var fs = require('fs');
var chalk = require('chalk');
var path = require('path');
var api = require('./index');
module.exports = {
    build: function (basedir, params) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, api.build({ basedir: basedir, templateValuesPath: params.templateValues }).then(function (files) {
                        files.forEach(function (file) { return console.log(chalk.green('build') + " " + file); });
                    })];
            });
        });
    },
    watch: function (basedir, params) {
        return new Promise(function (resolve, reject) {
            api.watch({ basedir: basedir, templateValuesPath: params.templateValues }).subscribe({
                next: function (msg) {
                    switch (msg.type) {
                        case 'built':
                            console.log(chalk.green('build') + " " + msg.file);
                            break;
                        case 'unlinked':
                            console.log(chalk.red('delete') + " " + msg.file);
                            break;
                        default:
                            console.log(msg.type + " " + msg.file);
                            break;
                    }
                },
                error: reject,
                complete: resolve
            });
        });
    },
    lockfiles: function (basedir) {
        return __awaiter(this, void 0, void 0, function () {
            var directories;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        console.log('Generating lockfiles by running npm install in template dirsâ€¦');
                        return [4 /*yield*/, api.generateLockFiles({ basedir: basedir })];
                    case 1:
                        directories = _a.sent();
                        console.log('Generated lockfiles in: ');
                        directories.forEach(function (info) {
                            return console.log("\t" + chalk.green(path.join(info.dir, '/package-lock.json')));
                        });
                        return [2 /*return*/];
                }
            });
        });
    },
    migrate: function (basedir) {
        return __awaiter(this, void 0, void 0, function () {
            var manifestFileName, manifestPath, manifest, migrated;
            return __generator(this, function (_a) {
                if (!basedir)
                    throw new Error('missing basedir');
                manifestFileName = 'sanity-template.json';
                manifestPath = path.resolve(basedir, manifestFileName);
                try {
                    manifest = require(manifestPath);
                }
                catch (requireErr) {
                    throw new Error('missing file: sanity-template.json');
                }
                migrated = api.migrate({ manifest: manifest });
                if (migrated.version === manifest.version) {
                    console.log('The manifest at ./%s is already at current version (v%d)', manifestFileName, manifest.version);
                    return [2 /*return*/];
                }
                fs.writeFileSync(manifestPath, JSON.stringify(migrated, null, 2) + '\n');
                console.log('Successfully migrated ./%s from v%d to v%d', manifestFileName, manifest.version, migrated.version);
                return [2 /*return*/];
            });
        });
    },
    check: function (basedir) {
        return __awaiter(this, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, api.check({ basedir: basedir })];
                    case 1:
                        result = _a.sent();
                        if (result.type === 'invalid') {
                            console.error('Errors in sanity-template.json:\n%s', result.errors
                                .map(function (err) { return "\t" + (err.path.join('') || '<root>') + ": " + err.message.split('\n').join("\n\t\t"); })
                                .join('\n'));
                            process.exit(1);
                        }
                        // success
                        console.log(chalk.green("\u2713 template directory is valid: " + basedir));
                        return [2 /*return*/];
                }
            });
        });
    }
};
