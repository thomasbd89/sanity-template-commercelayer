"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
exports.__esModule = true;
exports.vercelDeployment = void 0;
var z = __importStar(require("zod"));
var common_1 = require("./common");
var envVarMap = z.object({
    projectId: z.array(z.string()),
    dataset: z.array(z.string())
});
var deployHook = z.object({
    name: z.string().optional(),
    // The deploy hook url will be exposed on these env vars, e.g. SANITY_STUDIO_*, NEXT_PUBLIC_*
    envVars: z.array(z.string()).optional()
});
exports.vercelDeployment = z.object({
    provider: z.literal('vercel'),
    corsOrigins: z.array(common_1.sanityCorsOrigin).optional(),
    deployHook: z.union([z.literal(true), deployHook]).optional(),
    tokens: z
        .array(common_1.tokenSpec.extend({
        envVar: z.string().optional()
    }))
        .optional(),
    // The env vars `SANITY_STUDIO_API_DATASET` and `SANITY_STUDIO_API_PROJECT_ID` will always be added
    envVars: envVarMap.optional(),
    studio: z.object({ basePath: z.string() }).optional()
});
