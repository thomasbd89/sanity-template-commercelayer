(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('active-resource'), require('axios'), require('moxios'), require('jquery'), require('underscore'), require('jasmine-jquery'), require('jasmine-ajax'), require('jasmine-promises'), require('underscore.inflection')) :
  typeof define === 'function' && define.amd ? define(['active-resource', 'axios', 'moxios', 'jquery', 'underscore', 'jasmine-jquery', 'jasmine-ajax', 'jasmine-promises', 'underscore.inflection'], factory) :
  (factory(global.ActiveResource,global.axios,global.moxios,global.jquery,global._));
}(this, (function (ActiveResource,axios,moxios,jquery,_) { 'use strict';

  ActiveResource = ActiveResource && ActiveResource.hasOwnProperty('default') ? ActiveResource['default'] : ActiveResource;
  axios = axios && axios.hasOwnProperty('default') ? axios['default'] : axios;
  moxios = moxios && moxios.hasOwnProperty('default') ? moxios['default'] : moxios;
  jquery = jquery && jquery.hasOwnProperty('default') ? jquery['default'] : jquery;
  _ = _ && _.hasOwnProperty('default') ? _['default'] : _;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
  }

  function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
      return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
  }

  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };

    return _setPrototypeOf(o, p);
  }

  function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return self;
  }

  function _possibleConstructorReturn(self, call) {
    if (call && (typeof call === "object" || typeof call === "function")) {
      return call;
    }

    return _assertThisInitialized(self);
  }

  (function () {
    // Imply that a singular version of the word 'Class' is still 'Class'
    _.singular('Class', 'Class');

    window.MyLibrary = ActiveResource.createResourceLibrary('https://example.com/api/v1');
    MyLibrary.createResource(
    /*#__PURE__*/
    function (_MyLibrary$Base) {
      _inherits(Comment, _MyLibrary$Base);

      function Comment() {
        _classCallCheck(this, Comment);

        return _possibleConstructorReturn(this, _getPrototypeOf(Comment).apply(this, arguments));
      }

      _createClass(Comment, null, [{
        key: "define",
        value: function define() {
          this.belongsTo('resource', {
            polymorphic: true,
            inverseOf: 'comments'
          });
        }
      }]);

      return Comment;
    }(MyLibrary.Base));

    MyLibrary.Customer = function () {
      var Customer =
      /*#__PURE__*/
      function (_MyLibrary$Base2) {
        _inherits(Customer, _MyLibrary$Base2);

        function Customer() {
          _classCallCheck(this, Customer);

          return _possibleConstructorReturn(this, _getPrototypeOf(Customer).apply(this, arguments));
        }

        return Customer;
      }(MyLibrary.Base);

      
      Customer.className = 'Customer';
      Customer.queryName = 'customers';
      Customer.hasMany('orders', {
        inverseOf: 'customer'
      });
      return Customer;
    }.call(this);

    MyLibrary.GiftCard = function () {
      var GiftCard =
      /*#__PURE__*/
      function (_MyLibrary$Base3) {
        _inherits(GiftCard, _MyLibrary$Base3);

        function GiftCard() {
          _classCallCheck(this, GiftCard);

          return _possibleConstructorReturn(this, _getPrototypeOf(GiftCard).apply(this, arguments));
        }

        return GiftCard;
      }(MyLibrary.Base);

      
      GiftCard.className = 'GiftCard';
      GiftCard.queryName = 'gift_cards';
      GiftCard.hasOne('order');
      return GiftCard;
    }.call(this);

    MyLibrary.Order = function () {
      var Order =
      /*#__PURE__*/
      function (_MyLibrary$Base4) {
        _inherits(Order, _MyLibrary$Base4);

        function Order() {
          _classCallCheck(this, Order);

          return _possibleConstructorReturn(this, _getPrototypeOf(Order).apply(this, arguments));
        }

        return Order;
      }(MyLibrary.Base);

      
      Order.className = 'Order';
      Order.queryName = 'orders';
      Order.attributes('price', 'jsonField');
      Order.belongsTo('customer', {
        inverseOf: 'orders'
      });
      Order.belongsTo('giftCard');
      Order.belongsTo('paymentSource', {
        polymorphic: true,
        inverseOf: 'orders'
      });
      Order.belongsTo('product');
      Order.hasMany('comments', {
        as: 'resource',
        autosave: true,
        inverseOf: 'resource'
      });
      Order.hasMany('orderItems');
      Order.hasMany('transactions', {
        autosave: true
      });
      return Order;
    }.call(this);

    MyLibrary.OrderItem = function () {
      var OrderItem =
      /*#__PURE__*/
      function (_MyLibrary$Base5) {
        _inherits(OrderItem, _MyLibrary$Base5);

        function OrderItem() {
          _classCallCheck(this, OrderItem);

          return _possibleConstructorReturn(this, _getPrototypeOf(OrderItem).apply(this, arguments));
        }

        return OrderItem;
      }(MyLibrary.Base);

      
      OrderItem.className = 'OrderItem';
      OrderItem.queryName = 'order_items';
      OrderItem.belongsTo('order');
      return OrderItem;
    }.call(this);

    MyLibrary.PaymentMethod = function () {
      var PaymentMethod =
      /*#__PURE__*/
      function (_MyLibrary$Base6) {
        _inherits(PaymentMethod, _MyLibrary$Base6);

        function PaymentMethod() {
          _classCallCheck(this, PaymentMethod);

          return _possibleConstructorReturn(this, _getPrototypeOf(PaymentMethod).apply(this, arguments));
        }

        return PaymentMethod;
      }(MyLibrary.Base);

      
      PaymentMethod.className = 'PaymentMethod';
      PaymentMethod.queryName = 'payment_methods';
      PaymentMethod.hasMany('orders', {
        as: 'paymentSource',
        inverseOf: 'paymentSource'
      });
      PaymentMethod.hasMany('transactions');
      return PaymentMethod;
    }.call(this);

    MyLibrary.Product = function () {
      var Product =
      /*#__PURE__*/
      function (_MyLibrary$Base7) {
        _inherits(Product, _MyLibrary$Base7);

        function Product() {
          _classCallCheck(this, Product);

          return _possibleConstructorReturn(this, _getPrototypeOf(Product).apply(this, arguments));
        }

        _createClass(Product, null, [{
          key: "customFind",
          value: function customFind() {
            return 'found';
          }
        }]);

        return Product;
      }(MyLibrary.Base);

      
      Product.className = 'Product';
      Product.queryName = 'products';
      Product.attributes('title');
      Product.belongsTo('merchant');
      Product.hasMany('orders');
      Product.hasMany('timeSlots');
      return Product;
    }.call(this);

    MyLibrary.Merchant = function () {
      var Merchant =
      /*#__PURE__*/
      function (_MyLibrary$Base8) {
        _inherits(Merchant, _MyLibrary$Base8);

        function Merchant() {
          _classCallCheck(this, Merchant);

          return _possibleConstructorReturn(this, _getPrototypeOf(Merchant).apply(this, arguments));
        }

        return Merchant;
      }(MyLibrary.Base);

      
      Merchant.className = 'Merchant';
      Merchant.queryName = 'merchants';
      Merchant.attributes('name');
      Merchant.hasMany('products');
      return Merchant;
    }.call(this);

    MyLibrary.TimeSlot = function () {
      var TimeSlot =
      /*#__PURE__*/
      function (_MyLibrary$Base9) {
        _inherits(TimeSlot, _MyLibrary$Base9);

        function TimeSlot() {
          _classCallCheck(this, TimeSlot);

          return _possibleConstructorReturn(this, _getPrototypeOf(TimeSlot).apply(this, arguments));
        }

        return TimeSlot;
      }(MyLibrary.Base);

      
      TimeSlot.className = 'TimeSlot';
      TimeSlot.queryName = 'time_slots';
      TimeSlot.belongsTo('product');
      return TimeSlot;
    }.call(this);

    MyLibrary.Transaction = function () {
      var Transaction =
      /*#__PURE__*/
      function (_MyLibrary$Base10) {
        _inherits(Transaction, _MyLibrary$Base10);

        function Transaction() {
          _classCallCheck(this, Transaction);

          return _possibleConstructorReturn(this, _getPrototypeOf(Transaction).apply(this, arguments));
        }

        return Transaction;
      }(MyLibrary.Base);

      
      Transaction.className = 'Transaction';
      Transaction.queryName = 'transactions';
      Transaction.attributes('amount');
      Transaction.belongsTo('order');
      Transaction.belongsTo('paymentMethod');
      return Transaction;
    }.call(this);
  }).call(undefined);
  (function () {
    // Get the params in a URL after the `?`
    // @param [Object] request the mostRecentAjaxRequest() from jasmine-Ajax
    // @return [String] the request query params
    window.requestParams = function (request) {
      return decodeURIComponent(request.url.split('?')[1]);
    };
  }).call(undefined);
  (function () {
    // Defines responses for various queries
    jasmine.getJSONFixtures().fixturesPath = 'spec/fixtures/json';
    moxios.delay = 1;
    window.JsonApiResponses = {
      timeout: {
        status: 408,
        response: getJSONFixture('timeout.json')
      },
      Comment: {
        find: {
          success: {
            status: 200,
            response: getJSONFixture('comments/singular.json')
          }
        },
        all: {
          success: {
            status: 200,
            response: getJSONFixture('comments/collection.json')
          }
        }
      },
      Customer: {
        find: {
          includes: {
            status: 200,
            response: getJSONFixture('customers/includes.json')
          }
        }
      },
      GiftCard: {
        find: {
          success: {
            status: 200,
            response: getJSONFixture('gift_cards/singular.json')
          },
          includes: {
            status: 200,
            response: getJSONFixture('gift_cards/includes.json')
          },
          raw: {
            status: 200,
            response: getJSONFixture('gift_cards/raw.json')
          }
        },
        save: {
          success: {
            status: 200,
            response: getJSONFixture('gift_cards/singular.json')
          },
          failure: {
            status: 422,
            response: getJSONFixture('gift_cards/422_resource_invalid.json')
          }
        }
      },
      Order: {
        all: {
          success: {
            status: 200,
            response: getJSONFixture('orders/collection.json')
          },
          includes: {
            status: 200,
            response: getJSONFixture('orders/collection_includes.json')
          }
        },
        find: {
          success: {
            status: 200,
            response: getJSONFixture('orders/singular.json')
          },
          includes: {
            status: 200,
            response: getJSONFixture('orders/find_includes.json')
          },
          includes2: {
            status: 200,
            response: getJSONFixture('orders/find_includes2.json')
          }
        },
        save: {
          success: {
            status: 200,
            response: getJSONFixture('orders/singular.json')
          },
          includes: {
            status: 200,
            response: getJSONFixture('orders/includes.json')
          },
          failure: {
            status: 422,
            response: getJSONFixture('orders/422_resource_invalid.json')
          }
        }
      },
      Product: {
        all: {
          success: {
            status: 200,
            response: getJSONFixture('products/collection.json')
          },
          paginated: {
            status: 200,
            response: getJSONFixture('products/paginated.json')
          }
        },
        find: {
          success: {
            status: 200,
            response: getJSONFixture('products/singular.json')
          },
          includes: {
            status: 200,
            response: getJSONFixture('products/includes.json')
          },
          noRelLinks: {
            status: 200,
            response: getJSONFixture('products/no_rel_links.json')
          },
          failure: {
            status: 404,
            response: getJSONFixture('products/404_resource_not_found.json')
          }
        },
        save: {
          success: {
            status: 200,
            response: getJSONFixture('products/another_singular.json')
          },
          failure: {
            status: 422,
            response: getJSONFixture('products/422_resource_invalid.json')
          }
        },
        destroy: {
          success: {
            status: 204
          },
          failure: {
            status: 403,
            response: getJSONFixture('products/403_forbidden.json')
          }
        }
      },
      Venue: {
        find: {
          tokenized: {
            status: 200,
            response: getJSONFixture('venues/singular_token.json')
          }
        }
      },
      relationships: {
        update: {
          success: {
            status: 204,
            response: null
          },
          failure: {
            status: 403,
            response: null
          }
        }
      }
    };

    window.extractData = function (response) {
      return JSON.stringify({
        data: JSON.parse(response).data
      });
    };
  }).call(undefined);
  (function () {
    describe('ActiveResource', function () {
      return describe('::Associations', function () {
        return describe('#association()', function () {
          return it('builds associations', function () {
            var order;
            order = MyLibrary.Order.build();
            return expect(order.association('product').isA(ActiveResource.prototype.Associations.prototype.BelongsToAssociation)).toBeTruthy();
          });
        });
      });
    });
  }).call(undefined);
  (function () {
    describe('ActiveResource', function () {
      beforeEach(function () {
        moxios.install(MyLibrary.interface.axios);
        window.onSuccess = jasmine.createSpy('onSuccess');
        window.onFailure = jasmine.createSpy('onFailure');
        return window.onCompletion = jasmine.createSpy('onCompletion');
      });
      afterEach(function () {
        return moxios.uninstall();
      });
      return describe('::Associations', function () {
        return describe('::BelongsToAssociation', function () {
          describe('reading', function () {
            beforeEach(function () {
              var _this = this;

              MyLibrary.Order.includes('giftCard').find(1).then(window.onSuccess);
              this.promise = moxios.wait(function () {
                return moxios.requests.mostRecent().respondWith(JsonApiResponses.Order.find.includes);
              });
              return this.promise2 = this.promise.then(function () {
                return _this.resource = window.onSuccess.calls.mostRecent().args[0];
              });
            });
            return it('returns the target', function () {
              var _this2 = this;

              return this.promise.then(function () {
                var base;
                return expect(typeof (base = _this2.resource.giftCard()).isA === "function" ? base.isA(MyLibrary.GiftCard) : void 0).toBeTruthy();
              });
            });
          });
          describe('loading', function () {
            beforeEach(function () {
              MyLibrary.Order.find(1).then(window.onSuccess);
              this.promise = moxios.wait(function () {
                return moxios.requests.mostRecent().respondWith(JsonApiResponses.Order.find.success);
              });
              return this.promise2 = this.promise.then(function () {
                var resource;
                resource = window.onSuccess.calls.mostRecent().args[0];
                resource.loadGiftCard().then(window.onSuccess);
                return moxios.wait(function () {
                  return moxios.requests.mostRecent().respondWith(JsonApiResponses.GiftCard.find.success);
                });
              });
            });
            it('queries the relationship URL', function () {
              return this.promise2.then(function () {
                return expect(moxios.requests.mostRecent().url).toEqual('https://example.com/api/v1/orders/1/gift_card/');
              });
            });
            return it('returns the target', function () {
              return this.promise2.then(function () {
                var target;
                target = window.onSuccess.calls.mostRecent().args[0];
                return expect(typeof target.isA === "function" ? target.isA(MyLibrary.GiftCard) : void 0).toBeTruthy();
              });
            });
          });
          describe('assigning', function () {
            beforeEach(function () {
              var _this3 = this;

              MyLibrary.Order.find(1).then(window.onSuccess);
              this.promise = moxios.wait(function () {
                return moxios.requests.mostRecent().respondWith(JsonApiResponses.Order.find.success);
              });
              return this.promise2 = this.promise.then(function () {
                _this3.resource = window.onSuccess.calls.mostRecent().args[0];
                _this3.target = MyLibrary.GiftCard.build({
                  id: 2
                });
                return _this3.resource.assignGiftCard(_this3.target);
              });
            });
            it('assigns the target', function () {
              var _this4 = this;

              return this.promise2.then(function () {
                return expect(_this4.resource.giftCard()).toEqual(_this4.target);
              });
            });
            it('assigns the inverse target', function () {
              var _this5 = this;

              return this.promise2.then(function () {
                return expect(_this5.resource.giftCard().order()).toEqual(_this5.resource);
              });
            });
            it('assigns the owner\'s foreign key', function () {
              var _this6 = this;

              return this.promise2.then(function () {
                return expect(_this6.resource.giftCardId).toEqual(_this6.target.id);
              });
            });
            describe('when assigning wrong type', function () {
              return it('throws an error', function () {
                var _this7 = this;

                return this.promise2.then(function () {
                  return expect(function () {
                    return _this7.resource.assignGiftCard(MyLibrary.OrderItem.build());
                  }).toThrow();
                });
              });
            });
            describe('when foreignKey defined', function () {
              beforeEach(function () {
                MyLibrary.BelongsToClass = function () {
                  var BelongsToClass =
                  /*#__PURE__*/
                  function (_MyLibrary$Base11) {
                    _inherits(BelongsToClass, _MyLibrary$Base11);

                    function BelongsToClass() {
                      _classCallCheck(this, BelongsToClass);

                      return _possibleConstructorReturn(this, _getPrototypeOf(BelongsToClass).apply(this, arguments));
                    }

                    return BelongsToClass;
                  }(MyLibrary.Base);

                  
                  BelongsToClass.className = 'BelongsToClass';
                  BelongsToClass.belongsTo('giftCard', {
                    foreignKey: 'giftCardToken'
                  });
                  return BelongsToClass;
                }.call(this);

                this.resource = MyLibrary.BelongsToClass.build();
                this.target = MyLibrary.GiftCard.build({
                  id: 'abc123'
                });
                return this.resource.assignGiftCard(this.target);
              });
              return it('assigns the owner\'s foreign key', function () {
                return expect(this.resource.giftCardToken).toEqual('abc123');
              });
            });
            describe('when primaryKey defined', function () {
              beforeEach(function () {
                MyLibrary.BelongsToClass = function () {
                  var BelongsToClass =
                  /*#__PURE__*/
                  function (_MyLibrary$Base12) {
                    _inherits(BelongsToClass, _MyLibrary$Base12);

                    function BelongsToClass() {
                      _classCallCheck(this, BelongsToClass);

                      return _possibleConstructorReturn(this, _getPrototypeOf(BelongsToClass).apply(this, arguments));
                    }

                    return BelongsToClass;
                  }(MyLibrary.Base);

                  
                  BelongsToClass.className = 'BelongsToClass';
                  BelongsToClass.belongsTo('giftCard', {
                    primaryKey: 'token',
                    foreignKey: 'giftCardToken'
                  });
                  return BelongsToClass;
                }.call(this);

                this.resource = MyLibrary.BelongsToClass.build();
                this.target = MyLibrary.GiftCard.build({
                  token: 'abc123'
                });
                return this.resource.assignGiftCard(this.target);
              });
              return it('assigns the owner\'s foreign key', function () {
                return expect(this.resource.giftCardToken).toEqual('abc123');
              });
            });
            return describe('when polymorphic', function () {
              beforeEach(function () {
                this.resource = MyLibrary.Comment.build();
                this.target = MyLibrary.Order.build({
                  id: 1
                });
                return this.resource.assignResource(this.target);
              });
              it('assigns the owner\'s foreign key', function () {
                return expect(this.resource.resourceId).toEqual(1);
              });
              return it('assigns the owner\'s foreign type', function () {
                return expect(this.resource.resourceType).toEqual('Order');
              });
            });
          });
          describe('updating', function () {
            beforeEach(function () {
              var _this8 = this;

              MyLibrary.Order.includes('giftCard').find(1).then(window.onSuccess);
              this.promise = moxios.wait(function () {
                return moxios.requests.mostRecent().respondWith(JsonApiResponses.Order.find.includes);
              });
              return this.promise2 = this.promise.then(function () {
                return _this8.resource = window.onSuccess.calls.mostRecent().args[0];
              });
            });
            describe('in general', function () {
              beforeEach(function () {
                var _this9 = this;

                return this.promise3 = this.promise2.then(function () {
                  _this9.target = MyLibrary.GiftCard.build({
                    id: 2
                  });

                  _this9.resource.updateGiftCard(_this9.target);

                  return _this9.resource;
                });
              });
              it('persists the update to the relationship URL', function () {
                return this.promise3.then(function () {
                  var url;
                  url = 'https://example.com/api/v1/orders/1/relationships/gift_card/';
                  return expect(moxios.requests.mostRecent().url).toEqual(url);
                });
              });
              return it('makes a PATCH request', function () {
                return this.promise3.then(function () {
                  return expect(moxios.requests.mostRecent().method).toEqual('patch');
                });
              });
            });
            describe('when assigning a resource', function () {
              beforeEach(function () {
                var _this10 = this;

                return this.promise3 = this.promise2.then(function () {
                  _this10.target = MyLibrary.GiftCard.build({
                    id: 2
                  });

                  _this10.resource.updateGiftCard(_this10.target);

                  return _this10.resource;
                });
              });
              it('sends a resource identifier document', function () {
                var resourceDocument;
                resourceDocument = JSON.stringify({
                  data: {
                    type: 'gift_cards',
                    id: '2'
                  }
                });
                return this.promise3.then(function () {
                  return expect(moxios.requests.mostRecent().data).toEqual(resourceDocument);
                });
              });
              describe('when update succeeds', function () {
                beforeEach(function () {
                  return this.promise4 = this.promise3.then(function () {
                    return moxios.requests.mostRecent().respondWith(JsonApiResponses.relationships.update.success);
                  });
                });
                it('assigns the target', function () {
                  var _this11 = this;

                  return this.promise4.then(function () {
                    return expect(_this11.resource.giftCard()).toEqual(_this11.target);
                  });
                });
                it('assigns the inverse target', function () {
                  var _this12 = this;

                  return this.promise4.then(function () {
                    return expect(_this12.resource.giftCard().order()).toEqual(_this12.resource);
                  });
                });
                return it('assigns the owner\'s foreign key', function () {
                  var _this13 = this;

                  return this.promise4.then(function () {
                    return expect(_this13.resource.giftCardId).toEqual(_this13.target.id);
                  });
                });
              });
              return describe('when update fails', function () {
                beforeEach(function () {
                  return this.promise4 = this.promise3.then(function () {
                    return moxios.requests.mostRecent().respondWith(JsonApiResponses.relationships.update.failure);
                  });
                });
                it('does not assign the target', function () {
                  var _this14 = this;

                  return this.promise4.catch(function () {
                    return expect(_this14.resource.giftCard()).not.toBe(_this14.target);
                  });
                });
                it('does not assign the inverse target', function () {
                  var _this15 = this;

                  return this.promise4.catch(function () {
                    return expect(_this15.target.order()).toBeNull();
                  });
                });
                return it('does not assign the owner\'s foreign key', function () {
                  var _this16 = this;

                  return this.promise4.catch(function () {
                    return expect(_this16.resource.giftCardId).toEqual('5');
                  });
                });
              });
            });
            return describe('when assigning null', function () {
              beforeEach(function () {
                var _this17 = this;

                return this.promise3 = this.promise2.then(function () {
                  _this17.oldTarget = _this17.resource.giftCard();

                  _this17.resource.updateGiftCard(null);

                  return _this17.resource;
                });
              });
              it('sends a blank document', function () {
                return this.promise3.then(function () {
                  return expect(moxios.requests.mostRecent().data).toEqual(JSON.stringify({
                    data: null
                  }));
                });
              });
              return describe('when update succeeds', function () {
                beforeEach(function () {
                  return this.promise4 = this.promise3.then(function () {
                    return moxios.requests.mostRecent().respondWith(JsonApiResponses.relationships.update.success);
                  });
                });
                it('assigns null', function () {
                  var _this18 = this;

                  return this.promise4.then(function () {
                    return expect(_this18.resource.giftCard()).toBeNull();
                  });
                }); // TODO: Add inverse unassignment (Rails does this automagically since it reloads association
                // targets using nullified foreign keys, resulting in null inverse for old target)
                //it 'unassigns the inverse of the old target', ->
                //expect(@oldTarget.order()).toBeNull()

                return it('assigns the owner\'s foreign key', function () {
                  var _this19 = this;

                  return this.promise4.then(function () {
                    return expect(_this19.resource.giftCardId).toBeNull();
                  });
                });
              });
            });
          });
          describe('building', function () {
            describe('inverseOf singular association', function () {
              beforeEach(function () {
                var _this20 = this;

                MyLibrary.Order.includes('giftCard').find(1).then(window.onSuccess);
                this.promise = moxios.wait(function () {
                  return moxios.requests.mostRecent().respondWith(JsonApiResponses.Order.find.includes);
                });
                return this.promise2 = this.promise.then(function () {
                  _this20.resource = window.onSuccess.calls.mostRecent().args[0];
                  return _this20.target = _this20.resource.buildGiftCard({
                    value: 5
                  });
                });
              });
              it('builds a resource of reflection klass type', function () {
                var _this21 = this;

                return this.promise2.then(function () {
                  return expect(_this21.target.klass()).toBe(MyLibrary.GiftCard);
                });
              });
              it('assigns the attributes to the target', function () {
                var _this22 = this;

                return this.promise2.then(function () {
                  return expect(_this22.target.value).toEqual(5);
                });
              });
              it('assigns the inverse target', function () {
                var _this23 = this;

                return this.promise2.then(function () {
                  return expect(_this23.target.order()).toBe(_this23.resource);
                });
              });
              return describe('when className is specified', function () {
                beforeEach(function () {
                  MyLibrary.MyClass = function () {
                    var MyClass =
                    /*#__PURE__*/
                    function (_MyLibrary$Base13) {
                      _inherits(MyClass, _MyLibrary$Base13);

                      function MyClass() {
                        _classCallCheck(this, MyClass);

                        return _possibleConstructorReturn(this, _getPrototypeOf(MyClass).apply(this, arguments));
                      }

                      return MyClass;
                    }(MyLibrary.Base);

                    
                    MyClass.className = 'MyClass';
                    MyClass.belongsTo('randomClass', {
                      className: 'GiftCard'
                    });
                    return MyClass;
                  }.call(this);

                  this.resource = MyLibrary.MyClass.build();
                  return this.target = this.resource.buildRandomClass({
                    id: 1
                  });
                });
                it('builds a resource of className type', function () {
                  return expect(this.target.klass()).toBe(MyLibrary.GiftCard);
                });
                return it('builds the resource with foreign key of reflection name', function () {
                  return expect(this.resource.randomClassId).toEqual(1);
                });
              });
            });
            return describe('inverseOf collection association', function () {
              beforeEach(function () {
                var _this24 = this;

                MyLibrary.Order.find(1).then(window.onSuccess);
                this.promise = moxios.wait(function () {
                  return moxios.requests.mostRecent().respondWith(JsonApiResponses.Order.find.success);
                });
                return this.promise2 = this.promise.then(function () {
                  _this24.resource = window.onSuccess.calls.mostRecent().args[0];
                  return _this24.target = _this24.resource.buildCustomer();
                });
              });
              it('builds a resource of reflection klass type', function () {
                var _this25 = this;

                return this.promise2.then(function () {
                  return expect(_this25.target.klass()).toBe(MyLibrary.Customer);
                });
              });
              return it('assigns the inverse target', function () {
                var _this26 = this;

                return this.promise2.then(function () {
                  return expect(_this26.target.orders().target().toArray()).toEqual([_this26.resource]);
                });
              });
            });
          });
          return describe('creating', function () {
            beforeEach(function () {
              var _this27 = this;

              MyLibrary.Order.includes('giftCard').find(1).then(window.onSuccess);
              this.promise = moxios.wait(function () {
                return moxios.requests.mostRecent().respondWith(JsonApiResponses.Order.find.includes);
              });
              return this.promise2 = this.promise.then(function () {
                return _this27.resource = window.onSuccess.calls.mostRecent().args[0];
              });
            });
            describe('in general', function () {
              beforeEach(function () {
                var _this28 = this;

                this.promise3 = this.promise2.then(function () {
                  _this28.resource.createGiftCard({
                    initialValue: 10,
                    value: 5
                  }).then(window.onSuccess);

                  return _this28.resource;
                });
                return this.promise4 = this.promise3.then(function () {
                  moxios.requests.mostRecent().respondWith(JsonApiResponses.GiftCard.save.success);
                  return moxios.wait(function () {
                    return _this28.target = window.onSuccess.calls.mostRecent().args[0];
                  });
                });
              });
              it('makes a request to the target\'s root URL', function () {
                return this.promise4.then(function () {
                  return expect(moxios.requests.mostRecent().url).toEqual('https://example.com/api/v1/gift_cards/');
                });
              });
              it('makes a POST request', function () {
                return this.promise4.then(function () {
                  return expect(moxios.requests.mostRecent().method).toEqual('post');
                });
              });
              it('sends a resource document', function () {
                var resourceDocument;
                resourceDocument = JSON.stringify({
                  data: {
                    type: 'gift_cards',
                    attributes: {
                      initial_value: 10,
                      value: 5
                    },
                    relationships: {
                      order: {
                        data: {
                          type: 'orders',
                          id: '1'
                        }
                      }
                    }
                  }
                });
                return this.promise4.then(function () {
                  return expect(moxios.requests.mostRecent().data).toEqual(resourceDocument);
                });
              });
              it('builds a resource of reflection klass type', function () {
                var _this29 = this;

                return this.promise4.then(function () {
                  return expect(_this29.target.isA(MyLibrary.GiftCard)).toBeTruthy();
                });
              });
              it('assigns the attributes to the target', function () {
                var _this30 = this;

                return this.promise4.then(function () {
                  return expect(_this30.target.value).toEqual(5);
                });
              });
              return it('assigns the inverse target', function () {
                var _this31 = this;

                return this.promise4.then(function () {
                  return expect(_this31.target.order()).toBe(_this31.resource);
                });
              });
            });
            describe('when creation succeeds', function () {
              beforeEach(function () {
                var _this32 = this;

                this.promise3 = this.promise2.then(function () {
                  _this32.resource.createGiftCard({
                    initialValue: 10,
                    value: 5
                  }).then(window.onSuccess);

                  return _this32.resource;
                });
                return this.promise4 = this.promise3.then(function () {
                  moxios.requests.mostRecent().respondWith(JsonApiResponses.GiftCard.save.success);
                  return _this32.target = window.onSuccess.calls.mostRecent().args[0];
                });
              });
              return it('persists the target', function () {
                var _this33 = this;

                return this.promise4.then(function () {
                  var base;
                  return expect(typeof (base = _this33.target).persisted === "function" ? base.persisted() : void 0).toBeTruthy();
                });
              });
            });
            return describe('when creation fails', function () {
              beforeEach(function () {
                var _this34 = this;

                this.promise3 = this.promise2.then(function () {
                  _this34.resource.createGiftCard({
                    value: 5
                  }).catch(window.onFailure);

                  return _this34.resource;
                });
                return this.promise4 = this.promise3.then(function () {
                  return moxios.requests.mostRecent().respondWith(JsonApiResponses.GiftCard.save.failure).catch(function () {
                    return _this34.target = window.onFailure.calls.mostRecent().args[0];
                  });
                });
              });
              it('does not persist the target', function () {
                var _this35 = this;

                return this.promise4.then(function () {
                  var base;
                  return expect(typeof (base = _this35.target).persisted === "function" ? base.persisted() : void 0).toBeFalsy();
                });
              });
              return it('adds errors to the target', function () {
                var _this36 = this;

                return this.promise4.then(function () {
                  var base;
                  return expect(typeof (base = _this36.target.errors()).empty === "function" ? base.empty() : void 0).toBeFalsy();
                });
              });
            });
          });
        });
      });
    });
  }).call(undefined);
  (function () {
    describe('ActiveResource', function () {
      beforeEach(function () {
        moxios.install(MyLibrary.interface.axios);
        window.onSuccess = jasmine.createSpy('onSuccess');
        window.onFailure = jasmine.createSpy('onFailure');
        return window.onCompletion = jasmine.createSpy('onCompletion');
      });
      afterEach(function () {
        return moxios.uninstall();
      });
      return describe('::Associations', function () {
        return describe('::HasManyAssociation', function () {
          describe('reading', function () {
            beforeEach(function () {
              var _this37 = this;

              MyLibrary.Product.includes('orders').find(1).then(window.onSuccess);
              this.promise = moxios.wait(function () {
                return moxios.requests.mostRecent().respondWith(JsonApiResponses.Product.find.includes);
              });
              return this.promise2 = this.promise.then(function () {
                return _this37.resource = window.onSuccess.calls.mostRecent().args[0];
              });
            });
            it('returns a CollectionProxy', function () {
              var _this38 = this;

              return this.promise.then(function () {
                return expect(_this38.resource.orders().klass()).toBe(ActiveResource.prototype.Associations.prototype.CollectionProxy);
              });
            });
            return describe('#all(cached: true)', function () {
              it('returns a collection', function () {
                var _this39 = this;

                return this.promise.then(function () {
                  return expect(_this39.resource.orders().all({
                    cached: true
                  }).klass()).toBe(ActiveResource.prototype.Collection);
                });
              });
              return it('returns resources already loaded', function () {
                var _this40 = this;

                return this.promise.then(function () {
                  return expect(_this40.resource.orders().all({
                    cached: true
                  }).size()).toEqual(2);
                });
              });
            });
          });
          describe('loading', function () {
            beforeEach(function () {
              var _this41 = this;

              MyLibrary.Product.find(1).then(window.onSuccess);
              this.promise = moxios.wait(function () {
                return moxios.requests.mostRecent().respondWith(JsonApiResponses.Product.find.success);
              });
              return this.promise2 = this.promise.then(function () {
                return _this41.resource = window.onSuccess.calls.mostRecent().args[0];
              });
            });
            it('uses relationship data URL', function () {
              var _this42 = this;

              var relationshipLinks;
              relationshipLinks = {
                self: 'https://example.com/api/v1/products/1/relationships/orders/',
                related: 'https://example.com/api/v1/products/1/orders/'
              };
              return this.promise2.then(function () {
                return expect(_this42.resource.orders().links()).toEqual(relationshipLinks);
              });
            });
            describe('#loadTarget()', function () {
              beforeEach(function () {
                var _this43 = this;

                this.promise3 = this.promise2.then(function () {
                  _this43.resource.association('orders').loadTarget().then(window.onSuccess);

                  return _this43.resource;
                });
                return this.promise4 = this.promise3.then(function () {
                  return moxios.requests.mostRecent().respondWith(JsonApiResponses.Order.all.success).then(function () {
                    return _this43.target = window.onSuccess.calls.mostRecent().args[0];
                  });
                });
              });
              it('returns a collection', function () {
                var _this44 = this;

                return this.promise4.then(function () {
                  return expect(_this44.target.klass()).toBe(ActiveResource.prototype.CollectionResponse);
                });
              });
              it('returns a collection of resources of reflection klass type', function () {
                var _this45 = this;

                return this.promise4.then(function () {
                  return expect(_this45.target.first().klass()).toBe(MyLibrary.Order);
                });
              });
              return it('caches the result on the target', function () {
                var _this46 = this;

                return this.promise4.then(function () {
                  return expect(_this46.resource.orders().all({
                    cached: true
                  }).size()).toEqual(_this46.target.size());
                });
              });
            });
            describe('#all()', function () {
              beforeEach(function () {
                var _this47 = this;

                this.promise3 = this.promise2.then(function () {
                  _this47.resource.orders().all().then(window.onSuccess);

                  return _this47.resource;
                });
                return this.promise4 = this.promise3.then(function () {
                  return moxios.requests.mostRecent().respondWith(JsonApiResponses.Order.all.success).then(function () {
                    return _this47.result = window.onSuccess.calls.mostRecent().args[0];
                  });
                });
              });
              it('returns a collection', function () {
                var _this48 = this;

                return this.promise4.then(function () {
                  return expect(_this48.result.klass()).toBe(ActiveResource.prototype.CollectionResponse);
                });
              });
              it('returns a collection of resources of reflection klass type', function () {
                var _this49 = this;

                return this.promise4.then(function () {
                  return expect(_this49.result.first().klass()).toBe(MyLibrary.Order);
                });
              });
              return it('does not assign the target', function () {
                var _this50 = this;

                return this.promise4.then(function () {
                  return expect(_this50.resource.orders().all({
                    cached: true
                  }).size()).toEqual(0);
                });
              });
            });
            describe('#load()', function () {
              beforeEach(function () {
                var _this51 = this;

                this.promise3 = this.promise2.then(function () {
                  _this51.resource.orders().where({
                    some: 'value'
                  }).load().then(window.onSuccess);

                  return _this51.resource;
                });
                return this.promise4 = this.promise3.then(function () {
                  return moxios.requests.mostRecent().respondWith(JsonApiResponses.Order.all.success).then(function () {
                    return _this51.result = window.onSuccess.calls.mostRecent().args[0];
                  });
                });
              });
              it('returns a collection', function () {
                var _this52 = this;

                return this.promise4.then(function () {
                  return expect(_this52.result.klass()).toBe(ActiveResource.prototype.CollectionResponse);
                });
              });
              it('returns a collection of resources of reflection klass type', function () {
                var _this53 = this;

                return this.promise4.then(function () {
                  return expect(_this53.result.first().klass()).toBe(MyLibrary.Order);
                });
              });
              it('does assign the target', function () {
                var _this54 = this;

                return this.promise4.then(function () {
                  return expect(_this54.resource.orders().all({
                    cached: true
                  }).size()).not.toEqual(0);
                });
              });
              return it('queries the first relationship resource with filters', function () {
                return this.promise4.then(function () {
                  return expect(requestParams(moxios.requests.mostRecent())).toContain('filter[some]=value');
                });
              });
            });
            describe('#first()', function () {
              beforeEach(function () {
                var _this55 = this;

                this.promise3 = this.promise2.then(function () {
                  _this55.resource.orders().first().then(window.onSuccess);

                  return _this55.resource;
                });
                return this.promise4 = this.promise3.then(function () {
                  return moxios.requests.mostRecent().respondWith(JsonApiResponses.Order.all.success).then(function () {
                    return _this55.result = window.onSuccess.calls.mostRecent().args[0];
                  });
                });
              });
              it('queries the first resource of the relationship data URL', function () {
                return this.promise4.then(function () {
                  return expect(requestParams(moxios.requests.mostRecent())).toContain('limit=1');
                });
              });
              it('gets a resource of the relationship', function () {
                var _this56 = this;

                return this.promise4.then(function () {
                  return expect(_this56.result.klass()).toBe(MyLibrary.Order);
                });
              });
              return it('does not assign the target', function () {
                var _this57 = this;

                return this.promise4.then(function () {
                  return expect(_this57.resource.orders().all({
                    cached: true
                  }).size()).toEqual(0);
                });
              });
            });
            describe('#last()', function () {
              beforeEach(function () {
                var _this58 = this;

                this.promise3 = this.promise2.then(function () {
                  _this58.resource.orders().last().then(window.onSuccess);

                  return _this58.resource;
                });
                return this.promise4 = this.promise3.then(function () {
                  return moxios.requests.mostRecent().respondWith(JsonApiResponses.Order.all.success).then(function () {
                    return _this58.result = window.onSuccess.calls.mostRecent().args[0];
                  });
                });
              });
              it('queries the first resource of the relationship data URL', function () {
                return this.promise4.then(function () {
                  return expect(requestParams(moxios.requests.mostRecent())).toContain('limit=1&offset=-1');
                });
              });
              it('gets a resource of the relationship', function () {
                var _this59 = this;

                return this.promise4.then(function () {
                  return expect(_this59.result.klass()).toBe(MyLibrary.Order);
                });
              });
              return it('does not assign the target', function () {
                var _this60 = this;

                return this.promise4.then(function () {
                  return expect(_this60.resource.orders().all({
                    cached: true
                  }).size()).toEqual(0);
                });
              });
            });
            describe('#find()', function () {
              beforeEach(function () {
                var _this61 = this;

                this.promise3 = this.promise2.then(function () {
                  _this61.resource.orders().find(1).then(window.onSuccess);

                  return _this61.resource;
                });
                return this.promise4 = this.promise3.then(function () {
                  return moxios.requests.mostRecent().respondWith(JsonApiResponses.Order.find.success).then(function () {
                    return _this61.result = window.onSuccess.calls.mostRecent().args[0];
                  });
                });
              });
              it('queries a specific member of the relationship data URL', function () {
                var memberLink;
                memberLink = 'https://example.com/api/v1/products/1/orders/1';
                return this.promise4.then(function () {
                  return expect(moxios.requests.mostRecent().url).toContain(memberLink);
                });
              });
              it('gets a resource of the relationship', function () {
                var _this62 = this;

                return this.promise4.then(function () {
                  return expect(_this62.result.klass()).toBe(MyLibrary.Order);
                });
              });
              return it('does not assign the target', function () {
                var _this63 = this;

                return this.promise4.then(function () {
                  return expect(_this63.resource.orders().all({
                    cached: true
                  }).size()).toEqual(0);
                });
              });
            });
            describe('#findBy()', function () {
              beforeEach(function () {
                var _this64 = this;

                this.promise3 = this.promise2.then(function () {
                  _this64.resource.orders().findBy({
                    token: 'abc123'
                  }).then(window.onSuccess);

                  return _this64.resource;
                });
                return this.promise4 = this.promise3.then(function () {
                  return moxios.requests.mostRecent().respondWith(JsonApiResponses.Order.all.success).then(function () {
                    return _this64.result = window.onSuccess.calls.mostRecent().args[0];
                  });
                });
              });
              it('queries the first relationship resource with filters', function () {
                return this.promise4.then(function () {
                  return expect(requestParams(moxios.requests.mostRecent())).toContain('filter[token]=abc123', 'limit=1');
                });
              });
              it('gets a resource of the relationship', function () {
                var _this65 = this;

                return this.promise4.then(function () {
                  return expect(_this65.result.klass()).toBe(MyLibrary.Order);
                });
              });
              return it('does not assign the target', function () {
                var _this66 = this;

                return this.promise4.then(function () {
                  return expect(_this66.resource.orders().all({
                    cached: true
                  }).size()).toEqual(0);
                });
              });
            });
            return describe('when using a Relation extension method', function () {
              it('extends the association relation', function () {
                var _this67 = this;

                return this.promise2.then(function () {
                  return expect(_this67.resource.orders().where().klass()).toBe(ActiveResource.prototype.Associations.prototype.CollectionProxy);
                });
              });
              it('adds query params to the relationship URL query', function () {
                var _this68 = this;

                this.promise3 = this.promise2.then(function () {
                  _this68.resource.orders().where({
                    price: 5
                  }).all();

                  return _this68.resource;
                });
                return this.promise3.then(function () {
                  return expect(requestParams(moxios.requests.mostRecent())).toContain('filter[price]=5');
                });
              });
              describe('#select()', function () {
                beforeEach(function () {
                  var _this69 = this;

                  return this.promise3 = this.promise2.then(function () {
                    _this69.resource.orders().select('price', 'verificationCode').all();

                    return _this69.resource;
                  });
                });
                return it('uses the correct model name for shallow fields', function () {
                  return this.promise3.then(function () {
                    return expect(requestParams(moxios.requests.mostRecent())).toContain('fields[orders]=price,verification_code');
                  });
                });
              });
              return describe('#includes()', function () {
                beforeEach(function () {
                  var _this70 = this;

                  this.promise3 = this.promise2.then(function () {
                    _this70.resource.orders().includes('orderItems').all().then(window.onSuccess);

                    return _this70.resource;
                  });
                  return this.promise4 = this.promise3.then(function () {
                    return moxios.requests.mostRecent().respondWith(JsonApiResponses.Order.all.includes).then(function () {
                      return _this70.result = window.onSuccess.calls.mostRecent().args[0];
                    });
                  });
                });
                return it('associates included resources', function () {
                  var _this71 = this;

                  return this.promise4.then(function () {
                    expect(_this71.result.first().orderItems().all({
                      cached: true
                    }).size()).toEqual(1);
                    return expect(_this71.result.last().orderItems().all({
                      cached: true
                    }).size()).toEqual(1);
                  });
                });
              });
            });
          });
          describe('reloading', function () {
            return describe('when nested associations were included', function () {
              beforeEach(function () {
                var _this72 = this;

                MyLibrary.Product.includes({
                  orders: 'comments'
                }).find(1).then(window.onSuccess);
                this.promise = moxios.wait(function () {
                  return moxios.requests.mostRecent().respondWith(JsonApiResponses.Product.find.includes);
                });
                return this.promise2 = this.promise.then(function () {
                  return _this72.resource = window.onSuccess.calls.mostRecent().args[0];
                });
              });
              return it("adds the nested associations to queryParams['include']", function () {
                var _this73 = this;

                this.promise3 = this.promise2.then(function () {
                  _this73.resource.orders().reload();

                  return _this73.resource;
                });
                return this.promise3.then(function () {
                  return expect(requestParams(moxios.requests.mostRecent())).toContain('include=comments');
                });
              });
            });
          });
          describe('assigning when owner is unpersisted', function () {
            beforeEach(function () {
              this.resource = MyLibrary.Product.build({
                id: 2
              });
              this.target = [MyLibrary.Order.build({
                id: 1
              }), MyLibrary.Order.build({
                id: 2
              })];
              return this.resource.orders().assign(this.target);
            });
            it('replaces the target with the resource(s)', function () {
              var _this74 = this;

              return _.each(this.target, function (t) {
                return expect(_this74.resource.orders().all({
                  cached: true
                }).toArray()).toContain(t);
              });
            });
            it('replaces the inverse target(s) of the resource(s)', function () {
              var _this75 = this;

              return _.each(this.target, function (t) {
                return expect(t.product()).toBe(_this75.resource);
              });
            });
            it('replaces the resources(s) foreign key(s)', function () {
              var _this76 = this;

              return _.each(this.target, function (t) {
                return expect(t.productId).toEqual(_this76.resource.id);
              });
            });
            describe('when assigning wrong type', function () {
              return it('throws an error', function () {
                var _this77 = this;

                return expect(function () {
                  return _this77.resource.orders().assign(MyLibrary.OrderItem.build());
                }).toThrow();
              });
            });
            describe('when foreignKey defined', function () {
              beforeEach(function () {
                MyLibrary.HasManyClass = function () {
                  var HasManyClass =
                  /*#__PURE__*/
                  function (_MyLibrary$Base14) {
                    _inherits(HasManyClass, _MyLibrary$Base14);

                    function HasManyClass() {
                      _classCallCheck(this, HasManyClass);

                      return _possibleConstructorReturn(this, _getPrototypeOf(HasManyClass).apply(this, arguments));
                    }

                    return HasManyClass;
                  }(MyLibrary.Base);

                  
                  HasManyClass.className = 'HasManyClass';
                  HasManyClass.queryName = 'has_many_classes';
                  HasManyClass.hasMany('orders', {
                    foreignKey: 'hasManyClassToken'
                  });
                  return HasManyClass;
                }.call(this);

                this.resource = MyLibrary.HasManyClass.build({
                  id: 2
                });
                this.target = MyLibrary.Order.build();
                return this.resource.orders().assign(this.target);
              });
              return it('assigns the inverse\'s foreign key', function () {
                return expect(this.target.hasManyClassToken).toEqual(2);
              });
            });
            describe('when primaryKey defined', function () {
              beforeEach(function () {
                MyLibrary.HasManyClass = function () {
                  var HasManyClass =
                  /*#__PURE__*/
                  function (_MyLibrary$Base15) {
                    _inherits(HasManyClass, _MyLibrary$Base15);

                    function HasManyClass() {
                      _classCallCheck(this, HasManyClass);

                      return _possibleConstructorReturn(this, _getPrototypeOf(HasManyClass).apply(this, arguments));
                    }

                    return HasManyClass;
                  }(MyLibrary.Base);

                  
                  HasManyClass.className = 'HasManyClass';
                  HasManyClass.queryName = 'has_many_classes';
                  HasManyClass.hasMany('orders', {
                    primaryKey: 'token',
                    foreignKey: 'hasManyClassToken'
                  });
                  return HasManyClass;
                }.call(this);

                this.resource = MyLibrary.HasManyClass.build({
                  token: 'abc123'
                });
                this.target = MyLibrary.Order.build();
                return this.resource.orders().assign(this.target);
              });
              return it('assigns the inverse\'s foreign key', function () {
                return expect(this.target.hasManyClassToken).toEqual('abc123');
              });
            });
            return describe('when target is polymorphic', function () {
              beforeEach(function () {
                MyLibrary.HasManyClass = function () {
                  var HasManyClass =
                  /*#__PURE__*/
                  function (_MyLibrary$Base16) {
                    _inherits(HasManyClass, _MyLibrary$Base16);

                    function HasManyClass() {
                      _classCallCheck(this, HasManyClass);

                      return _possibleConstructorReturn(this, _getPrototypeOf(HasManyClass).apply(this, arguments));
                    }

                    return HasManyClass;
                  }(MyLibrary.Base);

                  
                  HasManyClass.className = 'HasManyClass';
                  HasManyClass.queryName = 'has_many_classes';
                  HasManyClass.hasMany('belongsToPolymorphics', {
                    as: 'hasManyAlias'
                  });
                  return HasManyClass;
                }.call(this);

                MyLibrary.BelongsToPolymorphic = function () {
                  var BelongsToPolymorphic =
                  /*#__PURE__*/
                  function (_MyLibrary$Base17) {
                    _inherits(BelongsToPolymorphic, _MyLibrary$Base17);

                    function BelongsToPolymorphic() {
                      _classCallCheck(this, BelongsToPolymorphic);

                      return _possibleConstructorReturn(this, _getPrototypeOf(BelongsToPolymorphic).apply(this, arguments));
                    }

                    return BelongsToPolymorphic;
                  }(MyLibrary.Base);

                  
                  BelongsToPolymorphic.className = 'BelongsToPolymorphic';
                  BelongsToPolymorphic.queryName = 'belongs_to_polymorphics';
                  BelongsToPolymorphic.belongsTo('hasManyAlias', {
                    polymorphic: true
                  });
                  return BelongsToPolymorphic;
                }.call(this);

                this.resource = MyLibrary.HasManyClass.build({
                  id: 1
                });
                this.target = MyLibrary.BelongsToPolymorphic.build();
                return this.resource.belongsToPolymorphics().assign(this.target);
              });
              it('assigns the inverse\'s foreign key', function () {
                return expect(this.target.hasManyAliasId).toEqual(1);
              });
              return it('assigns the inverse\'s foreign type', function () {
                return expect(this.target.hasManyAliasType).toEqual('HasManyClass');
              });
            });
          }); // TODO: Make `foreignType` option work with specs

          describe('assigning when owner is persisted', function () {
            beforeEach(function () {
              var _this78 = this;

              MyLibrary.Product.find(1).then(window.onSuccess);
              this.promise = moxios.wait(function () {
                return moxios.requests.mostRecent().respondWith(JsonApiResponses.Product.find.success);
              });
              return this.promise2 = this.promise.then(function () {
                return _this78.resource = window.onSuccess.calls.mostRecent().args[0];
              });
            });
            describe('in general', function () {
              beforeEach(function () {
                var _this79 = this;

                this.promise3 = this.promise2.then(function () {
                  MyLibrary.Order.all().then(window.onSuccess);
                  return moxios.wait(function () {
                    return moxios.requests.mostRecent().respondWith(JsonApiResponses.Order.all.success).then(function () {
                      return _this79.target = window.onSuccess.calls.mostRecent().args[0];
                    });
                  });
                });
                return this.promise4 = this.promise3.then(function () {
                  _this79.resource.orders().assign(_this79.target);

                  return moxios.wait(function () {
                    return moxios.requests.mostRecent().respondWith(JsonApiResponses.relationships.update.success);
                  });
                });
              });
              it('persists the update to the relationship URL', function () {
                var relationshipLink;
                relationshipLink = 'https://example.com/api/v1/products/1/relationships/orders/';
                return this.promise4.then(function () {
                  return expect(moxios.requests.mostRecent().url).toEqual(relationshipLink);
                });
              });
              return it('makes a PATCH request', function () {
                return this.promise4.then(function () {
                  return expect(moxios.requests.mostRecent().method).toEqual('patch');
                });
              });
            });
            describe('when assigning collection of resources', function () {
              beforeEach(function () {
                var _this80 = this;

                this.promise3 = this.promise2.then(function () {
                  MyLibrary.Order.all().then(window.onSuccess);
                  return moxios.wait(function () {
                    return moxios.requests.mostRecent().respondWith(JsonApiResponses.Order.all.success).then(function () {
                      return _this80.target = window.onSuccess.calls.mostRecent().args[0];
                    });
                  });
                });
                return this.promise4 = this.promise3.then(function () {
                  _this80.resource.orders().assign(_this80.target);

                  return _this80.resource;
                });
              });
              it('sends a resource identifier document', function () {
                var resourceDocument;
                resourceDocument = JSON.stringify({
                  data: [{
                    type: 'orders',
                    id: '1'
                  }, {
                    type: 'orders',
                    id: '2'
                  }]
                });
                return this.promise4.then(function () {
                  return expect(moxios.requests.mostRecent().data).toEqual(resourceDocument);
                });
              });
              describe('when update succeeds', function () {
                beforeEach(function () {
                  return this.promise5 = this.promise4.then(function () {
                    return moxios.requests.mostRecent().respondWith(JsonApiResponses.relationships.update.success);
                  });
                });
                it('replaces the target with the resource(s)', function () {
                  var _this81 = this;

                  return this.promise5.then(function () {
                    return _this81.target.each(function (t) {
                      return expect(_this81.resource.orders().all({
                        cached: true
                      }).toArray()).toContain(t);
                    });
                  });
                });
                it('replaces the inverse target(s) of the resource(s)', function () {
                  var _this82 = this;

                  return this.promise5.then(function () {
                    return _this82.target.each(function (t) {
                      return expect(t.product()).toBe(_this82.resource);
                    });
                  });
                });
                return it('replaces the resources(s) foreign key(s)', function () {
                  var _this83 = this;

                  return this.promise5.then(function () {
                    return _this83.target.each(function (t) {
                      return expect(t.productId).toEqual(_this83.resource.id);
                    });
                  });
                });
              });
              return describe('when update fails', function () {
                beforeEach(function () {
                  return this.promise5 = this.promise4.then(function () {
                    return moxios.requests.mostRecent().respondWith(JsonApiResponses.relationships.update.failure);
                  });
                });
                it('does not replace the target with the resource(s)', function () {
                  var _this84 = this;

                  return this.promise5.catch(function () {
                    return _this84.target.each(function (t) {
                      return expect(_this84.resource.orders().all({
                        cached: true
                      }).toArray()).not.toContain(t);
                    });
                  });
                });
                it('does not replace the inverse target(s) of the resource(s)', function () {
                  var _this85 = this;

                  return this.promise5.catch(function () {
                    return _this85.target.each(function (t) {
                      return expect(t.product()).not.toBe(_this85.resource);
                    });
                  });
                });
                return it('does not replace the foreign key(s) of the resource(s)', function () {
                  var _this86 = this;

                  return this.promise5.catch(function () {
                    return _this86.target.each(function (t) {
                      return expect(t.productId).not.toEqual(_this86.resource.id);
                    });
                  });
                });
              });
            });
            describe('when assigning empty collection', function () {
              beforeEach(function () {
                var _this87 = this;

                return this.promise3 = this.promise2.then(function () {
                  _this87.resource.orders().assign([]);

                  return _this87.resource;
                });
              });
              it('sends an empty document', function () {
                var resourceDocument;
                resourceDocument = JSON.stringify({
                  data: []
                });
                return this.promise3.then(function () {
                  return expect(moxios.requests.mostRecent().data).toEqual(resourceDocument);
                });
              });
              return describe('when update succeeds', function () {
                beforeEach(function () {
                  return this.promise4 = this.promise3.then(function () {
                    return moxios.requests.mostRecent().respondWith(JsonApiResponses.relationships.update.success);
                  });
                });
                return it('replaces the target with an empty collection', function () {
                  var _this88 = this;

                  return this.promise4.then(function () {
                    return expect(_this88.resource.orders().all({
                      cached: true
                    }).size()).toEqual(0);
                  });
                });
              });
            });
            return describe('when assigning with save: false', function () {
              beforeEach(function () {
                var _this89 = this;

                return this.promise3 = this.promise2.then(function () {
                  MyLibrary.Order.all().then(window.onSuccess);
                  return moxios.wait(function () {
                    return moxios.requests.mostRecent().respondWith(JsonApiResponses.Order.all.success).then(function () {
                      _this89.target = window.onSuccess.calls.mostRecent().args[0];
                      _this89.priorRequestsCount = moxios.requests.count();
                      return _this89.output = _this89.resource.orders().assign(_this89.target.toCollection(), false);
                    });
                  });
                });
              });
              it('does not make a request', function () {
                var _this90 = this;

                return this.promise3.then(function () {
                  return expect(moxios.requests.count()).toEqual(_this90.priorRequestsCount);
                });
              });
              it('does return assigned resources', function () {
                var _this91 = this;

                return this.promise3.then(function () {
                  return expect(_this91.output.klass()).toBe(ActiveResource.prototype.Collection);
                });
              });
              return it('replaces the target', function () {
                var _this92 = this;

                return this.promise3.then(function () {
                  return expect(_this92.resource.orders().all({
                    cached: true
                  }).size()).toEqual(_this92.target.size());
                });
              });
            });
          });
          describe('building', function () {
            beforeEach(function () {
              var _this93 = this;

              MyLibrary.Product.find(1).then(window.onSuccess);
              return this.promise = moxios.wait(function () {
                return moxios.requests.mostRecent().respondWith(JsonApiResponses.Product.find.success).then(function () {
                  _this93.resource = window.onSuccess.calls.mostRecent().args[0];
                  return _this93.target = _this93.resource.orders().build([{
                    price: 1
                  }, {
                    price: 2
                  }]);
                });
              });
            });
            it('builds resource(s) of reflection klass type', function () {
              var _this94 = this;

              return this.promise.then(function () {
                return _this94.target.each(function (t) {
                  return expect(t.klass()).toBe(MyLibrary.Order);
                });
              });
            });
            it('assigns attributes to the resource(s)', function () {
              var _this95 = this;

              return this.promise.then(function () {
                return _this95.target.each(function (t) {
                  return expect([1, 2]).toContain(t.price);
                });
              });
            });
            it('assigns the inverse target(s)', function () {
              var _this96 = this;

              return this.promise.then(function () {
                return _this96.target.each(function (t) {
                  return expect(t.product()).toBe(_this96.resource);
                });
              });
            });
            it('assigns the target(s) foreign key(s)', function () {
              var _this97 = this;

              return this.promise.then(function () {
                return _this97.target.each(function (t) {
                  return expect(t.productId).toEqual(_this97.resource.id);
                });
              });
            });
            return it('adds the resource to the target', function () {
              var _this98 = this;

              return this.promise.then(function () {
                return _this98.target.each(function (t) {
                  return expect(_this98.resource.orders().all({
                    cached: true
                  }).toArray()).toContain(t);
                });
              });
            });
          });
          describe('creating', function () {
            beforeEach(function () {
              var _this99 = this;

              MyLibrary.Product.find(1).then(window.onSuccess);
              return this.promise = moxios.wait(function () {
                return moxios.requests.mostRecent().respondWith(JsonApiResponses.Product.find.success).then(function () {
                  return _this99.resource = window.onSuccess.calls.mostRecent().args[0];
                });
              });
            });
            describe('in general', function () {
              beforeEach(function () {
                var _this100 = this;

                this.promise2 = this.promise.then(function () {
                  _this100.resource.orders().create({
                    price: 3,
                    verificationCode: 'abc123'
                  }, window.onCompletion);

                  return _this100.resource;
                });
                return this.promise3 = this.promise2.then(function () {
                  return moxios.requests.mostRecent().respondWith(JsonApiResponses.Order.save.success).then(function () {
                    return _this100.target = window.onCompletion.calls.mostRecent().args[0];
                  });
                });
              });
              it('makes a request to the target\'s root URL', function () {
                var targetURL;
                targetURL = 'https://example.com/api/v1/orders/';
                return this.promise3.then(function () {
                  return expect(moxios.requests.mostRecent().url).toEqual(targetURL);
                });
              });
              it('makes a POST request', function () {
                return this.promise3.then(function () {
                  return expect(moxios.requests.mostRecent().method).toEqual('post');
                });
              });
              it('sends a resource document', function () {
                var resourceDocument;
                resourceDocument = JSON.stringify({
                  data: {
                    type: 'orders',
                    attributes: {
                      price: 3,
                      verification_code: 'abc123',
                      product_id: '1'
                    },
                    relationships: {
                      product: {
                        data: {
                          type: 'products',
                          id: '1'
                        }
                      }
                    }
                  }
                });
                return this.promise3.then(function () {
                  return expect(extractData(moxios.requests.mostRecent().data)).toEqual(resourceDocument);
                });
              });
              it('builds resource(s) of reflection klass type', function () {
                var _this101 = this;

                return this.promise3.then(function () {
                  return expect(_this101.target.klass()).toBe(MyLibrary.Order);
                });
              });
              it('assigns attributes to the resource(s)', function () {
                var _this102 = this;

                return this.promise3.then(function () {
                  return expect(_this102.target.price).toEqual(3);
                });
              });
              it('assigns the inverse target(s)', function () {
                var _this103 = this;

                return this.promise3.then(function () {
                  return expect(_this103.target.product()).toBe(_this103.resource);
                });
              });
              it('assigns the resource(s) foreign key(s)', function () {
                var _this104 = this;

                return this.promise3.then(function () {
                  return expect(_this104.target.productId).toEqual(_this104.resource.id);
                });
              });
              return it('adds the resource(s) to the target', function () {
                var _this105 = this;

                return this.promise3.then(function () {
                  return expect(_this105.resource.orders().all({
                    cached: true
                  }).toArray()).toContain(_this105.target);
                });
              });
            });
            describe('when creation succeeds', function () {
              beforeEach(function () {
                var _this106 = this;

                this.promise2 = this.promise.then(function () {
                  _this106.resource.orders().create({
                    price: 3,
                    verificationCode: 'abc123'
                  }, window.onCompletion);

                  return _this106.resource;
                });
                return this.promise3 = this.promise2.then(function () {
                  return moxios.requests.mostRecent().respondWith(JsonApiResponses.Order.save.success).then(function () {
                    return _this106.target = window.onCompletion.calls.mostRecent().args[0];
                  });
                });
              });
              return it('persists the resource', function () {
                var _this107 = this;

                return this.promise3.then(function () {
                  var base;
                  return expect(typeof (base = _this107.target).persisted === "function" ? base.persisted() : void 0).toBeTruthy();
                });
              });
            });
            describe('when creation fails', function () {
              beforeEach(function () {
                var _this108 = this;

                return this.promise2 = this.promise.then(function () {
                  _this108.resource.orders().create({
                    price: 3
                  }, window.onCompletion);

                  return moxios.wait(function () {
                    return moxios.requests.mostRecent().respondWith(JsonApiResponses.Order.save.failure).catch(function () {
                      return Promise.reject(_this108.target = window.onCompletion.calls.mostRecent().args[0]);
                    });
                  });
                });
              });
              it('does not persist the resource', function () {
                var _this109 = this;

                return this.promise2.catch(function () {
                  var base;
                  return expect(typeof (base = _this109.target).persisted === "function" ? base.persisted() : void 0).toBeFalsy();
                });
              });
              return it('adds errors to the resource', function () {
                var _this110 = this;

                return this.promise2.catch(function () {
                  var base;
                  return expect(typeof (base = _this110.target.errors()).empty === "function" ? base.empty() : void 0).toBeFalsy();
                });
              });
            });
            describe('when autosave association is present', function () {
              beforeEach(function () {
                var _this111 = this;

                return this.promise2 = this.promise.then(function () {
                  var orderItems;
                  MyLibrary.Order.hasMany('orderItems', {
                    autosave: true
                  });
                  orderItems = [MyLibrary.OrderItem.build({
                    amount: 1.0
                  }), MyLibrary.OrderItem.build({
                    amount: 2.0
                  })];

                  _this111.resource.orders().create({
                    price: 3,
                    orderItems: orderItems
                  }, window.onCompletion);

                  return _this111.resource;
                });
              });
              afterEach(function () {
                MyLibrary.Order.hasMany('orderItems');
                return MyLibrary.Order.resetQueryParams();
              });
              it('adds the association attributes to the resource document', function () {
                var resourceDocument;
                resourceDocument = {
                  type: 'orders',
                  attributes: {
                    price: 3,
                    product_id: '1'
                  },
                  relationships: {
                    product: {
                      data: {
                        type: 'products',
                        id: '1'
                      }
                    },
                    order_items: {
                      data: [{
                        type: 'order_items',
                        attributes: {
                          amount: 1.0
                        },
                        relationships: {}
                      }, {
                        type: 'order_items',
                        attributes: {
                          amount: 2.0
                        },
                        relationships: {}
                      }]
                    }
                  }
                };
                return this.promise2.then(function () {
                  return expect(JSON.parse(moxios.requests.mostRecent().data)['data']).toEqual(resourceDocument);
                });
              });
              it("adds the autosave association to queryOptions['include']", function () {
                return this.promise2.then(function () {
                  return expect(JSON.parse(moxios.requests.mostRecent().data)['include']).toContain('order_items');
                });
              });
              return describe('when creation succeeds', function () {
                beforeEach(function () {
                  var _this112 = this;

                  return this.promise3 = this.promise2.then(function () {
                    return moxios.requests.mostRecent().respondWith(JsonApiResponses.Order.find.includes).then(function () {
                      return _this112.order = window.onCompletion.calls.mostRecent().args[0];
                    });
                  });
                });
                return it('persists the autosave association', function () {
                  var _this113 = this;

                  return this.promise3.then(function () {
                    return _this113.order.orderItems().all({
                      cached: true
                    }).each(function (o) {
                      return expect(o.persisted()).toBeTruthy();
                    });
                  });
                });
              });
            });
            return describe('when owner is not persisted', function () {
              return it('throws exception', function () {
                var resource;
                resource = MyLibrary.Product.build();
                return expect(function () {
                  return resource.orders().create({
                    price: 5
                  });
                }).toThrow();
              });
            });
          });
          describe('pushing', function () {
            beforeEach(function () {
              var _this114 = this;

              MyLibrary.Product.find(1).then(window.onSuccess);
              this.promise = moxios.wait(function () {
                return moxios.requests.mostRecent().respondWith(JsonApiResponses.Product.find.success).then(function () {
                  return _this114.resource = window.onSuccess.calls.mostRecent().args[0];
                });
              });
              this.promise2 = this.promise.then(function () {
                MyLibrary.Order.all().then(window.onSuccess);
                return moxios.wait(function () {
                  return moxios.requests.mostRecent().respondWith(JsonApiResponses.Order.all.success).then(function () {
                    return _this114.target = window.onSuccess.calls.mostRecent().args[0];
                  });
                });
              });
              return this.promise3 = this.promise2.then(function () {
                _this114.resource.orders().push(_this114.target);

                return _this114.resource;
              });
            });
            describe('in general', function () {
              it('makes a request to the target\'s relationship URL', function () {
                return this.promise3.then(function () {
                  return expect(moxios.requests.mostRecent().url).toEqual('https://example.com/api/v1/products/1/relationships/orders/');
                });
              });
              it('makes a POST request', function () {
                return this.promise3.then(function () {
                  return expect(moxios.requests.mostRecent().method).toEqual('post');
                });
              });
              return it('sends a resource identifier document', function () {
                var resourceDocument;
                resourceDocument = JSON.stringify({
                  data: [{
                    type: 'orders',
                    id: '1'
                  }, {
                    type: 'orders',
                    id: '2'
                  }]
                });
                return this.promise3.then(function () {
                  return expect(moxios.requests.mostRecent().data).toEqual(resourceDocument);
                });
              });
            });
            describe('when pushing succeeds', function () {
              beforeEach(function () {
                return this.promise4 = this.promise3.then(function () {
                  return moxios.requests.mostRecent().respondWith(JsonApiResponses.relationships.update.success);
                });
              });
              it('assigns the inverse target(s) of the resource(s)', function () {
                var _this115 = this;

                return this.promise4.then(function () {
                  return _this115.target.each(function (t) {
                    return expect(t.product()).toBe(_this115.resource);
                  });
                });
              });
              it('assigns the resource(s) foreign key(s)', function () {
                var _this116 = this;

                return this.promise4.then(function () {
                  return _this116.target.each(function (t) {
                    return expect(t.productId).toEqual(_this116.resource.id);
                  });
                });
              });
              return it('adds the resource(s) to the target', function () {
                var _this117 = this;

                return this.promise4.then(function () {
                  return _this117.target.each(function (t) {
                    return expect(_this117.resource.orders().all({
                      cached: true
                    }).toArray()).toContain(t);
                  });
                });
              });
            });
            return describe('when pushing fails', function () {
              beforeEach(function () {
                return this.promise4 = this.promise3.then(function () {
                  return moxios.requests.mostRecent().respondWith(JsonApiResponses.relationships.update.failure);
                });
              });
              it('does not assign the inverse target(s) of the resource(s)', function () {
                var _this118 = this;

                return this.promise4.catch(function () {
                  return _this118.target.each(function (t) {
                    return expect(t.product()).not.toBe(_this118.resource);
                  });
                });
              });
              it('does not assign the resource(s) foreign key(s)', function () {
                var _this119 = this;

                return this.promise4.catch(function () {
                  return _this119.target.each(function (t) {
                    return expect(t.productId).not.toEqual(_this119.resource.id);
                  });
                });
              });
              return it('does not add the resource(s) to the target', function () {
                var _this120 = this;

                return this.promise4.catch(function () {
                  return _this120.target.each(function (t) {
                    return expect(_this120.resource.orders().all({
                      cached: true
                    }).toArray()).not.toContain(t);
                  });
                });
              });
            });
          });
          describe('deleting', function () {
            beforeEach(function () {
              var _this121 = this;

              MyLibrary.Product.includes('orders').find(1).then(window.onSuccess);
              return this.promise = moxios.wait(function () {
                return moxios.requests.mostRecent().respondWith(JsonApiResponses.Product.find.includes).then(function () {
                  _this121.resource = window.onSuccess.calls.mostRecent().args[0];
                  return _this121.target = _this121.resource.orders().all({
                    cached: true
                  });
                });
              });
            });
            describe('in general', function () {
              beforeEach(function () {
                var _this122 = this;

                return this.promise2 = this.promise.then(function () {
                  _this122.resource.orders().delete(_this122.target.first());

                  return _this122.resource;
                });
              });
              it('makes a request to the target\'s relationship URL', function () {
                return this.promise2.then(function () {
                  return expect(moxios.requests.mostRecent().url).toEqual('https://example.com/api/v1/products/1/relationships/orders/');
                });
              });
              it('makes a DELETE request', function () {
                return this.promise2.then(function () {
                  return expect(moxios.requests.mostRecent().method).toEqual('delete');
                });
              });
              return it('sends a resource identifier document', function () {
                var resourceDocument;
                resourceDocument = JSON.stringify({
                  data: [{
                    type: 'orders',
                    id: '1'
                  }]
                });
                return this.promise2.then(function () {
                  return expect(moxios.requests.mostRecent().data).toEqual(resourceDocument);
                });
              });
            });
            describe('when deleting succeeds', function () {
              beforeEach(function () {
                var _this123 = this;

                return this.promise2 = this.promise.then(function () {
                  _this123.resource.orders().delete(_this123.target.first());

                  return moxios.wait(function () {
                    return moxios.requests.mostRecent().respondWith(JsonApiResponses.relationships.update.success);
                  });
                });
              });
              it('removes the inverse target(s) of the resource(s)', function () {
                var _this124 = this;

                return this.promise2.then(function () {
                  return expect(_this124.target.first().product()).toBeNull();
                });
              });
              it('removes the resource(s) foreign key(s)', function () {
                var _this125 = this;

                return this.promise2.then(function () {
                  return expect(_this125.target.first().productId).toBeNull();
                });
              });
              return it('removes the resource(s) from the target', function () {
                var _this126 = this;

                return this.promise2.then(function () {
                  return expect(_this126.resource.orders().all({
                    cached: true
                  }).toArray()).not.toContain(_this126.target.first());
                });
              });
            });
            describe('when deleting fails', function () {
              beforeEach(function () {
                var _this127 = this;

                return this.promise2 = this.promise.then(function () {
                  _this127.resource.orders().delete(_this127.target.first());

                  return moxios.wait(function () {
                    return moxios.requests.mostRecent().respondWith(JsonApiResponses.relationships.update.failure);
                  });
                });
              });
              it('does not remove the inverse target(s) of the resource(s)', function () {
                var _this128 = this;

                return this.promise2.catch(function () {
                  return expect(_this128.target.first().product()).toBe(_this128.resource);
                });
              });
              it('does not remove the resource(s) foreign key(s)', function () {
                var _this129 = this;

                return this.promise2.catch(function () {
                  return expect(_this129.target.first().productId).toEqual(_this129.resource.id);
                });
              });
              return it('does not remove the resource(s) from the target', function () {
                var _this130 = this;

                return this.promise2.catch(function () {
                  return expect(_this130.resource.orders().all({
                    cached: true
                  }).toArray()).toContain(_this130.target.first());
                });
              });
            });
            return describe('#deleteAll()', function () {
              beforeEach(function () {
                var _this131 = this;

                return this.promise2 = this.promise.then(function () {
                  _this131.resource.orders().deleteAll();

                  return moxios.wait(function () {
                    return moxios.requests.mostRecent().respondWith(JsonApiResponses.relationships.update.success);
                  });
                });
              });
              it('sends a resource identifier document with all resources', function () {
                var resourceDocument;
                resourceDocument = JSON.stringify({
                  data: [{
                    type: 'orders',
                    id: '1'
                  }, {
                    type: 'orders',
                    id: '2'
                  }]
                });
                return this.promise2.then(function () {
                  return expect(moxios.requests.mostRecent().data).toEqual(resourceDocument);
                });
              });
              return it('deletes all resources from the target', function () {
                var _this132 = this;

                return this.promise2.then(function () {
                  return expect(_this132.resource.orders().all({
                    cached: true
                  }).size()).toEqual(0);
                });
              });
            });
          });
          return describe('#empty()', function () {
            describe('when target is empty', function () {
              beforeEach(function () {
                var _this133 = this;

                MyLibrary.Product.find(1).then(window.onSuccess);
                return this.promise = moxios.wait(function () {
                  return moxios.requests.mostRecent().respondWith(JsonApiResponses.Product.find.success).then(function () {
                    return _this133.resource = window.onSuccess.calls.mostRecent().args[0];
                  });
                });
              });
              return it('returns true', function () {
                var _this134 = this;

                return this.promise.then(function () {
                  return expect(_this134.resource.orders().empty()).toBeTruthy();
                });
              });
            });
            return describe('when target is not empty', function () {
              beforeEach(function () {
                var _this135 = this;

                MyLibrary.Product.includes('orders').find(1).then(window.onSuccess);
                return this.promise = moxios.wait(function () {
                  return moxios.requests.mostRecent().respondWith(JsonApiResponses.Product.find.includes).then(function () {
                    return _this135.resource = window.onSuccess.calls.mostRecent().args[0];
                  });
                });
              });
              return it('returns false', function () {
                var _this136 = this;

                return this.promise.then(function () {
                  return expect(_this136.resource.orders().empty()).toBeFalsy();
                });
              });
            });
          });
        });
      });
    });
  }).call(undefined);
  (function () {
    describe('ActiveResource', function () {
      beforeEach(function () {
        moxios.install(MyLibrary.interface.axios);
        window.onSuccess = jasmine.createSpy('onSuccess');
        window.onFailure = jasmine.createSpy('onFailure');
        return window.onCompletion = jasmine.createSpy('onCompletion');
      });
      afterEach(function () {
        return moxios.uninstall();
      });
      return describe('::Associations', function () {
        return describe('::HasOneAssociation', function () {
          describe('reading', function () {
            beforeEach(function () {
              var _this137 = this;

              MyLibrary.GiftCard.includes('order').find(1).then(window.onSuccess);
              return this.promise = moxios.wait(function () {
                return moxios.requests.mostRecent().respondWith(JsonApiResponses.GiftCard.find.raw).then(function () {
                  return _this137.resource = window.onSuccess.calls.mostRecent().args[0];
                });
              });
            });
            it('returns the target', function () {
              var _this138 = this;

              return this.promise.then(function () {
                var base;
                return expect(typeof (base = _this138.resource.order()).isA === "function" ? base.isA(MyLibrary.Order) : void 0).toBeTruthy();
              });
            });
            it('appends / to relationship links', function () {
              var _this139 = this;

              return this.promise.then(function () {
                return expect(_this139.resource.association('order').links()['related']).toEqual('https://example.com/api/v1/gift_cards/1/order/');
              });
            });
            return it('appends / to relationship links', function () {
              return expect(this.resource.association('order').links()['related']).toEqual('https://example.com/api/v1/gift_cards/1/order/');
            });
          });
          describe('loading', function () {
            beforeEach(function () {
              var _this140 = this;

              MyLibrary.GiftCard.find(1).then(window.onSuccess);
              this.promise = moxios.wait(function () {
                return moxios.requests.mostRecent().respondWith(JsonApiResponses.GiftCard.find.success).then(function () {
                  return _this140.resource = window.onSuccess.calls.mostRecent().args[0];
                });
              });
              return this.promise2 = this.promise.then(function () {
                _this140.resource.loadOrder().then(window.onSuccess);

                return moxios.wait(function () {
                  return moxios.requests.mostRecent().respondWith(JsonApiResponses.Order.find.success);
                });
              });
            });
            it('queries the relationship URL', function () {
              return this.promise2.then(function () {
                return expect(moxios.requests.mostRecent().url).toEqual('https://example.com/api/v1/gift_cards/1/order/');
              });
            });
            return it('returns the target', function () {
              var _this141 = this;

              return this.promise2.then(function () {
                var base;
                _this141.target = window.onSuccess.calls.mostRecent().args[0];
                return expect(typeof (base = _this141.target).isA === "function" ? base.isA(MyLibrary.Order) : void 0).toBeTruthy();
              });
            });
          });
          describe('assigning', function () {
            beforeEach(function () {
              var _this142 = this;

              MyLibrary.GiftCard.find(1).then(window.onSuccess);
              this.promise = moxios.wait(function () {
                return moxios.requests.mostRecent().respondWith(JsonApiResponses.GiftCard.find.success);
              });
              return this.promise2 = this.promise.then(function () {
                _this142.resource = window.onSuccess.calls.mostRecent().args[0];
                _this142.target = MyLibrary.Order.build();

                _this142.resource.assignOrder(_this142.target);

                return _this142.resource;
              });
            });
            it('assigns the target', function () {
              var _this143 = this;

              return this.promise2.then(function () {
                return expect(_this143.resource.order()).toEqual(_this143.target);
              });
            });
            it('assigns the inverse target', function () {
              var _this144 = this;

              return this.promise2.then(function () {
                return expect(_this144.resource.order().giftCard()).toEqual(_this144.resource);
              });
            });
            it('assigns the inverse\'s foreign key', function () {
              var _this145 = this;

              return this.promise2.then(function () {
                return expect(_this145.resource.order().giftCardId).toEqual(_this145.resource.id);
              });
            });
            describe('when assigning wrong type', function () {
              return it('throws an error', function () {
                var _this146 = this;

                return expect(function () {
                  return _this146.resource.assignOrder(MyLibrary.OrderItem.build());
                }).toThrow();
              });
            });
            describe('when foreignKey defined', function () {
              beforeEach(function () {
                MyLibrary.HasOneClass = function () {
                  var HasOneClass =
                  /*#__PURE__*/
                  function (_MyLibrary$Base18) {
                    _inherits(HasOneClass, _MyLibrary$Base18);

                    function HasOneClass() {
                      _classCallCheck(this, HasOneClass);

                      return _possibleConstructorReturn(this, _getPrototypeOf(HasOneClass).apply(this, arguments));
                    }

                    return HasOneClass;
                  }(MyLibrary.Base);

                  
                  HasOneClass.hasOne('order', {
                    foreignKey: 'hasOneClassToken'
                  });
                  return HasOneClass;
                }.call(this);

                this.resource2 = MyLibrary.HasOneClass.build({
                  id: 2
                });
                this.target2 = MyLibrary.Order.build();
                return this.resource2.assignOrder(this.target2);
              });
              return it('assigns the inverse\'s foreign key', function () {
                return expect(this.resource2.order().hasOneClassToken).toEqual(2);
              });
            });
            describe('when primaryKey defined', function () {
              beforeEach(function () {
                MyLibrary.HasOneClass = function () {
                  var HasOneClass =
                  /*#__PURE__*/
                  function (_MyLibrary$Base19) {
                    _inherits(HasOneClass, _MyLibrary$Base19);

                    function HasOneClass() {
                      _classCallCheck(this, HasOneClass);

                      return _possibleConstructorReturn(this, _getPrototypeOf(HasOneClass).apply(this, arguments));
                    }

                    return HasOneClass;
                  }(MyLibrary.Base);

                  
                  HasOneClass.className = 'HasOneClass';
                  HasOneClass.hasOne('order', {
                    primaryKey: 'token'
                  });
                  return HasOneClass;
                }.call(this);

                this.resource2 = MyLibrary.HasOneClass.build({
                  token: 'abc123'
                });
                this.target2 = MyLibrary.Order.build();
                return this.resource2.assignOrder(this.target2);
              });
              return it('assigns the inverse\'s foreign key', function () {
                return expect(this.resource2.order().hasOneClassId).toEqual('abc123');
              });
            });
            return describe('when target is polymorphic', function () {
              beforeEach(function () {
                MyLibrary.HasOneClass = function () {
                  var HasOneClass =
                  /*#__PURE__*/
                  function (_MyLibrary$Base20) {
                    _inherits(HasOneClass, _MyLibrary$Base20);

                    function HasOneClass() {
                      _classCallCheck(this, HasOneClass);

                      return _possibleConstructorReturn(this, _getPrototypeOf(HasOneClass).apply(this, arguments));
                    }

                    return HasOneClass;
                  }(MyLibrary.Base);

                  
                  HasOneClass.className = 'HasOneClass';
                  HasOneClass.hasOne('belongsToPolymorphicClass', {
                    as: 'hasOneAlias'
                  });
                  return HasOneClass;
                }.call(this);

                MyLibrary.BelongsToPolymorphicClass = function () {
                  var BelongsToPolymorphicClass =
                  /*#__PURE__*/
                  function (_MyLibrary$Base21) {
                    _inherits(BelongsToPolymorphicClass, _MyLibrary$Base21);

                    function BelongsToPolymorphicClass() {
                      _classCallCheck(this, BelongsToPolymorphicClass);

                      return _possibleConstructorReturn(this, _getPrototypeOf(BelongsToPolymorphicClass).apply(this, arguments));
                    }

                    return BelongsToPolymorphicClass;
                  }(MyLibrary.Base);

                  
                  BelongsToPolymorphicClass.className = 'BelongsToPolymorphicClass';
                  BelongsToPolymorphicClass.belongsTo('hasOneAlias', {
                    polymorphic: true
                  });
                  return BelongsToPolymorphicClass;
                }.call(this);

                this.resource2 = MyLibrary.HasOneClass.build({
                  id: 1
                });
                this.target2 = MyLibrary.BelongsToPolymorphicClass.build();
                return this.resource2.assignBelongsToPolymorphicClass(this.target2);
              });
              it('assigns the inverse\'s foreign key', function () {
                return expect(this.resource2.belongsToPolymorphicClass().hasOneAliasId).toEqual(1);
              });
              return it('assigns the inverse\'s foreign type', function () {
                return expect(this.resource2.belongsToPolymorphicClass().hasOneAliasType).toEqual('HasOneClass');
              });
            });
          }); // TODO: Make `foreignType` option work with specs

          describe('updating', function () {
            beforeEach(function () {
              var _this147 = this;

              MyLibrary.GiftCard.includes('order').find(1).then(window.onSuccess);
              return this.promise = moxios.wait(function () {
                return moxios.requests.mostRecent().respondWith(JsonApiResponses.GiftCard.find.includes).then(function () {
                  return _this147.resource = window.onSuccess.calls.mostRecent().args[0];
                });
              });
            });
            describe('in general', function () {
              beforeEach(function () {
                var _this148 = this;

                return this.promise2 = this.promise.then(function () {
                  _this148.target = MyLibrary.Order.build({
                    id: 2
                  });

                  _this148.resource.updateOrder(_this148.target);

                  return _this148.resource;
                });
              });
              it('persists the update to the relationship URL', function () {
                var url;
                url = 'https://example.com/api/v1/gift_cards/1/relationships/order/';
                return this.promise2.then(function () {
                  return expect(moxios.requests.mostRecent().url).toEqual(url);
                });
              });
              return it('makes a PATCH request', function () {
                return this.promise2.then(function () {
                  return expect(moxios.requests.mostRecent().method).toEqual('patch');
                });
              });
            });
            describe('when assigning a resource', function () {
              beforeEach(function () {
                var _this149 = this;

                return this.promise2 = this.promise.then(function () {
                  _this149.target = MyLibrary.Order.build({
                    id: 2
                  });

                  _this149.resource.updateOrder(_this149.target);

                  return _this149.resource;
                });
              });
              it('sends a resource identifier document', function () {
                var resourceDocument;
                resourceDocument = JSON.stringify({
                  data: {
                    type: 'orders',
                    id: '2'
                  }
                });
                return this.promise2.then(function () {
                  return expect(moxios.requests.mostRecent().data).toEqual(resourceDocument);
                });
              });
              describe('when update succeeds', function () {
                beforeEach(function () {
                  return this.promise3 = this.promise2.then(function () {
                    return moxios.requests.mostRecent().respondWith(JsonApiResponses.relationships.update.success);
                  });
                });
                it('assigns the target', function () {
                  var _this150 = this;

                  return this.promise3.then(function () {
                    return expect(_this150.resource.order()).toEqual(_this150.target);
                  });
                });
                it('assigns the inverse target', function () {
                  var _this151 = this;

                  return this.promise3.then(function () {
                    return expect(_this151.resource.order().giftCard()).toEqual(_this151.resource);
                  });
                });
                return it('assigns the inverse\'s foreign key', function () {
                  var _this152 = this;

                  return this.promise3.then(function () {
                    return expect(_this152.resource.order().giftCardId).toEqual(_this152.resource.id);
                  });
                });
              });
              return describe('when update fails', function () {
                beforeEach(function () {
                  return this.promise3 = this.promise2.then(function () {
                    return moxios.requests.mostRecent().respondWith(JsonApiResponses.relationships.update.failure);
                  });
                });
                it('does not assign the target', function () {
                  var _this153 = this;

                  return this.promise3.catch(function () {
                    return expect(_this153.resource.order().id).toEqual('1');
                  });
                });
                it('does not assign the inverse target', function () {
                  var _this154 = this;

                  return this.promise3.catch(function () {
                    return expect(_this154.target.giftCard()).toBeNull();
                  });
                });
                return it('does not assign the inverse\'s foreign key', function () {
                  var _this155 = this;

                  return this.promise3.catch(function () {
                    return expect(_this155.target.giftCardId).toBeUndefined();
                  });
                });
              });
            });
            return describe('when assigning null', function () {
              beforeEach(function () {
                var _this156 = this;

                return this.promise2 = this.promise.then(function () {
                  _this156.oldTarget = _this156.resource.order();

                  _this156.resource.updateOrder(null);

                  return _this156.resource;
                });
              });
              it('sends a blank document', function () {
                return this.promise2.then(function () {
                  return expect(moxios.requests.mostRecent().data).toEqual(JSON.stringify({
                    data: null
                  }));
                });
              });
              return describe('when update succeeds', function () {
                beforeEach(function () {
                  return this.promise3 = this.promise2.then(function () {
                    return moxios.requests.mostRecent().respondWith(JsonApiResponses.relationships.update.success);
                  });
                });
                it('assigns null', function () {
                  var _this157 = this;

                  return this.promise3.then(function () {
                    return expect(_this157.resource.order()).toBeNull();
                  });
                }); // TODO: Add inverse unassignment (Rails does this automagically since it reloads association
                // targets using nullified foreign keys, resulting in null inverse for old target)
                //it 'unassigns the inverse of the old target', ->
                //expect(@oldTarget.giftCard()).toBeNull()

                return it('assigns the inverse\'s foreign key', function () {
                  var _this158 = this;

                  return this.promise3.then(function () {
                    return expect(_this158.oldTarget.giftCardId).toBeNull();
                  });
                });
              });
            });
          });
          describe('building', function () {
            beforeEach(function () {
              var _this159 = this;

              MyLibrary.GiftCard.includes('order').find(1).then(window.onSuccess);
              return this.promise = moxios.wait(function () {
                return moxios.requests.mostRecent().respondWith(JsonApiResponses.GiftCard.find.includes).then(function () {
                  _this159.resource = window.onSuccess.calls.mostRecent().args[0];
                  return _this159.target = _this159.resource.buildOrder({
                    price: 10
                  });
                });
              });
            });
            it('builds a resource of reflection klass type', function () {
              var _this160 = this;

              return this.promise.then(function () {
                return expect(_this160.target.klass()).toBe(MyLibrary.Order);
              });
            });
            it('assigns the attributes to the target', function () {
              var _this161 = this;

              return this.promise.then(function () {
                return expect(_this161.target.price).toEqual(10);
              });
            });
            it('assigns the inverse target', function () {
              var _this162 = this;

              return this.promise.then(function () {
                return expect(_this162.target.giftCard()).toBe(_this162.resource);
              });
            });
            it('adds a foreign key to the built target', function () {
              var _this163 = this;

              return this.promise.then(function () {
                return expect(_this163.target.giftCardId).toEqual(_this163.resource.id);
              });
            });
            return describe('when className is specified', function () {
              beforeEach(function () {
                MyLibrary.MyClass = function () {
                  var MyClass =
                  /*#__PURE__*/
                  function (_MyLibrary$Base22) {
                    _inherits(MyClass, _MyLibrary$Base22);

                    function MyClass() {
                      _classCallCheck(this, MyClass);

                      return _possibleConstructorReturn(this, _getPrototypeOf(MyClass).apply(this, arguments));
                    }

                    return MyClass;
                  }(MyLibrary.Base);

                  
                  MyClass.hasOne('randomClass', {
                    className: 'GiftCard'
                  });
                  return MyClass;
                }.call(this);

                this.resource2 = MyLibrary.MyClass.build();
                return this.target2 = this.resource2.buildRandomClass();
              });
              return it('builds a resource of className type', function () {
                return expect(this.target2.klass()).toBe(MyLibrary.GiftCard);
              });
            });
          });
          return describe('creating', function () {
            beforeEach(function () {
              var _this164 = this;

              MyLibrary.GiftCard.includes('order').find(1).then(window.onSuccess);
              return this.promise = moxios.wait(function () {
                return moxios.requests.mostRecent().respondWith(JsonApiResponses.GiftCard.find.includes).then(function () {
                  return _this164.resource = window.onSuccess.calls.mostRecent().args[0];
                });
              });
            });
            describe('in general', function () {
              beforeEach(function () {
                var _this165 = this;

                return this.promise2 = this.promise.then(function () {
                  _this165.resource.createOrder({
                    price: 3,
                    verificationCode: 'asd'
                  }).then(window.onSuccess);

                  return moxios.wait(function () {
                    return moxios.requests.mostRecent().respondWith(JsonApiResponses.Order.save.success).then(function () {
                      return _this165.target = window.onSuccess.calls.mostRecent().args[0];
                    });
                  });
                });
              });
              it('makes a request to the target\'s root URL', function () {
                return this.promise2.then(function () {
                  return expect(moxios.requests.mostRecent().url).toEqual('https://example.com/api/v1/orders/');
                });
              });
              it('makes a POST request', function () {
                return this.promise2.then(function () {
                  return expect(moxios.requests.mostRecent().method).toEqual('post');
                });
              });
              it('sends a resource document', function () {
                var resourceDocument;
                resourceDocument = JSON.stringify({
                  data: {
                    type: 'orders',
                    attributes: {
                      price: 3,
                      verification_code: 'asd',
                      gift_card_id: '1'
                    },
                    relationships: {
                      gift_card: {
                        data: {
                          type: 'gift_cards',
                          id: '1'
                        }
                      }
                    }
                  }
                });
                return this.promise2.then(function () {
                  return expect(moxios.requests.mostRecent().data).toEqual(resourceDocument);
                });
              });
              it('builds a resource of reflection klass type', function () {
                var _this166 = this;

                return this.promise2.then(function () {
                  return expect(_this166.target.klass()).toBe(MyLibrary.Order);
                });
              });
              it('assigns the attributes to the target', function () {
                var _this167 = this;

                return this.promise2.then(function () {
                  return expect(_this167.target.price).toEqual(3);
                });
              });
              it('assigns the inverse target', function () {
                var _this168 = this;

                return this.promise2.then(function () {
                  return expect(_this168.target.giftCard()).toBe(_this168.resource);
                });
              });
              return it('adds a foreign key to the built target', function () {
                var _this169 = this;

                return this.promise2.then(function () {
                  return expect(_this169.target.giftCardId).toEqual(_this169.resource.id);
                });
              });
            });
            describe('when creation succeeds', function () {
              beforeEach(function () {
                var _this170 = this;

                return this.promise2 = this.promise.then(function () {
                  _this170.resource.createOrder({
                    price: 10,
                    verificationCode: 'asd'
                  }).then(window.onSuccess);

                  return moxios.wait(function () {
                    return moxios.requests.mostRecent().respondWith(JsonApiResponses.Order.save.success).then(function () {
                      return _this170.target = window.onSuccess.calls.mostRecent().args[0];
                    });
                  });
                });
              });
              return it('persists the target', function () {
                var _this171 = this;

                return this.promise2.then(function () {
                  var base;
                  return expect(typeof (base = _this171.target).persisted === "function" ? base.persisted() : void 0).toBeTruthy();
                });
              });
            });
            return describe('when creation fails', function () {
              beforeEach(function () {
                var _this172 = this;

                return this.promise2 = this.promise.then(function () {
                  _this172.resource.createOrder({
                    price: 10
                  }).catch(window.onFailure);

                  return moxios.wait(function () {
                    return moxios.requests.mostRecent().respondWith(JsonApiResponses.Order.save.failure).catch(function () {
                      return Promise.reject(_this172.target = window.onFailure.calls.mostRecent().args[0]);
                    });
                  });
                });
              });
              it('does not persist the target', function () {
                var _this173 = this;

                return this.promise2.catch(function () {
                  var base;
                  return expect(typeof (base = _this173.target).persisted === "function" ? base.persisted() : void 0).toBeFalsy();
                });
              });
              return it('adds errors to the target', function () {
                var _this174 = this;

                return this.promise2.catch(function () {
                  return expect(_this174.target.errors().empty()).toBeFalsy();
                });
              });
            });
          });
        });
      });
    });
  }).call(undefined);
  (function () {
    describe('ActiveResource', function () {
      beforeEach(function () {
        var _this175 = this;

        moxios.install(MyLibrary.interface.axios);
        window.onSuccess = jasmine.createSpy('onSuccess');
        window.onFailure = jasmine.createSpy('onFailure');
        window.onCompletion = jasmine.createSpy('onCompletion');
        MyLibrary.Product.last().then(window.onSuccess);
        return this.promise = moxios.wait(function () {
          return moxios.requests.mostRecent().respondWith(JsonApiResponses.Product.all.success).then(function () {
            return _this175.resource = window.onSuccess.calls.mostRecent().args[0];
          });
        });
      });
      afterEach(function () {
        return moxios.uninstall();
      });
      return describe('::Attributes', function () {
        describe('.attributes()', function () {
          beforeAll(function () {
            return MyLibrary.Product.attributes('var1', 'var2', {
              readOnly: true
            });
          });
          it('returns result.readWrite as Collection with read-write attributes', function () {
            return expect(MyLibrary.Product.attributes().readWrite.toArray()).toEqual(['title']);
          });
          it('returns result.read as Collection with readOnly attributes', function () {
            return expect(MyLibrary.Product.attributes().read.toArray()).toEqual(['var1', 'var2']);
          });
          return it('returns result.all as Collection with all attributes', function () {
            return expect(MyLibrary.Product.attributes().all.toArray()).toEqual(['title', 'var1', 'var2']);
          });
        });
        describe('#hasAttribute()', function () {
          describe('if resource has attribute', function () {
            beforeEach(function () {
              var _this176 = this;

              return this.promise2 = this.promise.then(function () {
                return _this176.resource.myAttribute = 'value';
              });
            });
            return it('returns true', function () {
              var _this177 = this;

              return this.promise2.then(function () {
                return expect(_this177.resource.hasAttribute('myAttribute')).toBeTruthy();
              });
            });
          });
          return describe('if resource does not have attribute', function () {
            return it('returns false', function () {
              var _this178 = this;

              return this.promise.then(function () {
                return expect(_this178.resource.__readAttribute('myAttribute')).toBeFalsy();
              });
            });
          });
        });
        describe('#__readAttribute()', function () {
          describe('if resource has attribute', function () {
            beforeEach(function () {
              var _this179 = this;

              return this.promise2 = this.promise.then(function () {
                return _this179.resource.myAttribute = 'value';
              });
            });
            return it('returns the attribute', function () {
              var _this180 = this;

              return this.promise2.then(function () {
                return expect(_this180.resource.__readAttribute('myAttribute')).toEqual('value');
              });
            });
          });
          return describe('if resource does not have attribute', function () {
            return it('returns the attribute', function () {
              var _this181 = this;

              return this.promise.then(function () {
                return expect(_this181.resource.__readAttribute('myAttribute')).toBeUndefined();
              });
            });
          });
        });
        describe('#assignAttributes()', function () {
          it('assigns attributes', function () {
            var _this182 = this;

            return this.promise.then(function () {
              _this182.resource.assignAttributes({
                anAttribute: 'value'
              });

              return expect(_this182.resource.hasAttribute('anAttribute')).toBeTruthy();
            });
          });
          return it('assigns object attributes', function () {
            var _this183 = this;

            return this.promise.then(function () {
              _this183.resource.assignAttributes({
                anAttribute: {
                  stuff: 1234
                }
              });

              return expect(_this183.resource.anAttribute).toEqual({
                stuff: 1234
              });
            });
          });
        });
        describe('#attributes()', function () {
          describe('if attribute is a property', function () {
            beforeEach(function () {
              var _this184 = this;

              return this.promise2 = this.promise.then(function () {
                return _this184.resource.myAttribute = 1;
              });
            });
            return it('returns the attribute', function () {
              var _this185 = this;

              return this.promise2.then(function () {
                return expect(_this185.resource.attributes()['myAttribute']).toBeDefined();
              });
            });
          });
          describe('if attribute is a reserved word', function () {
            beforeEach(function () {
              var _this186 = this;

              return this.promise2 = this.promise.then(function () {
                return _this186.resource.__links = {};
              });
            });
            return it('does not return the attribute', function () {
              var _this187 = this;

              return this.promise2.then(function () {
                return expect(_this187.resource.attributes()['__links']).toBeUndefined();
              });
            });
          });
          describe('if attribute is a function', function () {
            beforeEach(function () {
              var _this188 = this;

              return this.promise2 = this.promise.then(function () {
                return _this188.resource.myMethod = function () {};
              });
            });
            return it('does not return the attribute', function () {
              var _this189 = this;

              return this.promise2.then(function () {
                return expect(_this189.resource.attributes()['myMethod']).toBeUndefined();
              });
            });
          });
          return describe('strictAttributes mode', function () {
            beforeEach(function () {
              var _this190 = this;

              MyLibrary.strictAttributes = true;
              return this.promise2 = this.promise.then(function () {
                return _this190.resource.assignAttributes({
                  title: 'New title',
                  anotherAttribute: 'string',
                  var1: 'val1',
                  var2: 'val2'
                });
              });
            });
            afterEach(function () {
              return MyLibrary.strictAttributes = false;
            });
            it('returns only attributes defined in klass.attributes', function () {
              var _this191 = this;

              return this.promise2.then(function () {
                return expect(_this191.resource.attributes()).toEqual({
                  title: 'New title',
                  var1: 'val1',
                  var2: 'val2'
                });
              });
            });
            describe('readOnly arg', function () {
              return it('returns readOnly args', function () {
                var _this192 = this;

                return this.promise2.then(function () {
                  return expect(_.keys(_this192.resource.attributes({
                    readOnly: true
                  }))).toEqual(['var1', 'var2']);
                });
              });
            });
            return describe('readWrite arg', function () {
              return it('returns readWrite args', function () {
                var _this193 = this;

                return this.promise2.then(function () {
                  return expect(_.keys(_this193.resource.attributes({
                    readWrite: true
                  }))).toEqual(['title']);
                });
              });
            });
          });
        });
        return describe('#reload()', function () {
          describe('when resource is persisted', function () {
            it('makes a call to GET the resource', function () {
              var _this194 = this;

              return this.promise.then(function () {
                _this194.resource.reload();

                return moxios.wait(function () {
                  return expect(moxios.requests.mostRecent().url).toEqual(_this194.resource.links()['self']);
                });
              });
            });
            return it('reloads the resource\'s attributes', function () {
              var _this195 = this;

              return this.promise.then(function () {
                var oldTitle;
                oldTitle = _this195.resource.title;

                _this195.resource.reload();

                return moxios.wait(function () {
                  return moxios.requests.mostRecent().respondWith(JsonApiResponses.Product.save.success).then(function () {
                    return expect(_this195.resource.title).not.toEqual(oldTitle);
                  });
                });
              });
            });
          });
          describe('when resource has ID', function () {
            beforeEach(function () {
              return this.resource2 = MyLibrary.Product.build({
                id: 1
              });
            });
            return it('makes a call to GET the resource', function () {
              var _this196 = this;

              this.resource2.reload();
              return moxios.wait(function () {
                return expect(moxios.requests.mostRecent().url).toEqual(_this196.resource2.links()['related'] + '1/');
              });
            });
          });
          return describe('when resource is not persisted nor has ID', function () {
            beforeEach(function () {
              return this.resource2 = MyLibrary.Product.build();
            });
            return it('throws an error', function () {
              return expect(function () {
                return this.resource2.reload();
              }).toThrow();
            });
          });
        });
      });
    });
  }).call(undefined);
  (function () {
    describe('ActiveResource', function () {
      beforeEach(function () {
        moxios.install(MyLibrary.interface.axios);
        window.onSuccess = jasmine.createSpy('onSuccess');
        window.onFailure = jasmine.createSpy('onFailure');
        return window.onCompletion = jasmine.createSpy('onCompletion');
      });
      afterEach(function () {
        return moxios.uninstall();
      });
      return describe('::Base', function () {
        describe('.links()', function () {
          return it('returns the correct links', function () {
            return expect(MyLibrary.Product.links()).toEqual({
              related: 'https://example.com/api/v1/products/'
            });
          });
        });
        describe('with a different primaryKey', function () {
          beforeEach(function () {
            MyLibrary.Venue = function () {
              var Venue =
              /*#__PURE__*/
              function (_MyLibrary$Base23) {
                _inherits(Venue, _MyLibrary$Base23);

                function Venue() {
                  _classCallCheck(this, Venue);

                  return _possibleConstructorReturn(this, _getPrototypeOf(Venue).apply(this, arguments));
                }

                return Venue;
              }(MyLibrary.Base);

              
              Venue.className = 'Venue';
              Venue.queryName = 'venues';
              Venue.primaryKey = 'token';
              Venue.hasOne('owner');
              return Venue;
            }.call(this);

            return MyLibrary.Owner = function () {
              var Owner =
              /*#__PURE__*/
              function (_MyLibrary$Base24) {
                _inherits(Owner, _MyLibrary$Base24);

                function Owner() {
                  _classCallCheck(this, Owner);

                  return _possibleConstructorReturn(this, _getPrototypeOf(Owner).apply(this, arguments));
                }

                return Owner;
              }(MyLibrary.Base);

              
              Owner.className = 'Owner';
              Owner.queryName = 'owners';
              Owner.belongsTo('venue');
              return Owner;
            }.call(this);
          });
          it('constructs relationships with the primaryKey', function () {
            this.resource = MyLibrary.Venue.build({
              token: 'abc123'
            });
            return expect(this.resource.buildOwner().venueId).toEqual('abc123');
          });
          return describe('when interfacing', function () {
            beforeEach(function () {
              var _this197 = this;

              MyLibrary.Venue.find(1).then(window.onSuccess);
              return this.promise = moxios.wait(function () {
                return moxios.requests.mostRecent().respondWith(JsonApiResponses.Venue.find.tokenized).then(function () {
                  return _this197.resource = window.onSuccess.calls.mostRecent().args[0];
                });
              });
            });
            it('builds the primaryKey into the resource retrieved', function () {
              var _this198 = this;

              return this.promise.then(function () {
                return expect(_this198.resource.token).toEqual('abc123');
              });
            });
            return it('is rendered in a resource document with the primaryKey', function () {
              var _this199 = this;

              var resourceDocument;
              resourceDocument = JSON.stringify({
                data: {
                  type: 'venues',
                  token: 'abc123',
                  attributes: {},
                  relationships: {}
                }
              });
              return this.promise.then(function () {
                _this199.resource.save();

                return moxios.wait(function () {
                  return expect(moxios.requests.mostRecent().data).toEqual(resourceDocument);
                });
              });
            });
          });
        });
        return describe('.clone()', function () {
          beforeEach(function () {
            var _this200 = this;

            MyLibrary.Order.includes('giftCard', 'orderItems').select('price').find(1).then(window.onSuccess);
            return this.promise = moxios.wait(function () {
              return moxios.requests.mostRecent().respondWith(JsonApiResponses.Order.find.includes).then(function () {
                _this200.resource = window.onSuccess.calls.mostRecent().args[0];

                _this200.resource.assignAttributes({
                  paymentSource: MyLibrary.PaymentMethod.build()
                });

                _this200.resource.errors().add('attribute', 'invalid');

                return _this200.clone = _this200.resource.clone();
              });
            });
          });
          it('returns a new resource', function () {
            var _this201 = this;

            return this.promise.then(function () {
              return expect(_this201.clone).not.toBe(_this201.resource);
            });
          });
          it('returns a klass of the same type as this', function () {
            var _this202 = this;

            return this.promise.then(function () {
              return expect(_this202.clone.klass()).toBe(_this202.resource.klass());
            });
          });
          it('clones attributes', function () {
            var _this203 = this;

            return this.promise.then(function () {
              return expect(_.omit(_this203.clone.attributes(), 'productId', 'customerId')).toEqual(_this203.resource.attributes());
            });
          });
          it('clones links', function () {
            var _this204 = this;

            return this.promise.then(function () {
              return expect(_this204.clone.links()).toEqual(_this204.resource.links());
            });
          });
          it('clones errors', function () {
            var _this205 = this;

            return this.promise.then(function () {
              return expect(_this205.clone.errors().size()).toEqual(1);
            });
          });
          it('clones queryParams', function () {
            var _this206 = this;

            return this.promise.then(function () {
              return expect(_this206.clone.queryParams()).toEqual({
                fields: {
                  orders: ['price']
                },
                include: ['giftCard', 'orderItems']
              });
            });
          });
          it('sets relationships to clone', function () {
            var _this207 = this;

            return this.promise.then(function () {
              return _this207.clone.klass().reflectOnAllAssociations().each(function (reflection) {
                var name;
                name = reflection.name;
                return expect(_this207.clone.association(name).target).toEqual(_this207.resource.association(name).target);
              });
            });
          });
          it('sets loaded relationships to loaded', function () {
            var _this208 = this;

            return this.promise.then(function () {
              return _this208.clone.klass().reflectOnAllAssociations().each(function (reflection) {
                var name;
                name = reflection.name;
                return expect(_this208.clone.association(name).loaded()).toEqual(_this208.resource.association(name).loaded());
              });
            });
          });
          it('clones relationship resources attributes', function () {
            var _this209 = this;

            return this.promise.then(function () {
              return _this209.clone.klass().reflectOnAllAssociations().each(function (reflection) {
                var i, name;
                name = reflection.name;

                if (reflection.collection()) {
                  i = 0;
                  return _this209.clone.association(name).target.each(function (t) {
                    expect(t.attributes()).toEqual(_this209.resource.association(name).target.get(i).attributes());
                    return i += 1;
                  });
                } else if (_this209.resource.association(name).target != null) {
                  return expect(_this209.clone.association(name).target.attributes()).toEqual(_this209.resource.association(name).target.attributes());
                }
              });
            });
          });
          return it('clones relationship links', function () {
            var _this210 = this;

            return this.promise.then(function () {
              return _this210.clone.klass().reflectOnAllAssociations().each(function (reflection) {
                var name;
                name = reflection.name;
                return expect(_this210.clone.association(name).links()).toEqual(_this210.resource.association(name).links());
              });
            });
          });
        });
      });
    });
  }).call(undefined);
  (function () {
    describe('ActiveResource', function () {
      beforeEach(function () {
        moxios.install(MyLibrary.interface.axios);
        window.onSuccess = jasmine.createSpy('onSuccess');
        window.onFailure = jasmine.createSpy('onFailure');
        return window.onCompletion = jasmine.createSpy('onCompletion');
      });
      afterEach(function () {
        return moxios.uninstall();
      });
      return describe('::Callbacks', function () {
        describe('#afterBuild()', function () {
          beforeEach(function () {
            MyLibrary.Order.afterBuild(function () {
              return this.orderItems().build([{}, {}, {}]);
            });
            return this.resource = MyLibrary.Order.build();
          });
          afterEach(function () {
            return MyLibrary.Order.__callbacks['afterBuild'].clear();
          });
          return it('calls after making a request', function () {
            return expect(this.resource.orderItems().size()).toEqual(3);
          });
        });
        describe('#afterCreate()', function () {
          beforeEach(function () {
            var _this211 = this;

            MyLibrary.Order.afterCreate(function () {
              return this.calls = this.calls && this.calls + 1 || 1;
            });
            MyLibrary.Order.create().then(window.onSuccess);
            return this.promise = moxios.wait(function () {
              return moxios.requests.mostRecent().respondWith(JsonApiResponses.Order.find.success).then(function () {
                return _this211.resource = window.onSuccess.calls.mostRecent().args[0];
              });
            });
          });
          afterEach(function () {
            return MyLibrary.Order.__callbacks['afterCreate'].clear();
          });
          it('calls after creating a resource', function () {
            return expect(this.resource.calls).toEqual(1);
          });
          return describe('when saving', function () {
            beforeEach(function () {
              var _this212 = this;

              return this.promise2 = this.promise.then(function () {
                _this212.resource.save();

                return moxios.wait(function () {
                  return moxios.requests.mostRecent().respondWith(JsonApiResponses.Order.save.success);
                });
              });
            });
            return it('does not call after saving a resource', function () {
              return expect(this.resource.calls).toEqual(1);
            });
          });
        });
        return describe('#afterRequest()', function () {
          beforeEach(function () {
            var _this213 = this;

            MyLibrary.Order.afterRequest(function () {
              return this.price = this.price + 1.0;
            });
            MyLibrary.Order.last().then(window.onSuccess);
            return this.promise = moxios.wait(function () {
              return moxios.requests.mostRecent().respondWith(JsonApiResponses.Order.all.success).then(function () {
                return _this213.resource = window.onSuccess.calls.mostRecent().args[0];
              });
            });
          });
          afterEach(function () {
            return MyLibrary.Order.__callbacks['afterRequest'].clear();
          });
          return it('calls after making a request', function () {
            return expect(this.resource.price).toEqual(3.0);
          });
        });
      });
    });
  }).call(undefined);
  (function () {
    describe('ActiveResource', function () {
      return describe('::Collection', function () {
        beforeEach(function () {
          this.array = [1, 2, 3];
          return this.collection = ActiveResource.prototype.Collection.build(this.array);
        });
        describe('.build()', function () {
          it('builds an array into a collection', function () {
            return expect(ActiveResource.prototype.Collection.build(this.array).toArray()).toEqual(this.array);
          });
          return it('builds a collection into a collection', function () {
            return expect(ActiveResource.prototype.Collection.build(this.collection).toArray()).toEqual(this.collection.toArray());
          });
        });
        describe('#size()', function () {
          return it('returns an accurate size', function () {
            return expect(this.collection.size()).toEqual(3);
          });
        });
        describe('#empty()', function () {
          describe('when collection is empty', function () {
            beforeEach(function () {
              return this.collection = ActiveResource.prototype.Collection.build();
            });
            return it('returns true', function () {
              return expect(this.collection.empty()).toBeTruthy();
            });
          });
          return describe('when collection is not empty', function () {
            return it('returns false', function () {
              return expect(this.collection.empty()).toBeFalsy();
            });
          });
        });
        describe('#include', function () {
          describe('if the item is in the collection', function () {
            beforeEach(function () {
              return this.item = 2;
            });
            return it('returns true', function () {
              return expect(this.collection.include(this.item)).toBeTruthy();
            });
          });
          return describe('if the item is not in the collection', function () {
            beforeEach(function () {
              return this.item = 100;
            });
            return it('returns true', function () {
              return expect(this.collection.include(this.item)).toBeFalsy();
            });
          });
        });
        describe('#get()', function () {
          it('returns the item at the index', function () {
            return expect(this.collection.get(1)).toEqual(2);
          });
          return describe('when argument is greater than collection size', function () {
            return it('returns undefined', function () {
              return expect(this.collection.get(100)).toBeUndefined();
            });
          });
        });
        describe('#set()', function () {
          it('sets the item at the index to the argument', function () {
            this.collection.set(1, 4);
            return expect(this.collection.get(1)).toEqual(4);
          });
          return describe('when index is greater than collection size', function () {
            return it('does not set an index', function () {
              this.collection.set(100, 4);
              return expect(this.collection.get(100)).toBeUndefined();
            });
          });
        });
        describe('#toArray()', function () {
          return it('returns the collection as an array', function () {
            return expect(this.collection.toArray()).toEqual(this.array);
          });
        });
        describe('#all()', function () {
          return it('returns the collection as an array', function () {
            return expect(this.collection.all()).toEqual(this.array);
          });
        });
        describe('#first(n)', function () {
          it('returns the first item', function () {
            return expect(this.collection.first()).toEqual(1);
          });
          return describe('when n is specified', function () {
            return it('returns the first n items', function () {
              return expect(this.collection.first(2)).toEqual([1, 2]);
            });
          });
        });
        describe('#last(n)', function () {
          it('returns the last item', function () {
            return expect(this.collection.last()).toEqual(3);
          });
          return describe('when n is specified', function () {
            return it('returns the last n items', function () {
              return expect(this.collection.last(2)).toEqual([2, 3]);
            });
          });
        });
        describe('#each()', function () {
          return it('iterates over each item', function () {
            var counter;
            counter = 0;
            this.collection.each(function (i) {
              return counter += i;
            });
            return expect(counter).toEqual(6);
          });
        });
        describe('#inject()', function () {
          return it('iterates over each item with the object passed in', function () {
            var counter;
            counter = this.collection.inject(0, function (num, i) {
              return num += i;
            });
            return expect(counter).toEqual(6);
          });
        });
        describe('#map()', function () {
          return it('returns a mapped collection', function () {
            return expect(this.collection.map(function (i) {
              return i + 1;
            }).toArray()).toEqual([2, 3, 4]);
          });
        });
        describe('#compact()', function () {
          beforeEach(function () {
            this.array = [1, null, false, 2, void 0, 3];
            return this.collection = ActiveResource.prototype.Collection.build(this.array);
          });
          return it('removes null values', function () {
            return expect(this.collection.compact().toArray()).toEqual([1, false, 2, 3]);
          });
        });
        describe('#flatten()', function () {
          beforeEach(function () {
            this.array = [[1, 2], [3, [4, 5]]];
            return this.collection = ActiveResource.prototype.Collection.build(this.array);
          });
          return it('flattens a nested array', function () {
            return expect(this.collection.flatten().toArray()).toEqual([1, 2, 3, 4, 5]);
          });
        });
        describe('#push()', function () {
          it('pushes an item onto the end of the collection', function () {
            this.collection.push(10);
            return expect(this.collection.toArray()).toEqual([1, 2, 3, 10]);
          });
          return describe('when pushing multiple items', function () {
            return it('pushes all items onto the collection', function () {
              this.collection.push(10, 30);
              return expect(this.collection.toArray()).toEqual([1, 2, 3, 10, 30]);
            });
          });
        });
        describe('#unshift()', function () {
          it('unshifts an item onto the beginning of the collection', function () {
            this.collection.unshift(10);
            return expect(this.collection.toArray()).toEqual([10, 1, 2, 3]);
          });
          return describe('when unshifting multiple items', function () {
            return it('unshifts all items onto the collection', function () {
              this.collection.unshift(10, 30);
              return expect(this.collection.toArray()).toEqual([10, 30, 1, 2, 3]);
            });
          });
        });
        describe('#delete()', function () {
          it('removes the item from the collection', function () {
            this.collection.delete(2);
            return expect(this.collection.toArray()).toEqual([1, 3]);
          });
          it('returns the deleted items', function () {
            return expect(this.collection.delete(2)).toEqual([2]);
          });
          return describe('when deleting multiple items', function () {
            return it('deletes all items from the collection', function () {
              this.collection.delete(1, 2);
              return expect(this.collection.toArray()).toEqual([3]);
            });
          });
        });
        describe('#clear()', function () {
          return it('clears the array', function () {
            this.collection.clear();
            return expect(this.collection.size()).toEqual(0);
          });
        });
        describe('#select()', function () {
          beforeEach(function () {
            return this.predicate = function (i) {
              return i % 2 === 0;
            };
          });
          it('returns a collection of items that passed the predicate', function () {
            return expect(this.collection.select(this.predicate).toArray()).toEqual([2]);
          });
          return describe('when predicate does not match any items', function () {
            beforeEach(function () {
              return this.predicate = function (i) {
                return false;
              };
            });
            return it('returns an empty colletion', function () {
              return expect(this.collection.select(this.predicate).toArray()).toEqual([]);
            });
          });
        });
        return describe('#detect()', function () {
          beforeEach(function () {
            return this.predicate = function (i) {
              return i % 2 === 1;
            };
          });
          it('returns a collection of items that passed the predicate', function () {
            return expect(this.collection.detect(this.predicate)).toEqual(1);
          });
          return describe('when predicate does not match any items', function () {
            beforeEach(function () {
              return this.predicate = function (i) {
                return false;
              };
            });
            return it('returns undefined', function () {
              return expect(this.collection.detect(this.predicate)).toBeUndefined();
            });
          });
        });
      });
    });
  }).call(undefined);
  (function () {
    describe('ActiveResource', function () {
      return describe('::Errors', function () {
        beforeEach(function () {
          this.resource = MyLibrary.Product.build();
          return this.resource.errors().add('title', 'blank', 'Title cannot be blank');
        });
        describe('#clear()', function () {
          return it('clears the errors', function () {
            this.resource.errors().clear();
            return expect(this.resource.errors().size()).toEqual(0);
          });
        });
        describe('#add()', function () {
          return it('adds an error with code and message', function () {
            return expect(this.resource.errors().forField('title').size()).toEqual(1);
          });
        });
        describe('#addAll()', function () {
          beforeEach(function () {
            return this.resource.errors().addAll(['title', 'taken', 'Title is not unique'], ['description', 'blank', 'Description cannot be blank']);
          });
          return it('adds errors', function () {
            return expect(this.resource.errors().size()).toEqual(3);
          });
        });
        describe('#propagate', function () {
          describe('collection', function () {
            beforeEach(function () {
              var errors;
              this.resource.orders().build();
              errors = ActiveResource.Collection.build([{
                field: 'orders.price',
                code: 'code',
                message: 'message'
              }]);
              return this.resource.errors().propagate(errors);
            });
            it('adds error to root resource', function () {
              return expect(this.resource.errors().forField('orders.price').size()).toEqual(1);
            });
            return it('propagates errors to nested resource', function () {
              return expect(this.resource.orders().target().first().errors().forField('price').size()).toEqual(1);
            });
          });
          return describe('singular', function () {
            beforeEach(function () {
              var errors;
              this.resource.buildMerchant();
              errors = ActiveResource.Collection.build([{
                field: 'merchant.name',
                code: 'code',
                message: 'message'
              }]);
              return this.resource.errors().propagate(errors);
            });
            it('adds error to root resource', function () {
              return expect(this.resource.errors().forField('merchant.name').size()).toEqual(1);
            });
            return it('propagates error to nested resource', function () {
              return expect(this.resource.merchant().errors().forField('name').size()).toEqual(1);
            });
          });
        });
        describe('#added()', function () {
          describe('when added', function () {
            return it('returns true', function () {
              return expect(this.resource.errors().added('title', 'blank')).toBeTruthy();
            });
          });
          return describe('when not added', function () {
            return it('returns false', function () {
              return expect(this.resource.errors().added('title', 'taken')).toBeFalsy();
            });
          });
        });
        describe('#include()', function () {
          describe('when included', function () {
            return it('returns true', function () {
              return expect(this.resource.errors().include('title')).toBeTruthy();
            });
          });
          return describe('when not included', function () {
            return it('returns false', function () {
              return expect(this.resource.errors().include('price')).toBeFalsy();
            });
          });
        });
        describe('#empty()', function () {
          describe('when empty', function () {
            beforeEach(function () {
              return this.resource.errors().clear();
            });
            return it('returns true', function () {
              return expect(this.resource.errors().empty()).toBeTruthy();
            });
          });
          return describe('when not empty', function () {
            return it('returns false', function () {
              return expect(this.resource.errors().empty()).toBeFalsy();
            });
          });
        });
        describe('#size()', function () {
          return it('returns the total number of errors', function () {
            return expect(this.resource.errors().size()).toEqual(1);
          });
        });
        describe('#delete()', function () {
          return it('deletes the errors from the field', function () {
            this.resource.errors().delete('title');
            return expect(this.resource.errors().forField('title').empty()).toBeTruthy();
          });
        });
        describe('#each()', function () {
          return it('iterates over each error', function () {
            return this.resource.errors().each(function (field, error) {
              expect(field).toEqual('title');
              expect(error.code).toEqual('blank');
              return expect(error.message).toEqual('Title cannot be blank');
            });
          });
        });
        describe('#forField()', function () {
          beforeEach(function () {
            this.resource.errors().add('customer', 'invalid', 'is invalid');
            return this.resource.errors().add('customer.firstName', 'blank', 'is blank');
          });
          return it('returns all fields that start with arg', function () {
            return expect(this.resource.errors().forField('customer').map(function (e) {
              return e.code;
            }).toArray()).toEqual(['invalid', 'blank']);
          });
        });
        describe('#detailsForField()', function () {
          return it('returns an object mapped to error code and message pairs for the field', function () {
            return expect(this.resource.errors().detailsForField('title')).toEqual({
              blank: 'Title cannot be blank'
            });
          });
        });
        describe('#forBase()', function () {
          beforeEach(function () {
            return this.resource.errors().add('base', 'invalid', 'Product is invalid');
          });
          return it('returns an object mapped to error code and message pairs for the base', function () {
            return expect(this.resource.errors().forBase().map(function (e) {
              return e.detail;
            }).first()).toEqual('Product is invalid');
          });
        });
        describe('#toArray()', function () {
          return it('returns an array of errors for the resource', function () {
            return expect(this.resource.errors().toArray()).toEqual([{
              field: 'title',
              code: 'blank',
              message: 'Title cannot be blank',
              detail: 'Title cannot be blank'
            }]);
          });
        });
        return describe('#toCollection()', function () {
          it('returns a collection', function () {
            return expect(this.resource.errors().toCollection().klass()).toBe(ActiveResource.prototype.Collection);
          });
          return it('returns a collection of errors for the resource', function () {
            return expect(this.resource.errors().toCollection().toArray()).toEqual([{
              field: 'title',
              code: 'blank',
              message: 'Title cannot be blank',
              detail: 'Title cannot be blank'
            }]);
          });
        });
      });
    });
  }).call(undefined);
  (function () {
    describe('ActiveResource', function () {
      beforeEach(function () {
        var _this214 = this;

        moxios.install(MyLibrary.interface.axios);
        window.onSuccess = jasmine.createSpy('onSuccess');
        window.onFailure = jasmine.createSpy('onFailure');
        window.onCompletion = jasmine.createSpy('onCompletion');
        MyLibrary.Order.find('1').then(window.onSuccess);
        return this.promise = moxios.wait(function () {
          return moxios.requests.mostRecent().respondWith(JsonApiResponses.Order.find.success).then(function () {
            return _this214.resource = window.onSuccess.calls.mostRecent().args[0];
          });
        });
      });
      afterEach(function () {
        return moxios.uninstall();
      });
      return describe('::Fields', function () {
        describe('.fields()', function () {
          return it('returns fields', function () {
            var _this215 = this;

            return this.promise.then(function () {
              return expect(_this215.resource.klass().fields().toArray().sort()).toEqual(['price', 'jsonField', 'customer', 'comments', 'giftCard', 'orderItems', 'paymentSource', 'product', 'transactions'].sort());
            });
          });
        });
        return describe('updating changed fields', function () {
          describe('changing attribute', function () {
            describe('value attribute', function () {
              beforeEach(function () {
                var _this216 = this;

                return this.promise2 = this.promise.then(function () {
                  return _this216.resource.price = 1000.0;
                });
              });
              return it('adds attribute to resource document', function () {
                var _this217 = this;

                return this.promise2.then(function () {
                  var resourceDocument;

                  _this217.resource.save();

                  resourceDocument = JSON.stringify({
                    data: {
                      type: 'orders',
                      id: '1',
                      attributes: {
                        price: 1000.0
                      },
                      relationships: {}
                    }
                  });
                  return moxios.wait(function () {
                    return expect(extractData(moxios.requests.mostRecent().data)).toEqual(resourceDocument);
                  });
                });
              });
            });
            return describe('object attribute', function () {
              return it('adds attribute to resource document', function () {
                var _this218 = this;

                return this.promise.then(function () {
                  var resourceDocument;

                  _this218.resource.update({
                    jsonField: {
                      stuffStuff: 1234
                    }
                  });

                  resourceDocument = JSON.stringify({
                    data: {
                      type: 'orders',
                      id: '1',
                      attributes: {
                        json_field: {
                          stuff_stuff: 1234
                        }
                      },
                      relationships: {}
                    }
                  });
                  return moxios.wait(function () {
                    return expect(extractData(moxios.requests.mostRecent().data)).toEqual(resourceDocument);
                  });
                });
              });
            });
          });
          return describe('changing relationship', function () {
            describe('singular', function () {
              beforeEach(function () {
                var _this219 = this;

                return this.promise2 = this.promise.then(function () {
                  return _this219.resource.assignProduct(MyLibrary.Product.build({
                    id: '10'
                  }));
                });
              });
              return it('adds relationship to resource document', function () {
                var _this220 = this;

                return this.promise2.then(function () {
                  var resourceDocument;

                  _this220.resource.save();

                  resourceDocument = JSON.stringify({
                    data: {
                      type: 'orders',
                      id: '1',
                      attributes: {},
                      relationships: {
                        product: {
                          data: {
                            type: 'products',
                            id: '10'
                          }
                        }
                      }
                    }
                  });
                  return moxios.wait(function () {
                    return expect(extractData(moxios.requests.mostRecent().data)).toEqual(resourceDocument);
                  });
                });
              });
            });
            describe('polymorphic', function () {
              beforeEach(function () {
                var _this221 = this;

                return this.promise2 = this.promise.then(function () {
                  return _this221.resource.comments().build();
                });
              });
              it('does not add relationship to resource document', function () {
                var _this222 = this;

                return this.promise2.then(function () {
                  var resourceDocument;

                  _this222.resource.save();

                  resourceDocument = JSON.stringify({
                    data: {
                      type: 'orders',
                      id: '1',
                      attributes: {},
                      relationships: {
                        comments: {
                          data: [{
                            type: 'comments',
                            attributes: {},
                            relationships: {}
                          }]
                        }
                      }
                    }
                  });
                  return moxios.wait(function () {
                    return expect(extractData(moxios.requests.mostRecent().data)).toEqual(resourceDocument);
                  });
                });
              });
              return describe('when includePolymorphicRepeats true', function () {
                beforeEach(function () {
                  var _this223 = this;

                  return this.promise3 = this.promise2.then(function () {
                    return _this223.resource.klass().resourceLibrary.includePolymorphicRepeats = true;
                  });
                });
                afterEach(function () {
                  return this.resource.klass().resourceLibrary.includePolymorphicRepeats = false;
                });
                return it('adds relationship to resource document', function () {
                  var _this224 = this;

                  return this.promise3.then(function () {
                    var resourceDocument;

                    _this224.resource.save();

                    resourceDocument = JSON.stringify({
                      data: {
                        type: 'orders',
                        id: '1',
                        attributes: {},
                        relationships: {
                          comments: {
                            data: [{
                              type: 'comments',
                              attributes: {},
                              relationships: {
                                resource: {
                                  data: {
                                    type: 'orders',
                                    id: '1'
                                  }
                                }
                              }
                            }]
                          }
                        }
                      }
                    });
                    return moxios.wait(function () {
                      return expect(extractData(moxios.requests.mostRecent().data)).toEqual(resourceDocument);
                    });
                  });
                });
              });
            });
            describe('collection', function () {
              beforeEach(function () {
                var _this225 = this;

                return this.promise2 = this.promise.then(function () {
                  _this225.resource.orderItems().build({
                    id: '5'
                  });

                  _this225.resource.orderItems().build({
                    id: '10'
                  });

                  _this225.resource.save();

                  return moxios.wait(function () {
                    return moxios.requests.mostRecent().respondWith(JsonApiResponses.Order.save.includes);
                  });
                });
              });
              it('adds relationship to resource document', function () {
                return this.promise2.then(function () {
                  var resourceDocument;
                  resourceDocument = JSON.stringify({
                    data: {
                      type: 'orders',
                      id: '1',
                      attributes: {},
                      relationships: {
                        order_items: {
                          data: [{
                            type: 'order_items',
                            id: '5'
                          }, {
                            type: 'order_items',
                            id: '10'
                          }]
                        }
                      }
                    }
                  });
                  return expect(extractData(moxios.requests.mostRecent().data)).toEqual(resourceDocument);
                });
              });
              it('assigns inverseOf field on related resources (removing it from changedFields)', function () {
                var _this226 = this;

                return this.promise2.then(function () {
                  return expect(_this226.resource.orderItems().target().first().changedFields().empty()).toBeTruthy();
                });
              });
              return describe('when replacing an item (same length)', function () {
                beforeEach(function () {
                  var _this227 = this;

                  return this.promise2.then(function () {
                    _this227.resource.orderItems().target().delete(_this227.resource.orderItems().target().last());

                    return _this227.resource.orderItems().build({
                      id: '6'
                    });
                  });
                });
                return it('replaces relationship to resource document', function () {
                  var resourceDocument;
                  this.resource.save();
                  resourceDocument = JSON.stringify({
                    data: {
                      type: 'orders',
                      id: '1',
                      attributes: {},
                      relationships: {
                        order_items: {
                          data: [{
                            type: 'order_items',
                            id: '5'
                          }, {
                            type: 'order_items',
                            id: '6'
                          }]
                        }
                      }
                    }
                  });
                  return moxios.wait(function () {
                    return expect(extractData(moxios.requests.mostRecent().data)).toEqual(resourceDocument);
                  });
                });
              });
            });
            return describe('autosave', function () {
              beforeEach(function () {
                var _this228 = this;

                return this.promise2 = this.promise.then(function () {
                  _this228.resource.transactions().build({
                    amount: 5.0
                  });

                  return _this228.resource.transactions().build({
                    amount: 10.0
                  });
                });
              });
              return it('adds relationship to resource document', function () {
                var _this229 = this;

                return this.promise2.then(function () {
                  var resourceDocument;

                  _this229.resource.save();

                  resourceDocument = JSON.stringify({
                    data: {
                      type: 'orders',
                      id: '1',
                      attributes: {},
                      relationships: {
                        transactions: {
                          data: [{
                            type: 'transactions',
                            attributes: {
                              amount: 5.0
                            },
                            relationships: {}
                          }, {
                            type: 'transactions',
                            attributes: {
                              amount: 10.0
                            },
                            relationships: {}
                          }]
                        }
                      }
                    }
                  });
                  return moxios.wait(function () {
                    return expect(extractData(moxios.requests.mostRecent().data)).toEqual(resourceDocument);
                  });
                });
              });
            });
          });
        });
      });
    });
  }).call(undefined);
  (function () {
    describe('ActiveResource', function () {
      beforeEach(function () {
        window.onSuccess = jasmine.createSpy('onSuccess');
        window.onFailure = jasmine.createSpy('onFailure');
        return window.onCompletion = jasmine.createSpy('onCompletion');
      });
      afterEach(function () {
        return moxios.uninstall();
      });
      return describe('::Immutable', function () {
        beforeAll(function () {
          window.ImmutableLibrary = ActiveResource.createResourceLibrary('https://example.com/api/v1', {
            immutable: true
          });
          moxios.install(ImmutableLibrary.interface.axios);

          ImmutableLibrary.Comment = function () {
            var Comment =
            /*#__PURE__*/
            function (_ImmutableLibrary$Bas) {
              _inherits(Comment, _ImmutableLibrary$Bas);

              function Comment() {
                _classCallCheck(this, Comment);

                return _possibleConstructorReturn(this, _getPrototypeOf(Comment).apply(this, arguments));
              }

              return Comment;
            }(ImmutableLibrary.Base);

            
            Comment.className = 'Comment';
            Comment.queryName = 'comments';
            Comment.belongsTo('order');
            return Comment;
          }.call(this);

          ImmutableLibrary.Customer = function () {
            var Customer =
            /*#__PURE__*/
            function (_ImmutableLibrary$Bas2) {
              _inherits(Customer, _ImmutableLibrary$Bas2);

              function Customer() {
                _classCallCheck(this, Customer);

                return _possibleConstructorReturn(this, _getPrototypeOf(Customer).apply(this, arguments));
              }

              return Customer;
            }(ImmutableLibrary.Base);

            
            Customer.className = 'Customer';
            Customer.queryName = 'customers';
            Customer.attributes('name');
            Customer.hasMany('orders', {
              inverseOf: 'customer'
            });
            return Customer;
          }.call(this);

          ImmutableLibrary.GiftCard = function () {
            var GiftCard =
            /*#__PURE__*/
            function (_ImmutableLibrary$Bas3) {
              _inherits(GiftCard, _ImmutableLibrary$Bas3);

              function GiftCard() {
                _classCallCheck(this, GiftCard);

                return _possibleConstructorReturn(this, _getPrototypeOf(GiftCard).apply(this, arguments));
              }

              return GiftCard;
            }(ImmutableLibrary.Base);

            
            GiftCard.className = 'GiftCard';
            GiftCard.queryName = 'gift_cards';
            GiftCard.hasOne('order');
            return GiftCard;
          }.call(this);

          ImmutableLibrary.Order = function () {
            var Order =
            /*#__PURE__*/
            function (_ImmutableLibrary$Bas4) {
              _inherits(Order, _ImmutableLibrary$Bas4);

              function Order() {
                _classCallCheck(this, Order);

                return _possibleConstructorReturn(this, _getPrototypeOf(Order).apply(this, arguments));
              }

              return Order;
            }(ImmutableLibrary.Base);

            
            Order.className = 'Order';
            Order.queryName = 'orders';
            Order.attributes('price', 'tax');
            Order.belongsTo('customer', {
              autosave: true,
              inverseOf: 'orders'
            });
            Order.belongsTo('giftCard');
            Order.hasMany('comments');
            Order.hasMany('orderItems', {
              autosave: true,
              inverseOf: 'order'
            });
            Order.hasOne('rating', {
              autosave: true
            });
            return Order;
          }.call(this);

          ImmutableLibrary.OrderItem = function () {
            var OrderItem =
            /*#__PURE__*/
            function (_ImmutableLibrary$Bas5) {
              _inherits(OrderItem, _ImmutableLibrary$Bas5);

              function OrderItem() {
                _classCallCheck(this, OrderItem);

                return _possibleConstructorReturn(this, _getPrototypeOf(OrderItem).apply(this, arguments));
              }

              return OrderItem;
            }(ImmutableLibrary.Base);

            
            OrderItem.className = 'OrderItem';
            OrderItem.queryName = 'order_items';
            OrderItem.attributes('amount');
            OrderItem.belongsTo('order', {
              inverseOf: 'orderItems'
            });
            return OrderItem;
          }.call(this);

          return ImmutableLibrary.Rating = function () {
            var Rating =
            /*#__PURE__*/
            function (_ImmutableLibrary$Bas6) {
              _inherits(Rating, _ImmutableLibrary$Bas6);

              function Rating() {
                _classCallCheck(this, Rating);

                return _possibleConstructorReturn(this, _getPrototypeOf(Rating).apply(this, arguments));
              }

              return Rating;
            }(ImmutableLibrary.Base);

            
            Rating.className = 'Rating';
            Rating.queryName = 'ratings';
            Rating.attributes('value');
            Rating.belongsTo('order');
            return Rating;
          }.call(this);
        });
        describe('adding errors', function () {
          beforeEach(function () {
            return this.resource = ImmutableLibrary.Order.build();
          });
          describe('#add', function () {
            beforeEach(function () {
              return this.resource2 = this.resource.errors().add('field', 'code', 'message');
            });
            it('returns new resource', function () {
              return expect(this.resource2).not.toBe(this.resource);
            });
            return it('adds error to new resource', function () {
              return expect(this.resource2.errors().size()).toBe(1);
            });
          });
          return describe('#addAll', function () {
            beforeEach(function () {
              return this.resource2 = this.resource.errors().addAll(['field', 'code', 'message'], ['field2', 'code2', 'message2']);
            });
            it('returns new resource', function () {
              return expect(this.resource2).not.toBe(this.resource);
            });
            return it('adds errors to new resource', function () {
              return expect(this.resource2.errors().size()).toBe(2);
            });
          });
        });
        describe('propagating errors', function () {
          beforeEach(function () {
            return this.resource = ImmutableLibrary.Order.build();
          });
          describe('singular relationship', function () {
            beforeEach(function () {
              this.resource = this.resource.buildCustomer();
              this.customer = this.resource.customer();
              this.errors = ActiveResource.Collection.build([{
                field: 'customer',
                code: 'invalid',
                message: 'invalid'
              }, {
                field: 'customer.firstName',
                code: 'invalid',
                message: 'invalid'
              }, {
                field: 'customer.lastName',
                code: 'invalid',
                message: 'invalid'
              }]);
              return this.resource.errors().propagate(this.errors);
            });
            it('adds nested base errors to the nested relationship resource base', function () {
              return expect(this.resource.customer().errors().forBase().size()).toEqual(1);
            });
            it('adds nested field errors to the nested relationship resource', function () {
              return expect(this.resource.customer().errors().forField('firstName').size()).toEqual(1);
            });
            it('clones the relationship resource', function () {
              return expect(this.resource.customer()).not.toBe(this.customer);
            });
            return describe('repeated propagation', function () {
              beforeEach(function () {
                return this.resource.errors().propagate(this.errors);
              });
              return it('does not result in duplicate errors', function () {
                return expect(this.resource.customer().errors().forField('firstName').size()).toEqual(1);
              });
            });
          });
          return describe('collection relationship', function () {
            beforeEach(function () {
              this.resource = this.resource.orderItems().build();
              this.orderItem = this.resource.orderItems().target().first();
              this.errors = ActiveResource.Collection.build([{
                field: 'orderItems',
                code: 'invalid',
                message: 'invalid'
              }, {
                field: 'orderItems.amount',
                code: 'invalid',
                message: 'invalid'
              }]);
              return this.resource.errors().propagate(this.errors);
            });
            it('adds non-nested errors to the resource', function () {
              return expect(this.resource.errors().forField('orderItems').size()).toEqual(1);
            });
            it('adds nested errors to the nested relationship resource', function () {
              return expect(this.resource.orderItems().target().first().errors().forField('amount').size()).toEqual(1);
            });
            it('clones the relationship resource', function () {
              return expect(this.resource.orderItems().target().first()).not.toBe(this.orderItem);
            });
            return describe('repeated propagation', function () {
              beforeEach(function () {
                return this.resource.errors().propagate(this.errors);
              });
              return it('does not result in duplicate errors', function () {
                return expect(this.resource.orderItems().target().first().errors().forField('amount').size()).toEqual(1);
              });
            });
          });
        });
        describe('when resource unpersisted', function () {
          beforeEach(function () {
            return this.resource = ImmutableLibrary.Order.build();
          });
          describe('assigning attributes', function () {
            beforeEach(function () {
              return this.resource2 = this.resource.assignAttributes({
                price: 3.0
              });
            });
            it('clones a new resource', function () {
              return expect(this.resource).not.toBe(this.resource2);
            });
            it('does not change the old resource', function () {
              return expect(this.resource.price).toBeUndefined();
            });
            it('does not track the change on the old resource', function () {
              return expect(this.resource.changedFields().include('price')).toBeFalsy();
            });
            it('creates a new resource with the changes', function () {
              return expect(this.resource2.price).toEqual(3.0);
            });
            it('creates a new resource with the changed attribute tracked', function () {
              return expect(this.resource2.changedFields().include('price')).toBeTruthy();
            });
            return describe('saving the resource', function () {
              beforeEach(function () {
                var _this230 = this;

                this.resource2.save(function (resource3) {
                  return _this230.resource3 = resource3;
                });
                return null;
              });
              describe('on success', function () {
                beforeEach(function () {
                  return this.promise = moxios.wait(function () {
                    return moxios.requests.mostRecent().respondWith(JsonApiResponses.Order.find.success);
                  });
                });
                it('clones a new resource', function () {
                  var _this231 = this;

                  return this.promise.then(function () {
                    return expect(_this231.resource2).not.toBe(_this231.resource3);
                  });
                });
                it('does not persist the old resource', function () {
                  var _this232 = this;

                  return this.promise.then(function () {
                    return expect(_this232.resource2.persisted()).toBeFalsy();
                  });
                });
                it('does not persist new changes from the server to the old resource', function () {
                  var _this233 = this;

                  return this.promise.then(function () {
                    return expect(_this233.resource2.tax).toBeUndefined();
                  });
                });
                it('indicates the attribute was still changed on the old resource', function () {
                  var _this234 = this;

                  return this.promise.then(function () {
                    return expect(_this234.resource2.changedFields().include('price')).toBeTruthy();
                  });
                });
                it('persists a new resource', function () {
                  var _this235 = this;

                  return this.promise.then(function () {
                    return expect(_this235.resource3.persisted()).toBeTruthy();
                  });
                });
                it('persists new changes from the server', function () {
                  var _this236 = this;

                  return this.promise.then(function () {
                    return expect(_this236.resource3.tax).not.toBeUndefined();
                  });
                });
                return it('does not indicate the attribute was changed', function () {
                  var _this237 = this;

                  return this.promise.then(function () {
                    return expect(_this237.resource3.changedFields().include('price')).toBeFalsy();
                  });
                });
              });
              return describe('on failure', function () {
                beforeEach(function () {
                  return this.promise = moxios.wait(function () {
                    return moxios.requests.mostRecent().respondWith(JsonApiResponses.Order.save.failure);
                  });
                });
                it('clones a new resource', function () {
                  var _this238 = this;

                  return this.promise.catch(function () {
                    return expect(_this238.resource2).not.toBe(_this238.resource3);
                  });
                });
                it('does not persist the old resource', function () {
                  var _this239 = this;

                  return this.promise.catch(function () {
                    return expect(_this239.resource2.persisted()).toBeFalsy();
                  });
                });
                it('does not add errors from the server to the old resource', function () {
                  var _this240 = this;

                  return this.promise.catch(function () {
                    return expect(_this240.resource2.errors().empty()).toBeTruthy();
                  });
                });
                it('indicates the attribute was still changed on the old resource', function () {
                  var _this241 = this;

                  return this.promise.catch(function () {
                    return expect(_this241.resource2.changedFields().include('price')).toBeTruthy();
                  });
                });
                it('does not persist the new resource', function () {
                  var _this242 = this;

                  return this.promise.catch(function () {
                    return expect(_this242.resource3.persisted()).toBeFalsy();
                  });
                });
                it('maintains attribute on new resource', function () {
                  var _this243 = this;

                  return this.promise.catch(function () {
                    return expect(_this243.resource3.price).toEqual(3.0);
                  });
                });
                it('adds errors from the server to the new resource', function () {
                  var _this244 = this;

                  return this.promise.catch(function () {
                    return expect(_this244.resource3.errors().empty()).toBeFalsy();
                  });
                });
                return it('indicates the attribute was changed on the new resource', function () {
                  var _this245 = this;

                  return this.promise.catch(function () {
                    return expect(_this245.resource3.changedFields().include('price')).toBeTruthy();
                  });
                });
              });
            });
          });
          describe('updating attributes', function () {
            beforeEach(function () {
              var _this246 = this;

              this.resource.update({
                price: 3.0
              }, function (resource2) {
                return _this246.resource2 = resource2;
              });
              return null;
            });
            describe('on success', function () {
              beforeEach(function () {
                return this.promise = moxios.wait(function () {
                  return moxios.requests.mostRecent().respondWith(JsonApiResponses.Order.save.success);
                });
              });
              it('clones a new resource', function () {
                var _this247 = this;

                return this.promise.then(function () {
                  return expect(_this247.resource).not.toBe(_this247.resource2);
                });
              });
              it('does not persist the old resource', function () {
                var _this248 = this;

                return this.promise.then(function () {
                  return expect(_this248.resource.persisted()).toBeFalsy();
                });
              });
              it('does not change the old resource', function () {
                var _this249 = this;

                return this.promise.then(function () {
                  return expect(_this249.resource.price).toBeUndefined();
                });
              });
              it('does not persist new changes from the server to the old resource', function () {
                var _this250 = this;

                return this.promise.then(function () {
                  return expect(_this250.resource.tax).toBeUndefined();
                });
              });
              it('does not track the change on the old resource', function () {
                var _this251 = this;

                return this.promise.then(function () {
                  return expect(_this251.resource.changedFields().include('price')).toBeFalsy();
                });
              });
              it('persists a new resource', function () {
                var _this252 = this;

                return this.promise.then(function () {
                  return expect(_this252.resource2.persisted()).toBeTruthy();
                });
              });
              it('persists a new resource with the changes', function () {
                var _this253 = this;

                return this.promise.then(function () {
                  return expect(_this253.resource2.price).toEqual(3.0);
                });
              });
              it('persists new changes from the server', function () {
                var _this254 = this;

                return this.promise.then(function () {
                  return expect(_this254.resource2.tax).not.toBeUndefined();
                });
              });
              return it('does not indicate the attribute was changed', function () {
                var _this255 = this;

                return this.promise.then(function () {
                  return expect(_this255.resource2.changedFields().include('price')).toBeFalsy();
                });
              });
            });
            return describe('on failure', function () {
              beforeEach(function () {
                return this.promise = moxios.wait(function () {
                  return moxios.requests.mostRecent().respondWith(JsonApiResponses.Order.save.failure);
                });
              });
              it('clones a new resource', function () {
                var _this256 = this;

                return this.promise.catch(function () {
                  return expect(_this256.resource).not.toBe(_this256.resource2);
                });
              });
              it('does not persist the old resource', function () {
                var _this257 = this;

                return this.promise.catch(function () {
                  return expect(_this257.resource.persisted()).toBeFalsy();
                });
              });
              it('does not change the old resource', function () {
                var _this258 = this;

                return this.promise.catch(function () {
                  return expect(_this258.resource.price).toBeUndefined();
                });
              });
              it('does not add errors from the server to the old resource', function () {
                var _this259 = this;

                return this.promise.catch(function () {
                  return expect(_this259.resource.errors().empty()).toBeTruthy();
                });
              });
              it('does not indicate the attribute was changed on the old resource', function () {
                var _this260 = this;

                return this.promise.catch(function () {
                  return expect(_this260.resource.changedFields().include('price')).toBeFalsy();
                });
              });
              it('does not persist the new resource', function () {
                var _this261 = this;

                return this.promise.catch(function () {
                  return expect(_this261.resource2.persisted()).toBeFalsy();
                });
              });
              it('does not change attribute on new resource', function () {
                var _this262 = this;

                return this.promise.catch(function () {
                  return expect(_this262.resource2.price).toEqual(null);
                });
              });
              it('adds errors from the server to the new resource', function () {
                var _this263 = this;

                return this.promise.catch(function () {
                  return expect(_this263.resource2.errors().empty()).toBeFalsy();
                });
              });
              return it('does not indicate the attribute was changed on the new resource', function () {
                var _this264 = this;

                return this.promise.catch(function () {
                  return expect(_this264.resource2.changedFields().include('price')).toBeFalsy();
                });
              });
            });
          });
          return describe('assigning relationships', function () {
            describe('singular relationship', function () {
              describe('when inverse is singular', function () {
                beforeEach(function () {
                  this.singularResource = ImmutableLibrary.GiftCard.build({
                    id: '1'
                  });
                  return this.resource2 = this.resource.assignAttributes({
                    giftCard: this.singularResource
                  });
                });
                it('clones a new resource', function () {
                  return expect(this.resource).not.toBe(this.resource2);
                });
                it('does not change the old resource', function () {
                  return expect(this.resource.giftCard()).toBeNull();
                });
                it('does not track the change on the old resource', function () {
                  return expect(this.resource.changedFields().include('giftCard')).toBeFalsy();
                });
                it('creates a new resource with the changes', function () {
                  return expect(this.resource2.giftCard()).toEqual(this.singularResource);
                });
                it('creates a new resource with the changed relationship tracked', function () {
                  return expect(this.resource2.changedFields().include('giftCard')).toBeTruthy();
                });
                return describe('saving the resource', function () {
                  beforeEach(function () {
                    var _this265 = this;

                    this.resource2.save(function (resource3) {
                      return _this265.resource3 = resource3;
                    });
                    return null;
                  });
                  describe('on success', function () {
                    beforeEach(function () {
                      return this.promise = moxios.wait(function () {
                        return moxios.requests.mostRecent().respondWith(JsonApiResponses.Order.save.includes);
                      });
                    });
                    it('clones a new resource', function () {
                      var _this266 = this;

                      return this.promise.then(function () {
                        return expect(_this266.resource2).not.toBe(_this266.resource3);
                      });
                    });
                    it('does not persist the old resource', function () {
                      var _this267 = this;

                      return this.promise.then(function () {
                        return expect(_this267.resource2.persisted()).toBeFalsy();
                      });
                    });
                    it('indicates the relationship was still changed on the old resource', function () {
                      var _this268 = this;

                      return this.promise.then(function () {
                        return expect(_this268.resource2.changedFields().include('giftCard')).toBeTruthy();
                      });
                    });
                    it('persists a new resource', function () {
                      var _this269 = this;

                      return this.promise.then(function () {
                        return expect(_this269.resource3.persisted()).toBeTruthy();
                      });
                    });
                    it('assigns relationship resource to clone', function () {
                      var _this270 = this;

                      return this.promise.then(function () {
                        return expect(_this270.resource2.giftCard()).toBe(_this270.resource3.giftCard());
                      });
                    });
                    it('changes the inverse target of the new relationship resource', function () {
                      var _this271 = this;

                      return this.promise.then(function () {
                        return expect(_this271.resource3.giftCard().order()).toBe(_this271.resource3);
                      });
                    });
                    it('does not indicate the new relationship resource inverse target was changed', function () {
                      var _this272 = this;

                      return this.promise.then(function () {
                        return expect(_this272.resource3.giftCard().changedFields().include('order')).toBeFalsy();
                      });
                    });
                    return it('does not indicate the relationship was changed', function () {
                      var _this273 = this;

                      return this.promise.then(function () {
                        return expect(_this273.resource3.changedFields().include('giftCard')).toBeFalsy();
                      });
                    });
                  });
                  return describe('on failure', function () {
                    beforeEach(function () {
                      return this.promise = moxios.wait(function () {
                        return moxios.requests.mostRecent().respondWith(JsonApiResponses.Order.save.failure);
                      });
                    });
                    it('clones a new resource', function () {
                      var _this274 = this;

                      return this.promise.catch(function () {
                        return expect(_this274.resource2).not.toBe(_this274.resource3);
                      });
                    });
                    it('does not persist the old resource', function () {
                      var _this275 = this;

                      return this.promise.catch(function () {
                        return expect(_this275.resource2.persisted()).toBeFalsy();
                      });
                    });
                    it('does not add errors from the server to the old resource', function () {
                      var _this276 = this;

                      return this.promise.catch(function () {
                        return expect(_this276.resource2.errors().empty()).toBeTruthy();
                      });
                    });
                    it('indicates the relationship was still changed on the old resource', function () {
                      var _this277 = this;

                      return this.promise.catch(function () {
                        return expect(_this277.resource2.changedFields().include('giftCard')).toBeTruthy();
                      });
                    });
                    it('does not persist the new resource', function () {
                      var _this278 = this;

                      return this.promise.catch(function () {
                        return expect(_this278.resource3.persisted()).toBeFalsy();
                      });
                    });
                    it('adds errors from the server to the new resource', function () {
                      var _this279 = this;

                      return this.promise.catch(function () {
                        return expect(_this279.resource3.errors().empty()).toBeFalsy();
                      });
                    });
                    it('assigns relationship resource to clone', function () {
                      var _this280 = this;

                      return this.promise.catch(function () {
                        return expect(_this280.resource2.giftCard()).toBe(_this280.resource3.giftCard());
                      });
                    });
                    it('changes the inverse target of the new relationship resource', function () {
                      var _this281 = this;

                      return this.promise.catch(function () {
                        return expect(_this281.resource3.giftCard().order()).toBe(_this281.resource3);
                      });
                    });
                    it('indicates the relationship resource inverse target was still changed', function () {
                      var _this282 = this;

                      return this.promise.catch(function () {
                        return expect(_this282.resource3.giftCard().changedFields().include('order')).toBeTruthy();
                      });
                    });
                    return it('indicates the relationship was still changed', function () {
                      var _this283 = this;

                      return this.promise.catch(function () {
                        return expect(_this283.resource3.changedFields().include('giftCard')).toBeTruthy();
                      });
                    });
                  });
                });
              });
              return describe('when inverse is collection', function () {
                beforeEach(function () {
                  this.singularResource = ImmutableLibrary.Customer.build({
                    id: '1'
                  });
                  return this.resource2 = this.resource.assignAttributes({
                    customer: this.singularResource
                  });
                });
                it('clones a new resource', function () {
                  return expect(this.resource).not.toBe(this.resource2);
                });
                it('does not change the old resource', function () {
                  return expect(this.resource.customer()).toBeNull();
                });
                it('does not track the change on the old resource', function () {
                  return expect(this.resource.changedFields().include('customer')).toBeFalsy();
                });
                it('creates a new resource with the changes', function () {
                  return expect(this.resource2.customer()).toEqual(this.singularResource);
                });
                it('creates a new resource with the changed relationship tracked', function () {
                  return expect(this.resource2.changedFields().include('customer')).toBeTruthy();
                });
                return describe('saving the resource', function () {
                  beforeEach(function () {
                    var _this284 = this;

                    this.resource2.save(function (resource3) {
                      return _this284.resource3 = resource3;
                    });
                    return null;
                  });
                  describe('on success', function () {
                    beforeEach(function () {
                      return this.promise = moxios.wait(function () {
                        return moxios.requests.mostRecent().respondWith(JsonApiResponses.Order.save.includes);
                      });
                    });
                    it('clones a new resource', function () {
                      var _this285 = this;

                      return this.promise.then(function () {
                        return expect(_this285.resource2).not.toBe(_this285.resource3);
                      });
                    });
                    it('does not persist the old resource', function () {
                      var _this286 = this;

                      return this.promise.then(function () {
                        return expect(_this286.resource2.persisted()).toBeFalsy();
                      });
                    });
                    it('indicates the relationship was still changed on the old resource', function () {
                      var _this287 = this;

                      return this.promise.then(function () {
                        return expect(_this287.resource2.changedFields().include('customer')).toBeTruthy();
                      });
                    });
                    it('persists a new resource', function () {
                      var _this288 = this;

                      return this.promise.then(function () {
                        return expect(_this288.resource3.persisted()).toBeTruthy();
                      });
                    });
                    it('assigns relationship resource to clone', function () {
                      var _this289 = this;

                      return this.promise.then(function () {
                        return expect(_this289.resource2.customer()).toBe(_this289.resource3.customer());
                      });
                    });
                    it('changes the inverse target of the new relationship resource', function () {
                      var _this290 = this;

                      return this.promise.then(function () {
                        return expect(_this290.resource3.customer().orders().target().toArray()).toEqual([_this290.resource3]);
                      });
                    });
                    it('does not indicate the new relationship resource inverse target was changed', function () {
                      var _this291 = this;

                      return this.promise.then(function () {
                        return expect(_this291.resource3.customer().changedFields().include('orders')).toBeFalsy();
                      });
                    });
                    return it('does not indicate the relationship was changed', function () {
                      var _this292 = this;

                      return this.promise.then(function () {
                        return expect(_this292.resource3.changedFields().include('customer')).toBeFalsy();
                      });
                    });
                  });
                  return describe('on failure', function () {
                    beforeEach(function () {
                      return this.promise = moxios.wait(function () {
                        return moxios.requests.mostRecent().respondWith(JsonApiResponses.Order.save.failure);
                      });
                    });
                    it('clones a new resource', function () {
                      var _this293 = this;

                      return this.promise.catch(function () {
                        return expect(_this293.resource2).not.toBe(_this293.resource3);
                      });
                    });
                    it('does not persist the old resource', function () {
                      var _this294 = this;

                      return this.promise.catch(function () {
                        return expect(_this294.resource2.persisted()).toBeFalsy();
                      });
                    });
                    it('does not add errors from the server to the old resource', function () {
                      var _this295 = this;

                      return this.promise.catch(function () {
                        return expect(_this295.resource2.errors().empty()).toBeTruthy();
                      });
                    });
                    it('indicates the relationship was still changed on the old resource', function () {
                      var _this296 = this;

                      return this.promise.catch(function () {
                        return expect(_this296.resource2.changedFields().include('customer')).toBeTruthy();
                      });
                    });
                    it('does not persist the new resource', function () {
                      var _this297 = this;

                      return this.promise.catch(function () {
                        return expect(_this297.resource3.persisted()).toBeFalsy();
                      });
                    });
                    it('adds errors from the server to the new resource', function () {
                      var _this298 = this;

                      return this.promise.catch(function () {
                        return expect(_this298.resource3.errors().empty()).toBeFalsy();
                      });
                    });
                    it('assigns relationship resource to clone', function () {
                      var _this299 = this;

                      return this.promise.catch(function () {
                        return expect(_this299.resource2.customer()).toBe(_this299.resource3.customer());
                      });
                    });
                    it('changes the inverse target of the new relationship resource', function () {
                      var _this300 = this;

                      return this.promise.catch(function () {
                        return expect(_this300.resource3.customer().orders().target().toArray()).toEqual([_this300.resource3]);
                      });
                    });
                    it('indicates the relationship resource inverse target was still changed', function () {
                      var _this301 = this;

                      return this.promise.catch(function () {
                        return expect(_this301.resource3.customer().changedFields().include('orders')).toBeTruthy();
                      });
                    });
                    return it('indicates the relationship was still changed', function () {
                      var _this302 = this;

                      return this.promise.catch(function () {
                        return expect(_this302.resource3.changedFields().include('customer')).toBeTruthy();
                      });
                    });
                  });
                });
              });
            });
            return describe('collection relationship', function () {
              beforeEach(function () {
                this.collection = ActiveResource.prototype.Collection.build([ImmutableLibrary.Comment.build({
                  id: '1'
                }), ImmutableLibrary.Comment.build({
                  id: '2'
                })]);
                return this.resource2 = this.resource.assignAttributes({
                  comments: this.collection
                });
              });
              it('clones a new resource', function () {
                return expect(this.resource).not.toBe(this.resource2);
              });
              it('does not change the old resource', function () {
                return expect(this.resource.comments().empty()).toBeTruthy();
              });
              it('does not track the change on the old resource', function () {
                return expect(this.resource.changedFields().include('comments')).toBeFalsy();
              });
              it('creates a new resource with the changes', function () {
                return expect(this.resource2.comments().size()).toEqual(2);
              });
              it('creates a new resource with the changed relationship tracked', function () {
                return expect(this.resource2.changedFields().include('comments')).toBeTruthy();
              });
              return describe('saving the resource', function () {
                beforeEach(function () {
                  var _this303 = this;

                  this.resource2.save(function (resource3) {
                    return _this303.resource3 = resource3;
                  });
                  return null;
                });
                describe('on success', function () {
                  beforeEach(function () {
                    return this.promise = moxios.wait(function () {
                      return moxios.requests.mostRecent().respondWith(JsonApiResponses.Order.save.includes);
                    });
                  });
                  it('clones a new resource', function () {
                    var _this304 = this;

                    return this.promise.then(function () {
                      return expect(_this304.resource2).not.toBe(_this304.resource3);
                    });
                  });
                  it('does not persist the old resource', function () {
                    var _this305 = this;

                    return this.promise.then(function () {
                      return expect(_this305.resource2.persisted()).toBeFalsy();
                    });
                  });
                  it('indicates the relationship was still changed on the old resource', function () {
                    var _this306 = this;

                    return this.promise.then(function () {
                      return expect(_this306.resource2.changedFields().include('comments')).toBeTruthy();
                    });
                  });
                  it('persists a new resource', function () {
                    var _this307 = this;

                    return this.promise.then(function () {
                      return expect(_this307.resource3.persisted()).toBeTruthy();
                    });
                  });
                  it('assigns relationship resources to clone', function () {
                    var _this308 = this;

                    return this.promise.then(function () {
                      return expect(_this308.resource3.comments().target().toArray()).toEqual(_this308.resource2.comments().target().toArray());
                    });
                  });
                  it('changes the inverse target of the new relationship resources', function () {
                    var _this309 = this;

                    return this.promise.then(function () {
                      return expect(_this309.resource3.comments().target().first().order()).toBe(_this309.resource3);
                    });
                  });
                  it('does not indicate the new relationship resource inverse target was changed', function () {
                    var _this310 = this;

                    return this.promise.then(function () {
                      return expect(_this310.resource3.comments().target().first().changedFields().include('order')).toBeFalsy();
                    });
                  });
                  return it('does not indicate the relationship was changed', function () {
                    var _this311 = this;

                    return this.promise.then(function () {
                      return expect(_this311.resource3.changedFields().include('comments')).toBeFalsy();
                    });
                  });
                });
                return describe('on failure', function () {
                  beforeEach(function () {
                    return this.promise = moxios.wait(function () {
                      return moxios.requests.mostRecent().respondWith(JsonApiResponses.Order.save.failure);
                    });
                  });
                  it('clones a new resource', function () {
                    var _this312 = this;

                    return this.promise.catch(function () {
                      return expect(_this312.resource2).not.toBe(_this312.resource3);
                    });
                  });
                  it('does not persist the old resource', function () {
                    var _this313 = this;

                    return this.promise.catch(function () {
                      return expect(_this313.resource2.persisted()).toBeFalsy();
                    });
                  });
                  it('does not add errors from the server to the old resource', function () {
                    var _this314 = this;

                    return this.promise.catch(function () {
                      return expect(_this314.resource2.errors().empty()).toBeTruthy();
                    });
                  });
                  it('indicates the relationship was still changed on the old resource', function () {
                    var _this315 = this;

                    return this.promise.catch(function () {
                      return expect(_this315.resource2.changedFields().include('comments')).toBeTruthy();
                    });
                  });
                  it('does not persist the new resource', function () {
                    var _this316 = this;

                    return this.promise.catch(function () {
                      return expect(_this316.resource3.persisted()).toBeFalsy();
                    });
                  });
                  it('adds errors from the server to the new resource', function () {
                    var _this317 = this;

                    return this.promise.catch(function () {
                      return expect(_this317.resource3.errors().empty()).toBeFalsy();
                    });
                  });
                  it('assigns relationship resources to clone', function () {
                    var _this318 = this;

                    return this.promise.catch(function () {
                      return expect(_this318.resource3.comments().target().toArray()).toEqual(_this318.resource2.comments().target().toArray());
                    });
                  });
                  it('changes the inverse target of the new relationship resource', function () {
                    var _this319 = this;

                    return this.promise.catch(function () {
                      return expect(_this319.resource3.comments().target().first().order()).toBe(_this319.resource3);
                    });
                  });
                  it('indicates the new relationship resource inverse target was still changed', function () {
                    var _this320 = this;

                    return this.promise.catch(function () {
                      return expect(_this320.resource3.comments().target().first().changedFields().include('order')).toBeTruthy();
                    });
                  });
                  return it('indicates the relationship was still changed', function () {
                    var _this321 = this;

                    return this.promise.catch(function () {
                      return expect(_this321.resource3.changedFields().include('comments')).toBeTruthy();
                    });
                  });
                });
              });
            });
          });
        });
        describe('when resource persisted', function () {
          beforeEach(function () {
            var _this322 = this;

            ImmutableLibrary.Order.includes('giftCard', 'orderItems').find('1').then(window.onSuccess);
            return this.promise = moxios.wait(function () {
              return moxios.requests.mostRecent().respondWith(JsonApiResponses.Order.find.includes).then(function () {
                return _this322.resource = window.onSuccess.calls.mostRecent().args[0];
              });
            });
          });
          describe('reload', function () {
            beforeEach(function () {
              var _this323 = this;

              return this.promise2 = this.promise.then(function () {
                _this323.resource.reload().then(window.onSuccess);

                return moxios.wait(function () {
                  return moxios.requests.mostRecent().respondWith(JsonApiResponses.Order.find.includes2).then(function () {
                    return _this323.resource2 = window.onSuccess.calls.mostRecent().args[0];
                  });
                });
              });
            });
            it('clones resource', function () {
              var _this324 = this;

              return this.promise2.then(function () {
                return expect(_this324.resource).not.toBe(_this324.resource2);
              });
            });
            it('assigns new attributes', function () {
              var _this325 = this;

              return this.promise2.then(function () {
                return expect(_this325.resource2.total).toEqual(9.0);
              });
            });
            it('assigns new singular relationship', function () {
              var _this326 = this;

              return this.promise2.then(function () {
                return expect(_this326.resource2.rating()).toBeNull();
              });
            });
            it('assigns new collection relationship', function () {
              var _this327 = this;

              return this.promise2.then(function () {
                return expect(_this327.resource2.orderItems().target().toArray()).toEqual([]);
              });
            });
            return it('does not assign unloaded relationships', function () {
              var _this328 = this;

              return this.promise2.then(function () {
                return expect(_this328.resource2.comments().size()).toEqual(2);
              });
            });
          });
          describe('assigning attributes', function () {
            beforeEach(function () {
              var _this329 = this;

              return this.promise2 = this.promise.then(function () {
                return _this329.resource2 = _this329.resource.assignAttributes({
                  tax: 15.0
                });
              });
            });
            it('clones a new resource', function () {
              var _this330 = this;

              return this.promise2.then(function () {
                return expect(_this330.resource).not.toBe(_this330.resource2);
              });
            });
            it('does not change the old resource', function () {
              var _this331 = this;

              return this.promise2.then(function () {
                return expect(_this331.resource.tax).toEqual(5.0);
              });
            });
            it('does not track the change on the old resource', function () {
              var _this332 = this;

              return this.promise2.then(function () {
                return expect(_this332.resource.changedFields().include('tax')).toBeFalsy();
              });
            });
            it('creates a new persisted resource', function () {
              var _this333 = this;

              return this.promise2.then(function () {
                return expect(_this333.resource2.persisted()).toBeTruthy();
              });
            });
            it('creates a new resource with the changes', function () {
              var _this334 = this;

              return this.promise2.then(function () {
                return expect(_this334.resource2.tax).toEqual(15.0);
              });
            });
            it('creates a new resource with the changed attribute tracked', function () {
              var _this335 = this;

              return this.promise2.then(function () {
                return expect(_this335.resource2.changedFields().include('tax')).toBeTruthy();
              });
            });
            return describe('saving the changed persisted resource', function () {
              beforeEach(function () {
                var _this336 = this;

                return this.promise3 = this.promise2.then(function () {
                  _this336.resource2.save(function (resource3) {
                    return _this336.resource3 = resource3;
                  });

                  return null;
                });
              });
              describe('on success', function () {
                beforeEach(function () {
                  return this.promise4 = this.promise3.then(function () {
                    return moxios.requests.mostRecent().respondWith(JsonApiResponses.Order.save.includes);
                  });
                });
                it('clones a new resource', function () {
                  var _this337 = this;

                  return this.promise4.then(function () {
                    return expect(_this337.resource2).not.toBe(_this337.resource3);
                  });
                });
                it('does not persist new changes from the server to the old resource', function () {
                  var _this338 = this;

                  return this.promise4.then(function () {
                    return expect(_this338.resource2.balance).toBeUndefined();
                  });
                });
                it('indicates the attribute was still changed on the old resource', function () {
                  var _this339 = this;

                  return this.promise4.then(function () {
                    return expect(_this339.resource2.changedFields().include('tax')).toBeTruthy();
                  });
                });
                it('persists a new resource', function () {
                  var _this340 = this;

                  return this.promise4.then(function () {
                    return expect(_this340.resource3.persisted()).toBeTruthy();
                  });
                });
                it('persists new changes from the server', function () {
                  var _this341 = this;

                  return this.promise4.then(function () {
                    return expect(_this341.resource3.balance).not.toBeUndefined();
                  });
                });
                return it('does not indicate the attribute was changed', function () {
                  var _this342 = this;

                  return this.promise4.then(function () {
                    return expect(_this342.resource3.changedFields().include('tax')).toBeFalsy();
                  });
                });
              });
              return describe('on failure', function () {
                beforeEach(function () {
                  return this.promise4 = this.promise3.then(function () {
                    return moxios.requests.mostRecent().respondWith(JsonApiResponses.Order.save.failure);
                  });
                });
                it('clones a new resource', function () {
                  var _this343 = this;

                  return this.promise4.catch(function () {
                    return expect(_this343.resource2).not.toBe(_this343.resource3);
                  });
                });
                it('persists the old resource', function () {
                  var _this344 = this;

                  return this.promise4.catch(function () {
                    return expect(_this344.resource2.persisted()).toBeTruthy();
                  });
                });
                it('does not add errors from the server to the old resource', function () {
                  var _this345 = this;

                  return this.promise4.catch(function () {
                    return expect(_this345.resource2.errors().empty()).toBeTruthy();
                  });
                });
                it('indicates the attribute was still changed on the old resource', function () {
                  var _this346 = this;

                  return this.promise4.catch(function () {
                    return expect(_this346.resource2.changedFields().include('tax')).toBeTruthy();
                  });
                });
                it('persists the new resource', function () {
                  var _this347 = this;

                  return this.promise4.catch(function () {
                    return expect(_this347.resource3.persisted()).toBeTruthy();
                  });
                });
                it('maintains attribute on new resource', function () {
                  var _this348 = this;

                  return this.promise4.catch(function () {
                    return expect(_this348.resource3.tax).toEqual(15.0);
                  });
                });
                it('adds errors from the server to the new resource', function () {
                  var _this349 = this;

                  return this.promise4.catch(function () {
                    return expect(_this349.resource3.errors().empty()).toBeFalsy();
                  });
                });
                return it('indicates the attribute was changed on the new resource', function () {
                  var _this350 = this;

                  return this.promise4.catch(function () {
                    return expect(_this350.resource3.changedFields().include('tax')).toBeTruthy();
                  });
                });
              });
            });
          });
          return describe('assigning relationships', function () {
            describe('singular relationship', function () {
              beforeEach(function () {
                var _this351 = this;

                return this.promise2 = this.promise.then(function () {
                  _this351.singularResource = ImmutableLibrary.GiftCard.build({
                    id: '1'
                  });
                  return _this351.resource2 = _this351.resource.assignAttributes({
                    giftCard: _this351.singularResource
                  });
                });
              });
              it('clones a new resource', function () {
                var _this352 = this;

                return this.promise2.then(function () {
                  return expect(_this352.resource).not.toBe(_this352.resource2);
                });
              });
              it('does not change the old resource', function () {
                var _this353 = this;

                return this.promise2.then(function () {
                  return expect(_this353.resource.giftCard()).not.toBe(_this353.singularResource);
                });
              });
              it('does not track the change on the old resource', function () {
                var _this354 = this;

                return this.promise2.then(function () {
                  return expect(_this354.resource.changedFields().include('giftCard')).toBeFalsy();
                });
              });
              it('creates a new persisted resource', function () {
                var _this355 = this;

                return this.promise2.then(function () {
                  return expect(_this355.resource2.persisted()).toBeTruthy();
                });
              });
              it('creates a new resource with the changes', function () {
                var _this356 = this;

                return this.promise2.then(function () {
                  return expect(_this356.resource2.giftCard()).toBe(_this356.singularResource);
                });
              });
              it('creates a new resource with the changed relationship tracked', function () {
                var _this357 = this;

                return this.promise2.then(function () {
                  return expect(_this357.resource2.changedFields().include('giftCard')).toBeTruthy();
                });
              });
              return describe('saving the changed persisted resource', function () {
                beforeEach(function () {
                  var _this358 = this;

                  return this.promise3 = this.promise2.then(function () {
                    _this358.resource2.save(function (resource3) {
                      return _this358.resource3 = resource3;
                    });

                    return null;
                  });
                });
                describe('on success', function () {
                  beforeEach(function () {
                    return this.promise4 = this.promise3.then(function () {
                      return moxios.requests.mostRecent().respondWith(JsonApiResponses.Order.save.includes);
                    });
                  });
                  it('clones a new resource', function () {
                    var _this359 = this;

                    return this.promise4.then(function () {
                      return expect(_this359.resource2).not.toBe(_this359.resource3);
                    });
                  });
                  it('indicates the relationship was still changed on the old resource', function () {
                    var _this360 = this;

                    return this.promise4.then(function () {
                      return expect(_this360.resource2.changedFields().include('giftCard')).toBeTruthy();
                    });
                  });
                  it('persists a new resource', function () {
                    var _this361 = this;

                    return this.promise4.then(function () {
                      return expect(_this361.resource3.persisted()).toBeTruthy();
                    });
                  });
                  it('assigns relationship resource to clone', function () {
                    var _this362 = this;

                    return this.promise4.then(function () {
                      return expect(_this362.resource2.giftCard()).toBe(_this362.resource3.giftCard());
                    });
                  });
                  it('changes the inverse target of the relationship resource', function () {
                    var _this363 = this;

                    return this.promise4.then(function () {
                      return expect(_this363.resource3.giftCard().order()).toBe(_this363.resource3);
                    });
                  });
                  it('does not indicate the new relationship resource inverse target was changed', function () {
                    var _this364 = this;

                    return this.promise4.then(function () {
                      return expect(_this364.resource3.giftCard().changedFields().include('order')).toBeFalsy();
                    });
                  });
                  return it('does not indicate the relationship was changed', function () {
                    var _this365 = this;

                    return this.promise4.then(function () {
                      return expect(_this365.resource3.changedFields().include('giftCard')).toBeFalsy();
                    });
                  });
                });
                return describe('on failure', function () {
                  beforeEach(function () {
                    return this.promise4 = this.promise3.then(function () {
                      return moxios.requests.mostRecent().respondWith(JsonApiResponses.Order.save.failure);
                    });
                  });
                  it('clones a new resource', function () {
                    var _this366 = this;

                    return this.promise4.catch(function () {
                      return expect(_this366.resource2).not.toBe(_this366.resource3);
                    });
                  });
                  it('persists the old resource', function () {
                    var _this367 = this;

                    return this.promise4.catch(function () {
                      return expect(_this367.resource2.persisted()).toBeTruthy();
                    });
                  });
                  it('does not add errors from the server to the old resource', function () {
                    var _this368 = this;

                    return this.promise4.catch(function () {
                      return expect(_this368.resource2.errors().empty()).toBeTruthy();
                    });
                  });
                  it('indicates the relationship was still changed on the old resource', function () {
                    var _this369 = this;

                    return this.promise4.catch(function () {
                      return expect(_this369.resource2.changedFields().include('giftCard')).toBeTruthy();
                    });
                  });
                  it('persists the new resource', function () {
                    var _this370 = this;

                    return this.promise4.catch(function () {
                      return expect(_this370.resource3.persisted()).toBeTruthy();
                    });
                  });
                  it('adds errors from the server to the new resource', function () {
                    var _this371 = this;

                    return this.promise4.catch(function () {
                      return expect(_this371.resource3.errors().empty()).toBeFalsy();
                    });
                  });
                  it('assigns relationship resource to clone', function () {
                    var _this372 = this;

                    return this.promise4.catch(function () {
                      return expect(_this372.resource2.giftCard()).toBe(_this372.resource3.giftCard());
                    });
                  });
                  it('changes the inverse target of the new relationship resource', function () {
                    var _this373 = this;

                    return this.promise4.catch(function () {
                      return expect(_this373.resource3.giftCard().order()).toBe(_this373.resource3);
                    });
                  });
                  it('indicates the new relationship resource inverse target was still changed', function () {
                    var _this374 = this;

                    return this.promise4.catch(function () {
                      return expect(_this374.resource3.giftCard().changedFields().include('order')).toBeTruthy();
                    });
                  });
                  return it('indicates the relationship was still changed', function () {
                    var _this375 = this;

                    return this.promise4.catch(function () {
                      return expect(_this375.resource3.changedFields().include('giftCard')).toBeTruthy();
                    });
                  });
                });
              });
            });
            return describe('collection relationship', function () {
              beforeEach(function () {
                this.collection = ActiveResource.prototype.Collection.build([ImmutableLibrary.Comment.build({
                  id: '1'
                }), ImmutableLibrary.Comment.build({
                  id: '2'
                })]);
                return this.resource2 = this.resource.assignAttributes({
                  comments: this.collection
                });
              });
              it('clones a new resource', function () {
                return expect(this.resource).not.toBe(this.resource2);
              });
              it('does not change the old resource', function () {
                return expect(this.resource.comments().target().map(function (o) {
                  return o.id;
                }).toArray()).toEqual(['1', '2']);
              });
              it('does not track the change on the old resource', function () {
                return expect(this.resource.changedFields().include('comments')).toBeFalsy();
              });
              it('creates a new resource with the changes', function () {
                return expect(this.resource2.comments().size()).toEqual(2);
              });
              it('creates a new resource with the changed relationship tracked', function () {
                return expect(this.resource2.changedFields().include('comments')).toBeTruthy();
              });
              return describe('saving the resource', function () {
                beforeEach(function () {
                  var _this376 = this;

                  this.resource2.save(function (resource3) {
                    return _this376.resource3 = resource3;
                  });
                  return null;
                });
                describe('on success', function () {
                  beforeEach(function () {
                    return this.promise = moxios.wait(function () {
                      return moxios.requests.mostRecent().respondWith(JsonApiResponses.Order.save.includes);
                    });
                  });
                  it('clones a new resource', function () {
                    var _this377 = this;

                    return this.promise.then(function () {
                      return expect(_this377.resource2).not.toBe(_this377.resource3);
                    });
                  });
                  it('persists the old resource', function () {
                    var _this378 = this;

                    return this.promise.then(function () {
                      return expect(_this378.resource2.persisted()).toBeTruthy();
                    });
                  });
                  it('indicates the relationship was still changed on the old resource', function () {
                    var _this379 = this;

                    return this.promise.then(function () {
                      return expect(_this379.resource2.changedFields().include('comments')).toBeTruthy();
                    });
                  });
                  it('persists a new resource', function () {
                    var _this380 = this;

                    return this.promise.then(function () {
                      return expect(_this380.resource3.persisted()).toBeTruthy();
                    });
                  });
                  it('assigns relationship resources to clone', function () {
                    var _this381 = this;

                    return this.promise.then(function () {
                      return expect(_this381.resource3.comments().target().toArray()).toEqual(_this381.resource2.comments().target().toArray());
                    });
                  });
                  it('changes the inverse target of the relationship resources to the clone', function () {
                    var _this382 = this;

                    return this.promise.then(function () {
                      return expect(_this382.resource3.comments().target().first().order()).toBe(_this382.resource3);
                    });
                  });
                  it('does not indicate the relationship resource inverse target was changed', function () {
                    var _this383 = this;

                    return this.promise.then(function () {
                      return expect(_this383.resource3.comments().target().first().changedFields().include('order')).toBeFalsy();
                    });
                  });
                  return it('does not indicate the relationship was changed', function () {
                    var _this384 = this;

                    return this.promise.then(function () {
                      return expect(_this384.resource3.changedFields().include('comments')).toBeFalsy();
                    });
                  });
                });
                return describe('on failure', function () {
                  beforeEach(function () {
                    return this.promise = moxios.wait(function () {
                      return moxios.requests.mostRecent().respondWith(JsonApiResponses.Order.save.failure);
                    });
                  });
                  it('clones a new resource', function () {
                    var _this385 = this;

                    return this.promise.catch(function () {
                      return expect(_this385.resource2).not.toBe(_this385.resource3);
                    });
                  });
                  it('persists the old resource', function () {
                    var _this386 = this;

                    return this.promise.catch(function () {
                      return expect(_this386.resource2.persisted()).toBeTruthy();
                    });
                  });
                  it('does not add errors from the server to the old resource', function () {
                    var _this387 = this;

                    return this.promise.catch(function () {
                      return expect(_this387.resource2.errors().empty()).toBeTruthy();
                    });
                  });
                  it('indicates the relationship was still changed on the old resource', function () {
                    var _this388 = this;

                    return this.promise.catch(function () {
                      return expect(_this388.resource2.changedFields().include('comments')).toBeTruthy();
                    });
                  });
                  it('persists the new resource', function () {
                    var _this389 = this;

                    return this.promise.catch(function () {
                      return expect(_this389.resource3.persisted()).toBeTruthy();
                    });
                  });
                  it('adds errors from the server to the new resource', function () {
                    var _this390 = this;

                    return this.promise.catch(function () {
                      return expect(_this390.resource3.errors().empty()).toBeFalsy();
                    });
                  });
                  it('assigns relationship resources to clone', function () {
                    var _this391 = this;

                    return this.promise.catch(function () {
                      return expect(_this391.resource3.comments().target().toArray()).toEqual(_this391.resource2.comments().target().toArray());
                    });
                  });
                  it('changes the inverse target of the relationship resources to clone', function () {
                    var _this392 = this;

                    return this.promise.catch(function () {
                      return expect(_this392.resource3.comments().target().first().order()).toBe(_this392.resource3);
                    });
                  });
                  it('indicates the relationship resource inverse target was still changed', function () {
                    var _this393 = this;

                    return this.promise.catch(function () {
                      return expect(_this393.resource3.comments().target().first().changedFields().include('order')).toBeTruthy();
                    });
                  });
                  return it('indicates the relationship was still changed', function () {
                    var _this394 = this;

                    return this.promise.catch(function () {
                      return expect(_this394.resource3.changedFields().include('comments')).toBeTruthy();
                    });
                  });
                });
              });
            });
          });
        });
        describe('when resource that is inverse of autosave relationship is changed', function () {
          describe('when relationship with autosave inverse is collection', function () {
            beforeEach(function () {
              var _this395 = this;

              ImmutableLibrary.Customer.includes('orders').find('1').then(window.onSuccess);
              return this.promise = moxios.wait(function () {
                return moxios.requests.mostRecent().respondWith(JsonApiResponses.Customer.find.includes).then(function () {
                  _this395.resource = window.onSuccess.calls.mostRecent().args[0];
                  return _this395.resource2 = _this395.resource.assignAttributes({
                    name: 'New name'
                  });
                });
              });
            });
            it('clones resource\'s collection relationship to clone', function () {
              var _this396 = this;

              return this.promise.then(function () {
                return _this396.resource.orders().target().each(function (o) {
                  expect(_this396.resource2.orders().target().include(o)).toBeFalsy();
                  return expect(_this396.resource2.orders().target().map(function (t) {
                    return t.id;
                  }).include(o.id)).toBeTruthy();
                });
              });
            });
            it('changes the inverse target of the relationship resources to the clone', function () {
              var _this397 = this;

              return this.promise.then(function () {
                return expect(_this397.resource2.orders().target().first().customer()).toBe(_this397.resource2);
              });
            });
            it('indicates the relationship resource inverse target was changed', function () {
              var _this398 = this;

              return this.promise.then(function () {
                return expect(_this398.resource2.orders().target().first().changedFields().include('customer')).toBeTruthy();
              });
            });
            return it('does not indicate the relationship was changed', function () {
              var _this399 = this;

              return this.promise.then(function () {
                return expect(_this399.resource2.changedFields().include('orders')).toBeFalsy();
              });
            });
          });
          return describe('when relationship with autosave inverse is singular', function () {
            describe('when autosave inverse is collection', function () {
              beforeEach(function () {
                var _this400 = this;

                ImmutableLibrary.Order.includes('orderItems').find('1').then(window.onSuccess);
                return this.promise = moxios.wait(function () {
                  return moxios.requests.mostRecent().respondWith(JsonApiResponses.Order.find.includes).then(function () {
                    _this400.resource = window.onSuccess.calls.mostRecent().args[0];
                    _this400.resource3 = _this400.resource.orderItems().target().last();
                    return _this400.resource2 = _this400.resource.orderItems().target().first().assignAttributes({
                      amount: 1500
                    });
                  });
                });
              });
              it('does not replace resource in collection relationship of old inverse', function () {
                var _this401 = this;

                return this.promise.then(function () {
                  return expect(_this401.resource.orderItems().target().first()).not.toBe(_this401.resource2);
                });
              });
              it('clones the inverse target of the relationship', function () {
                var _this402 = this;

                return this.promise.then(function () {
                  return expect(_this402.resource2.order()).not.toBe(_this402.resource);
                });
              });
              it('does not indicate the relationship was changed', function () {
                var _this403 = this;

                return this.promise.then(function () {
                  return expect(_this403.resource2.changedFields().include('order')).toBeFalsy();
                });
              });
              it('replaces resource with clone in collection relationship of cloned inverse', function () {
                var _this404 = this;

                return this.promise.then(function () {
                  return expect(_this404.resource2.order().orderItems().target().first()).toBe(_this404.resource2);
                });
              });
              it('does not clone other resources in inverse collection relationship', function () {
                var _this405 = this;

                return this.promise.then(function () {
                  return expect(_this405.resource2.order().orderItems().target().last()).toBe(_this405.resource3);
                });
              });
              it('sets the inverse target of other resources in inverse collection relationship to the clone', function () {
                var _this406 = this;

                return this.promise.then(function () {
                  return expect(_this406.resource2.order().orderItems().target().last().order()).toBe(_this406.resource2.order());
                });
              });
              it('does not indicate the inverse target of other resources was changed', function () {
                var _this407 = this;

                return this.promise.then(function () {
                  return expect(_this407.resource2.order().orderItems().target().last().changedFields().include('order')).toBeFalsy();
                });
              });
              it('does not indicate the old inverse autosave relationship was changed', function () {
                var _this408 = this;

                return this.promise.then(function () {
                  return expect(_this408.resource.changedFields().include('orderItems')).toBeFalsy();
                });
              });
              return it('indicates the new inverse target autosave relationship was changed', function () {
                var _this409 = this;

                return this.promise.then(function () {
                  return expect(_this409.resource2.order().changedFields().include('orderItems')).toBeTruthy();
                });
              });
            });
            return describe('when autosave inverse is singular', function () {
              beforeEach(function () {
                var _this410 = this;

                ImmutableLibrary.Order.includes('rating').find('1').then(window.onSuccess);
                return this.promise = moxios.wait(function () {
                  return moxios.requests.mostRecent().respondWith(JsonApiResponses.Order.find.includes).then(function () {
                    _this410.resource = window.onSuccess.calls.mostRecent().args[0];
                    return _this410.resource2 = _this410.resource.rating().assignAttributes({
                      value: 15
                    });
                  });
                });
              });
              it('clones the inverse target of the relationship', function () {
                var _this411 = this;

                return this.promise.then(function () {
                  return expect(_this411.resource2.order()).not.toBe(_this411.resource);
                });
              });
              it('does not indicate the relationship was changed', function () {
                var _this412 = this;

                return this.promise.then(function () {
                  return expect(_this412.resource2.changedFields().include('order')).toBeFalsy();
                });
              });
              it('does not set original inverse relationship target to clone', function () {
                var _this413 = this;

                return this.promise.then(function () {
                  return expect(_this413.resource.rating()).not.toBe(_this413.resource2);
                });
              });
              it('sets cloned inverse relationship target to clone', function () {
                var _this414 = this;

                return this.promise.then(function () {
                  return expect(_this414.resource2.order().rating()).toBe(_this414.resource2);
                });
              });
              it('does not indicate the original inverse target of the relationship was changed', function () {
                var _this415 = this;

                return this.promise.then(function () {
                  return expect(_this415.resource.changedFields().include('rating')).toBeFalsy();
                });
              });
              return it('indicates the cloned inverse target of the relationship was changed', function () {
                var _this416 = this;

                return this.promise.then(function () {
                  return expect(_this416.resource2.order().changedFields().include('rating')).toBeTruthy();
                });
              });
            });
          });
        });
        return describe('when using relationship management', function () {
          beforeEach(function () {
            var _this417 = this;

            ImmutableLibrary.Order.find('1').then(window.onSuccess);
            return this.promise = moxios.wait(function () {
              return moxios.requests.mostRecent().respondWith(JsonApiResponses.Order.find.includes).then(function () {
                return _this417.resource = window.onSuccess.calls.mostRecent().args[0];
              });
            });
          });
          describe('singular', function () {
            beforeEach(function () {
              var _this418 = this;

              ImmutableLibrary.Customer.find('1').then(window.onSuccess);
              return this.promise2 = moxios.wait(function () {
                return moxios.requests.mostRecent().respondWith(JsonApiResponses.Customer.find.includes).then(function () {
                  return _this418.relatedResource = window.onSuccess.calls.mostRecent().args[0];
                });
              });
            });
            describe('assign', function () {
              beforeEach(function () {
                var _this419 = this;

                return this.promise3 = this.promise2.then(function () {
                  return _this419.clone = _this419.resource.assignCustomer(_this419.relatedResource);
                });
              });
              it('returns owner of relationship', function () {
                var _this420 = this;

                return this.promise3.then(function () {
                  return expect(_this420.clone.isA(ImmutableLibrary.Order)).toBeTruthy();
                });
              });
              it('clones resource', function () {
                var _this421 = this;

                return this.promise3.then(function () {
                  return expect(_this421.clone).not.toBe(_this421.resource);
                });
              });
              return it('clones related resource', function () {
                var _this422 = this;

                return this.promise3.then(function () {
                  expect(_this422.clone.customer().isA(ImmutableLibrary.Customer)).toBeTruthy();
                  return expect(_this422.clone.customer()).not.toBe(_this422.relatedResource);
                });
              });
            });
            describe('update', function () {
              beforeEach(function () {
                var _this423 = this;

                return this.promise3 = this.promise2.then(function () {
                  _this423.resource.updateCustomer(_this423.relatedResource).then(window.onSuccess);

                  return moxios.wait(function () {
                    return moxios.requests.mostRecent().respondWith(JsonApiResponses.relationships.update.success).then(function () {
                      return _this423.clone = window.onSuccess.calls.mostRecent().args[0];
                    });
                  });
                });
              });
              it('returns owner of relationship', function () {
                var _this424 = this;

                return this.promise3.then(function () {
                  return expect(_this424.clone.isA(ImmutableLibrary.Order)).toBeTruthy();
                });
              });
              it('clones resource', function () {
                var _this425 = this;

                return this.promise3.then(function () {
                  return expect(_this425.clone).not.toBe(_this425.resource);
                });
              });
              return it('clones related resource', function () {
                var _this426 = this;

                return this.promise3.then(function () {
                  expect(_this426.clone.customer().isA(ImmutableLibrary.Customer)).toBeTruthy();
                  return expect(_this426.clone.customer()).not.toBe(_this426.relatedResource);
                });
              });
            });
            describe('build', function () {
              beforeEach(function () {
                var _this427 = this;

                return this.promise3 = this.promise2.then(function () {
                  return _this427.clone = _this427.resource.buildCustomer({
                    name: 'J'
                  });
                });
              });
              it('returns owner of relationship', function () {
                var _this428 = this;

                return this.promise3.then(function () {
                  return expect(_this428.clone.isA(ImmutableLibrary.Order)).toBeTruthy();
                });
              });
              return it('clones resource', function () {
                var _this429 = this;

                return this.promise3.then(function () {
                  return expect(_this429.clone).not.toBe(_this429.resource);
                });
              });
            });
            return describe('create', function () {
              beforeEach(function () {
                var _this430 = this;

                return this.promise3 = this.promise2.then(function () {
                  _this430.resource.createCustomer({
                    name: 'M'
                  }).then(window.onSuccess);

                  return moxios.wait(function () {
                    return moxios.requests.mostRecent().respondWith(JsonApiResponses.Customer.find.includes).then(function () {
                      return _this430.clone = window.onSuccess.calls.mostRecent().args[0];
                    });
                  });
                });
              });
              it('returns owner of relationship', function () {
                var _this431 = this;

                return this.promise3.then(function () {
                  return expect(_this431.clone.isA(ImmutableLibrary.Order)).toBeTruthy();
                });
              });
              return it('clones resource', function () {
                var _this432 = this;

                return this.promise3.then(function () {
                  return expect(_this432.clone).not.toBe(_this432.resource);
                });
              });
            });
          });
          return describe('collection', function () {
            beforeEach(function () {
              var _this433 = this;

              ImmutableLibrary.Comment.find('1').then(window.onSuccess);
              return this.promise2 = moxios.wait(function () {
                return moxios.requests.mostRecent().respondWith(JsonApiResponses.Comment.find.success).then(function () {
                  return _this433.relatedResource = window.onSuccess.calls.mostRecent().args[0];
                });
              });
            });
            describe('load', function () {
              beforeEach(function () {
                var _this434 = this;

                this.resource.comments().load().then(window.onSuccess);
                return this.promise2 = moxios.wait(function () {
                  return moxios.requests.mostRecent().respondWith(JsonApiResponses.Comment.all.success).then(function () {
                    return _this434.clone = window.onSuccess.calls.mostRecent().args[0];
                  });
                });
              });
              it('returns owner of relationship', function () {
                var _this435 = this;

                return this.promise2.then(function () {
                  return expect(_this435.clone.isA(ImmutableLibrary.Order)).toBeTruthy();
                });
              });
              it('clones resource', function () {
                var _this436 = this;

                return this.promise2.then(function () {
                  return expect(_this436.clone).not.toBe(_this436.resource);
                });
              });
              return it('loads related resources', function () {
                var _this437 = this;

                return this.promise2.then(function () {
                  return expect(_this437.clone.comments().size()).toEqual(2);
                });
              });
            });
            describe('assign', function () {
              beforeEach(function () {
                var _this438 = this;

                return this.promise3 = this.promise2.then(function () {
                  return _this438.clone = _this438.resource.comments().assign([_this438.relatedResource], false);
                });
              });
              it('returns owner of relationship', function () {
                var _this439 = this;

                return this.promise3.then(function () {
                  return expect(_this439.clone.isA(ImmutableLibrary.Order)).toBeTruthy();
                });
              });
              it('clones resource', function () {
                var _this440 = this;

                return this.promise3.then(function () {
                  return expect(_this440.clone).not.toBe(_this440.resource);
                });
              });
              return it('clones related resources', function () {
                var _this441 = this;

                return this.promise3.then(function () {
                  expect(_this441.clone.comments().target().first().isA(ImmutableLibrary.Comment)).toBeTruthy();
                  return expect(_this441.clone.comments().target().first()).not.toBe(_this441.relatedResource);
                });
              });
            });
            describe('update', function () {
              beforeEach(function () {
                var _this442 = this;

                return this.promise3 = this.promise2.then(function () {
                  _this442.resource.comments().assign([_this442.relatedResource]).then(window.onSuccess);

                  return moxios.wait(function () {
                    return moxios.requests.mostRecent().respondWith(JsonApiResponses.relationships.update.success).then(function () {
                      return _this442.clone = window.onSuccess.calls.mostRecent().args[0];
                    });
                  });
                });
              });
              it('returns owner of relationship', function () {
                var _this443 = this;

                return this.promise3.then(function () {
                  return expect(_this443.clone.isA(ImmutableLibrary.Order)).toBeTruthy();
                });
              });
              it('clones resource', function () {
                var _this444 = this;

                return this.promise3.then(function () {
                  return expect(_this444.clone).not.toBe(_this444.resource);
                });
              });
              return it('clones related resources', function () {
                var _this445 = this;

                return this.promise3.then(function () {
                  expect(_this445.clone.comments().target().first().isA(ImmutableLibrary.Comment)).toBeTruthy();
                  return expect(_this445.clone.comments().target().first()).not.toBe(_this445.relatedResource);
                });
              });
            });
            describe('build', function () {
              beforeEach(function () {
                var _this446 = this;

                return this.promise3 = this.promise2.then(function () {
                  return _this446.clone = _this446.resource.comments().build({
                    body: 'J'
                  });
                });
              });
              it('returns owner of relationship', function () {
                var _this447 = this;

                return this.promise3.then(function () {
                  return expect(_this447.clone.isA(ImmutableLibrary.Order)).toBeTruthy();
                });
              });
              return it('clones resource', function () {
                var _this448 = this;

                return this.promise3.then(function () {
                  return expect(_this448.clone).not.toBe(_this448.resource);
                });
              });
            });
            describe('create', function () {
              beforeEach(function () {
                var _this449 = this;

                return this.promise3 = this.promise2.then(function () {
                  _this449.resource.comments().create({
                    body: 'M'
                  }).then(window.onSuccess);

                  return moxios.wait(function () {
                    return moxios.requests.mostRecent().respondWith(JsonApiResponses.Comment.find.success).then(function () {
                      return _this449.clone = window.onSuccess.calls.mostRecent().args[0];
                    });
                  });
                });
              });
              it('returns owner of relationship', function () {
                var _this450 = this;

                return this.promise3.then(function () {
                  return expect(_this450.clone.isA(ImmutableLibrary.Order)).toBeTruthy();
                });
              });
              return it('clones resource', function () {
                var _this451 = this;

                return this.promise3.then(function () {
                  return expect(_this451.clone).not.toBe(_this451.resource);
                });
              });
            });
            describe('push', function () {
              beforeEach(function () {
                var _this452 = this;

                return this.promise3 = this.promise2.then(function () {
                  _this452.resource.comments().push(_this452.relatedResource).then(window.onSuccess);

                  return moxios.wait(function () {
                    return moxios.requests.mostRecent().respondWith(JsonApiResponses.relationships.update.success).then(function () {
                      return _this452.clone = window.onSuccess.calls.mostRecent().args[0];
                    });
                  });
                });
              });
              it('returns owner of relationship', function () {
                var _this453 = this;

                return this.promise3.then(function () {
                  return expect(_this453.clone.isA(ImmutableLibrary.Order)).toBeTruthy();
                });
              });
              it('clones resource', function () {
                var _this454 = this;

                return this.promise3.then(function () {
                  return expect(_this454.clone).not.toBe(_this454.resource);
                });
              });
              return it('clones related resources', function () {
                var _this455 = this;

                return this.promise3.then(function () {
                  expect(_this455.clone.comments().target().first().isA(ImmutableLibrary.Comment)).toBeTruthy();
                  return expect(_this455.clone.comments().target().first()).not.toBe(_this455.relatedResource);
                });
              });
            });
            return describe('delete', function () {
              beforeEach(function () {
                var _this456 = this;

                return this.promise3 = this.promise2.then(function () {
                  _this456.resource.comments().delete(_this456.relatedResource).then(window.onSuccess);

                  return moxios.wait(function () {
                    return moxios.requests.mostRecent().respondWith(JsonApiResponses.relationships.update.success).then(function () {
                      return _this456.clone = window.onSuccess.calls.mostRecent().args[0];
                    });
                  });
                });
              });
              it('returns owner of relationship', function () {
                var _this457 = this;

                return this.promise3.then(function () {
                  return expect(_this457.clone.isA(ImmutableLibrary.Order)).toBeTruthy();
                });
              });
              it('clones resource', function () {
                var _this458 = this;

                return this.promise3.then(function () {
                  return expect(_this458.clone).not.toBe(_this458.resource);
                });
              });
              return it('clones related resources', function () {
                var _this459 = this;

                return this.promise3.then(function () {
                  expect(_this459.clone.comments().target().first().isA(ImmutableLibrary.Comment)).toBeTruthy();
                  return expect(_this459.clone.comments().target().first()).not.toBe(_this459.relatedResource);
                });
              });
            });
          });
        });
      });
    });
  }).call(undefined);
  (function () {
    describe('ActiveResource', function () {
      beforeEach(function () {
        moxios.install(MyLibrary.interface.axios);
        window.onSuccess = jasmine.createSpy('onSuccess');
        window.onFailure = jasmine.createSpy('onFailure');
        return window.onCompletion = jasmine.createSpy('onCompletion');
      });
      afterEach(function () {
        return moxios.uninstall();
      });
      return describe('Interfaces::JsonApi', function () {
        beforeEach(function () {
          this.lib = window.MyLibrary;
          return this.interface = this.lib.interface;
        });
        describe('#toCamelCase()', function () {
          describe('values', function () {
            beforeEach(function () {
              return this.camelCase = this.interface.toCamelCase({
                first_attribute: 'value',
                second_attribute: 'value'
              });
            });
            return it('transforms keys to camelCase', function () {
              return expect(this.camelCase).toEqual({
                firstAttribute: 'value',
                secondAttribute: 'value'
              });
            });
          });
          return describe('array', function () {
            describe('of objects', function () {
              beforeEach(function () {
                return this.camelCase = this.interface.toCamelCase({
                  first_attribute: [{
                    other_attribute: 'value',
                    another_attribute: 'value'
                  }]
                });
              });
              return it('transforms arrays objects keys to camelCase', function () {
                return expect(this.camelCase).toEqual({
                  firstAttribute: [{
                    otherAttribute: 'value',
                    anotherAttribute: 'value'
                  }]
                });
              });
            });
            return describe('of values', function () {
              beforeEach(function () {
                return this.camelCase = this.interface.toCamelCase({
                  first_attribute: ['value1', 'value2']
                });
              });
              return it('transforms arrays objects keys to camelCase', function () {
                return expect(this.camelCase).toEqual({
                  firstAttribute: ['value1', 'value2']
                });
              });
            });
          });
        });
        describe('#get()', function () {
          describe('getting resources', function () {
            beforeEach(function () {
              this.interface.get(this.lib.Product.links()['related']).then(window.onSuccess).catch(window.onFailure);
              return this.promise = moxios.wait(function () {
                return true;
              });
            });
            it('uses JSONAPI content type', function () {
              return this.promise.then(function () {
                return expect(moxios.requests.mostRecent().headers['Content-Type']).toEqual('application/vnd.api+json');
              });
            });
            describe('on timeout', function () {
              beforeEach(function () {
                var _this460 = this;

                return this.promise2 = this.promise.then(function () {
                  return moxios.requests.mostRecent().respondWith(JsonApiResponses.timeout).catch(function () {
                    return Promise.reject(_this460.errors = window.onFailure.calls.mostRecent().args[0]);
                  });
                });
              });
              it('returns errors Collection', function () {
                var _this461 = this;

                return this.promise2.catch(function () {
                  var base;
                  return expect(typeof (base = _this461.errors).isA === "function" ? base.isA(ActiveResource.prototype.Collection) : void 0).toBeTruthy();
                });
              });
              return it('returns error with detail', function () {
                var _this462 = this;

                return this.promise2.catch(function () {
                  return expect(_this462.errors.first()).toEqual({
                    code: 'timeout',
                    message: "Timeout occurred while loading https://example.com/api/v1/products/",
                    detail: "Timeout occurred while loading https://example.com/api/v1/products/"
                  });
                });
              });
            });
            return describe('on success', function () {
              beforeEach(function () {
                var _this463 = this;

                return this.promise2 = this.promise.then(function () {
                  return moxios.requests.mostRecent().respondWith(JsonApiResponses.Product.all.success).then(function () {
                    return _this463.collection = window.onSuccess.calls.mostRecent().args[0];
                  });
                });
              });
              it('returns a collection', function () {
                var _this464 = this;

                return this.promise2.then(function () {
                  var base;
                  return expect(typeof (base = _this464.collection).isA === "function" ? base.isA(ActiveResource.prototype.Collection) : void 0).toBeTruthy();
                });
              });
              it('returns a collection of resources of the queried type', function () {
                var _this465 = this;

                return this.promise2.then(function () {
                  var base;
                  return expect(typeof (base = _this465.collection.last()).isA === "function" ? base.isA(_this465.lib.Product) : void 0).toBeTruthy();
                });
              });
              return it('returns a collection of resources with links', function () {
                var _this466 = this;

                return this.promise2.then(function () {
                  return expect(_this466.collection.last().links()['self']).toBeDefined();
                });
              });
            });
          });
          describe('getting a resource', function () {
            beforeEach(function () {
              this.interface.get(this.lib.Product.links()['related'] + '1').then(window.onSuccess).catch(window.onFailure);
              return this.promise = moxios.wait(function () {
                return true;
              });
            });
            describe('on success', function () {
              beforeEach(function () {
                var _this467 = this;

                return this.promise2 = this.promise.then(function () {
                  return moxios.requests.mostRecent().respondWith(JsonApiResponses.Product.find.success).then(function () {
                    return _this467.resource = window.onSuccess.calls.mostRecent().args[0];
                  });
                });
              });
              it('returns a resource of the queried type', function () {
                var _this468 = this;

                return this.promise2.then(function () {
                  var base;
                  return expect(typeof (base = _this468.resource).isA === "function" ? base.isA(_this468.lib.Product) : void 0).toBeTruthy();
                });
              });
              return it('returns a resource with a link', function () {
                var _this469 = this;

                return this.promise2.then(function () {
                  return expect(_this469.resource.links()['self']).toBeDefined();
                });
              });
            });
            describe('when no relationship links', function () {
              beforeEach(function () {
                var _this470 = this;

                return this.promise2 = this.promise.then(function () {
                  return moxios.requests.mostRecent().respondWith(JsonApiResponses.Product.find.noRelLinks).then(function () {
                    return _this470.resource = window.onSuccess.calls.mostRecent().args[0];
                  });
                });
              });
              return it('builds links from owner self link', function () {
                var _this471 = this;

                return this.promise2.then(function () {
                  return expect(_this471.resource.association('timeSlots').links()).toEqual({
                    self: "https://example.com/api/v1/products/1/relationships/time_slots/",
                    related: "https://example.com/api/v1/products/1/time_slots/"
                  });
                });
              });
            });
            return describe('on failure', function () {
              beforeEach(function () {
                var _this472 = this;

                return this.promise2 = this.promise.then(function () {
                  return moxios.requests.mostRecent().respondWith(JsonApiResponses.Product.find.failure).catch(function () {
                    return Promise.reject(_this472.errors = window.onFailure.calls.mostRecent().args[0]);
                  });
                });
              });
              it('returns a collection of errors', function () {
                var _this473 = this;

                return this.promise2.catch(function () {
                  return expect(_this473.errors.klass()).toBe(ActiveResource.prototype.Collection);
                });
              });
              return it('returns a parameter error', function () {
                var _this474 = this;

                return this.promise2.catch(function () {
                  return expect(_this474.errors.first().parameter).toEqual('id');
                });
              });
            });
          });
          describe('using fields queryParam', function () {
            beforeEach(function () {
              var _this475 = this;

              var queryParams;
              queryParams = {
                fields: {
                  products: ['title', 'updatedAt'],
                  orders: ['price', 'createdAt']
                }
              };
              this.interface.get(this.lib.Product.links()['related'], queryParams).then(window.onSuccess).catch(window.onFailure);
              return this.promise = moxios.wait(function () {
                return _this475.paramStr = requestParams(moxios.requests.mostRecent());
              });
            });
            return it('builds a field set into the query URL', function () {
              var _this476 = this;

              return this.promise.then(function () {
                return expect(_this476.paramStr).toEqual('fields[products]=title,updated_at&fields[orders]=price,created_at');
              });
            });
          });
          describe('using fields queryParam with includes', function () {
            beforeEach(function () {
              var _this477 = this;

              var queryParams;
              queryParams = {
                fields: {
                  products: ['title'],
                  orders: ['price']
                },
                include: ['merchant', {
                  orders: {
                    transactions: 'paymentMethod'
                  },
                  labels: ['author']
                }],
                __root: 'products'
              };
              this.interface.get(this.lib.Product.links()['related'], queryParams).then(window.onSuccess).catch(window.onFailure);
              return this.promise = moxios.wait(function () {
                return _this477.paramStr = requestParams(moxios.requests.mostRecent());
              });
            });
            return it('merges includes with field set', function () {
              var _this478 = this;

              return this.promise.then(function () {
                return expect(_this478.paramStr).toContain('fields[products]=title,merchant&fields[orders]=price,transactions&fields[transactions]=payment_method&fields[labels]=author');
              });
            });
          });
          describe('using include queryParam', function () {
            beforeEach(function () {
              var _this479 = this;

              var queryParams;
              queryParams = {
                include: ['merchant', 'attributeValues', {
                  orders: 'transactions'
                }]
              };
              this.interface.get(this.lib.Product.links()['related'], queryParams).then(window.onSuccess).catch(window.onFailure);
              return this.promise = moxios.wait(function () {
                return _this479.paramStr = requestParams(moxios.requests.mostRecent());
              });
            });
            return it('builds an include tree into the query URL', function () {
              var _this480 = this;

              return this.promise.then(function () {
                return expect(_this480.paramStr).toEqual('include=merchant,attribute_values,orders.transactions');
              });
            });
          });
          return describe('using sort queryParam', function () {
            beforeEach(function () {
              var _this481 = this;

              var queryParams;
              queryParams = {
                sort: {
                  updatedAt: 'asc',
                  createdAt: 'desc'
                }
              };
              this.interface.get(this.lib.Product.links()['related'], queryParams).then(window.onSuccess).catch(window.onFailure);
              return this.promise = moxios.wait(function () {
                return _this481.paramStr = requestParams(moxios.requests.mostRecent());
              });
            });
            return it('builds an include tree into the query URL', function () {
              var _this482 = this;

              return this.promise.then(function () {
                return expect(_this482.paramStr).toEqual('sort=updated_at,-created_at');
              });
            });
          });
        });
        describe('#post', function () {
          describe('persisting resource data', function () {
            beforeEach(function () {
              this.order = this.lib.Order.build({
                price: 1.0
              });
              this.order.transactions().assign([this.lib.Transaction.build({
                amount: 1.0,
                paymentMethod: this.lib.PaymentMethod.build({
                  id: 100
                })
              })]);
              this.order.timestamp = new Date();
              this.interface.post(this.lib.Order.links()['related'], this.order).then(window.onSuccess).catch(window.onFailure);
              return this.promise = moxios.wait(function () {
                return true;
              });
            });
            it('builds a resource document', function () {
              var resourceDocument;
              resourceDocument = {
                type: 'orders',
                attributes: {
                  price: 1.0,
                  timestamp: this.order.timestamp.toJSON()
                },
                relationships: {
                  transactions: {
                    data: [{
                      type: 'transactions',
                      attributes: {
                        amount: 1.0,
                        payment_method_id: 100
                      },
                      relationships: {
                        payment_method: {
                          data: {
                            type: 'payment_methods',
                            id: '100'
                          }
                        }
                      }
                    }]
                  }
                }
              };
              return this.promise.then(function () {
                return expect(JSON.parse(moxios.requests.mostRecent().data).data).toEqual(resourceDocument);
              });
            });
            describe('when persistence succeeds', function () {
              beforeEach(function () {
                var _this483 = this;

                return this.promise2 = this.promise.then(function () {
                  return moxios.requests.mostRecent().respondWith(JsonApiResponses.Product.save.success).then(function () {
                    return _this483.resource = window.onSuccess.calls.mostRecent().args[0];
                  });
                });
              });
              it('indicates the resource is persisted', function () {
                var _this484 = this;

                return this.promise2.then(function () {
                  var base;
                  return expect(typeof (base = _this484.resource).persisted === "function" ? base.persisted() : void 0).toBeTruthy();
                });
              });
              return it('updates the resource with attributes from the server', function () {
                var _this485 = this;

                return this.promise2.then(function () {
                  return expect(_this485.resource.description).toEqual('Another description');
                });
              });
            });
            return describe('when persistence fails', function () {
              beforeEach(function () {
                var _this486 = this;

                return this.promise2 = this.promise.then(function () {
                  return moxios.requests.mostRecent().respondWith(JsonApiResponses.Product.save.failure).catch(function () {
                    return Promise.reject(_this486.resource = window.onFailure.calls.mostRecent().args[0]);
                  });
                });
              });
              it('adds errors the resource', function () {
                var _this487 = this;

                return this.promise2.catch(function () {
                  var base;
                  return expect(typeof (base = _this487.resource.errors()).empty === "function" ? base.empty() : void 0).toBeFalsy();
                });
              });
              it('converts a pointer to a base error field', function () {
                var _this488 = this;

                return this.promise2.catch(function () {
                  return expect(_this488.resource.errors().forBase().map(function (e) {
                    return e.detail;
                  }).first()).toEqual("A problem occurred with the base of the product.");
                });
              });
              it('converts a pointer to a attribute error field', function () {
                var _this489 = this;

                return this.promise2.catch(function () {
                  return expect(_this489.resource.errors().detailsForField('title')).toEqual({
                    blank: 'Title cannot be blank.'
                  });
                });
              });
              it('camelizes an underscored attribute name', function () {
                var _this490 = this;

                return this.promise2.catch(function () {
                  return expect(_this490.resource.errors().include('phoneNumber')).toBeTruthy();
                });
              });
              return it('converts a pointer to a relationship error field', function () {
                var _this491 = this;

                return this.promise2.catch(function () {
                  return expect(_this491.resource.errors().detailsForField('orders.price')).toEqual({
                    blank: 'Price cannot be blank.'
                  });
                });
              });
            });
          });
          return describe('persisting changes involving resource identifiers', function () {
            beforeEach(function () {
              this.product = this.lib.Product.build({
                id: 1,
                title: 'A product title'
              });
              this.product2 = this.lib.Product.build({
                id: 2,
                title: 'Another title'
              });
              this.interface.post(this.lib.Product.links()['related'], [this.product, this.product2], {
                onlyResourceIdentifiers: true
              }).then(window.onSuccess).catch(window.onFailure);
              return this.promise = moxios.wait(function () {
                return true;
              });
            });
            return it('builds a resource identifier document', function () {
              var resourceDocument;
              resourceDocument = JSON.stringify({
                data: [{
                  type: 'products',
                  id: '1'
                }, {
                  type: 'products',
                  id: '2'
                }]
              });
              return this.promise.then(function () {
                return expect(moxios.requests.mostRecent().data).toEqual(resourceDocument);
              });
            });
          });
        });
        describe('#delete', function () {
          describe('with resource data', function () {
            beforeEach(function () {
              var _this492 = this;

              this.lib.Product.last().then(window.onSuccess);
              this.promise = moxios.wait(function () {
                return moxios.requests.mostRecent().respondWith(JsonApiResponses.Product.all.success).then(function () {
                  return _this492.resource = window.onSuccess.calls.mostRecent().args[0];
                });
              });
              return this.promise2 = this.promise.then(function () {
                _this492.interface.delete(_this492.resource.links()['self'], _this492.resource).then(window.onSuccess).catch(window.onFailure);

                return moxios.wait(function () {
                  return true;
                });
              });
            });
            return it('builds a resource identifier document', function () {
              var resourceDocument;
              resourceDocument = JSON.stringify({
                data: {
                  type: 'products',
                  id: this.resource.id.toString()
                }
              });
              return this.promise2.then(function () {
                return expect(moxios.requests.mostRecent().data).toEqual(resourceDocument);
              });
            });
          });
          return describe('without resource data', function () {
            beforeEach(function () {
              this.interface.delete(this.lib.Product.links()['related']).then(window.onSuccess).catch(window.onFailure);
              return this.promise = moxios.wait(function () {
                return moxios.requests.mostRecent().respondWith(JsonApiResponses.relationships.update.success);
              });
            });
            return it('sends no data', function () {
              return this.promise.then(function () {
                return expect(moxios.requests.mostRecent().data).toEqual(JSON.stringify({}));
              });
            });
          });
        });
        return describe('#findResourceForRelationship', function () {
          beforeEach(function () {
            this.resource = this.lib.Order.build();
            return this.response = getJSONFixture('orders/includes.json');
          });
          describe('when relationship not found in included', function () {
            beforeEach(function () {
              return this.result = this.interface.findResourceForRelationship(this.response.data.relationships.order_items.data[0], [], this.resource, this.resource.klass().reflectOnAssociation('orderItems'));
            });
            return it('returns undefined', function () {
              return expect(this.result).toBeUndefined();
            });
          });
          describe('when included is not on relationship target', function () {
            describe('when relationship collection', function () {
              beforeEach(function () {
                return this.result = this.interface.findResourceForRelationship(this.response.data.relationships.order_items.data[0], this.response.included, this.resource, this.resource.klass().reflectOnAssociation('orderItems'), 0);
              });
              it('returns resource built from include id', function () {
                return expect(this.result.id).toEqual(this.response.data.relationships.order_items.data[0].id);
              });
              return it('returns resource built from include type', function () {
                return expect(this.result.klass()).toBe(this.lib.OrderItem);
              });
            });
            return describe('when relationship singular', function () {
              beforeEach(function () {
                return this.result = this.interface.findResourceForRelationship(this.response.data.relationships.customer.data, this.response.included, this.resource, this.resource.klass().reflectOnAssociation('customer'));
              });
              it('returns resource built from include id', function () {
                return expect(this.result.id).toEqual(this.response.data.relationships.customer.data.id);
              });
              return it('returns resource built from include type', function () {
                return expect(this.result.klass()).toBe(this.lib.Customer);
              });
            });
          });
          describe('when included is on relationship target', function () {
            describe('when relationship target persisted', function () {
              describe('when relationship collection', function () {
                beforeEach(function () {
                  this.relationshipResource = this.lib.OrderItem.build({
                    id: "5"
                  });
                  this.resource.assignAttributes({
                    orderItems: [this.relationshipResource]
                  });
                  return this.result = this.interface.findResourceForRelationship(this.response.data.relationships.order_items.data[0], this.response.included, this.resource, this.resource.klass().reflectOnAssociation('orderItems'), 0);
                });
                it('returns resource from target', function () {
                  return expect(this.result).toBe(this.relationshipResource);
                });
                return it('merges include fields into resource', function () {
                  return expect(this.result.amount).toBeDefined();
                });
              });
              return describe('when relationship singular', function () {
                beforeEach(function () {
                  this.relationshipResource = this.lib.Customer.build({
                    id: "1"
                  });
                  this.resource.assignAttributes({
                    customer: this.relationshipResource
                  });
                  return this.result = this.interface.findResourceForRelationship(this.response.data.relationships.customer.data, this.response.included, this.resource, this.resource.klass().reflectOnAssociation('customer'));
                });
                it('returns resource from target', function () {
                  return expect(this.result).toBe(this.relationshipResource);
                });
                return it('merges include fields into resource', function () {
                  return expect(this.result.firstName).toBeDefined();
                });
              });
            });
            return describe('when relationship target unpersisted', function () {
              describe('when relationship collection', function () {
                beforeEach(function () {
                  this.relationshipResource0 = this.lib.OrderItem.build();
                  this.relationshipResource1 = this.lib.OrderItem.build();
                  this.resource.assignAttributes({
                    orderItems: [this.relationshipResource0, this.relationshipResource1]
                  });
                  return this.result = this.interface.findResourceForRelationship(this.response.data.relationships.order_items.data[1], this.response.included, this.resource, this.resource.klass().reflectOnAssociation('orderItems'), 1);
                });
                it('returns resource from target at index', function () {
                  return expect(this.result).toBe(this.relationshipResource1);
                });
                it('merges include fields into resource', function () {
                  return expect(this.result.amount).toBeDefined();
                });
                return it('persists resource', function () {
                  return expect(this.result.persisted()).toBeTruthy();
                });
              });
              return describe('when relationship singular', function () {
                beforeEach(function () {
                  this.relationshipResource = this.lib.Customer.build();
                  this.resource.assignAttributes({
                    customer: this.relationshipResource
                  });
                  return this.result = this.interface.findResourceForRelationship(this.response.data.relationships.customer.data, this.response.included, this.resource, this.resource.klass().reflectOnAssociation('customer'));
                });
                it('returns resource from target', function () {
                  return expect(this.result).toBe(this.relationshipResource);
                });
                it('merges include fields into resource', function () {
                  return expect(this.result.firstName).toBeDefined();
                });
                return it('persists resource', function () {
                  return expect(this.result.persisted()).toBeTruthy();
                });
              });
            });
          });
          return describe('when included is polymorphic relationship target', function () {
            beforeEach(function () {
              return this.result = this.interface.findResourceForRelationship(this.response.data.relationships.payment_source.data, this.response.included, this.resource, this.resource.klass().reflectOnAssociation('paymentSource'));
            });
            return it('builds polymorphic relationship using inverse', function () {
              return expect(this.result.orders().target().first()).toBe(this.resource);
            });
          });
        });
      });
    });
  }).call(undefined);
  (function () {
    describe('ActiveResource', function () {
      describe('.extend()', function () {
        return it('extends the class correctly', function () {
          var MyClass, MyModule;

          MyModule =
          /*#__PURE__*/
          function () {
            function MyModule() {
              _classCallCheck(this, MyModule);
            }

            _createClass(MyModule, null, [{
              key: "myMethod",
              value: function myMethod() {}
            }]);

            return MyModule;
          }();

          MyClass = function () {
            var MyClass = function MyClass() {
              _classCallCheck(this, MyClass);
            };

            
            ActiveResource.extend(MyClass, MyModule);
            return MyClass;
          }.call(this);

          return expect(MyClass.myMethod).toBeDefined();
        });
      });
      return describe('.include()', function () {
        beforeEach(function () {
          var MyClass, MyModule;

          MyModule = function () {
            var MyModule =
            /*#__PURE__*/
            function () {
              function MyModule() {
                _classCallCheck(this, MyModule);
              }

              _createClass(MyModule, [{
                key: "myMethod",
                value: function myMethod() {}
              }]);

              return MyModule;
            }();

            

            MyModule.prototype.myOtherClass = function () {
              var myOtherClass = function myOtherClass() {
                _classCallCheck(this, myOtherClass);
              };

              
              myOtherClass.__excludeFromExtend = true;
              return myOtherClass;
            }.call(this);

            return MyModule;
          }.call(this);

          MyClass = function () {
            var MyClass = function MyClass() {
              _classCallCheck(this, MyClass);
            };

            
            ActiveResource.include(MyClass, MyModule.prototype);
            return MyClass;
          }.call(this);

          return this.instance = new MyClass();
        });
        it('includes the class correctly', function () {
          return expect(this.instance.myMethod).toBeDefined();
        });
        return it('does not include methods flagged for exclusion', function () {
          return expect(this.instance.myOtherClass).not.toBeDefined();
        });
      });
    });
  }).call(undefined);
  (function () {
    describe('ActiveResource', function () {
      beforeEach(function () {
        moxios.install(MyLibrary.interface.axios);
        window.onSuccess = jasmine.createSpy('onSuccess');
        window.onFailure = jasmine.createSpy('onFailure');
        return window.onCompletion = jasmine.createSpy('onCompletion');
      });
      afterEach(function () {
        return moxios.uninstall();
      });
      return describe('::Persistence', function () {
        describe('#persisted()', function () {
          describe('when the resource is not persisted', function () {
            beforeEach(function () {
              return this.resource = MyLibrary.Product.build();
            });
            return it('returns false', function () {
              var base;
              return expect(typeof (base = this.resource).persisted === "function" ? base.persisted() : void 0).toBeFalsy();
            });
          });
          return describe('when the resource is persisted', function () {
            beforeEach(function () {
              var _this493 = this;

              MyLibrary.Product.create({
                title: 'A product title',
                description: 'A product description'
              }, window.onCompletion);
              return this.promise = moxios.wait(function () {
                return moxios.requests.mostRecent().respondWith(JsonApiResponses.Product.save.success).then(function () {
                  return _this493.resource = window.onCompletion.calls.mostRecent().args[0];
                });
              });
            });
            return it('returns true', function () {
              var _this494 = this;

              return this.promise.then(function () {
                var base;
                return expect(typeof (base = _this494.resource).persisted === "function" ? base.persisted() : void 0).toBeTruthy();
              });
            });
          });
        });
        describe('#newResource()', function () {
          describe('when the resource is not persisted', function () {
            beforeEach(function () {
              return this.resource = MyLibrary.Product.build();
            });
            return it('returns true', function () {
              var base;
              return expect(typeof (base = this.resource).newResource === "function" ? base.newResource() : void 0).toBeTruthy();
            });
          });
          return describe('when the resource is persisted', function () {
            beforeEach(function () {
              var _this495 = this;

              MyLibrary.Product.create({
                title: 'A product title',
                description: 'A product description'
              }, window.onCompletion);
              return this.promise = moxios.wait(function () {
                return moxios.requests.mostRecent().respondWith(JsonApiResponses.Product.save.success).then(function () {
                  return _this495.resource = window.onCompletion.calls.mostRecent().args[0];
                });
              });
            });
            return it('returns false', function () {
              var _this496 = this;

              return this.promise.then(function () {
                var base;
                return expect(typeof (base = _this496.resource).newResource === "function" ? base.newResource() : void 0).toBeFalsy();
              });
            });
          });
        });
        describe('#save', function () {
          describe('in general', function () {
            beforeEach(function () {
              var _this497 = this;

              MyLibrary.Product.last().then(window.onSuccess);
              return this.promise = moxios.wait(function () {
                return moxios.requests.mostRecent().respondWith(JsonApiResponses.Product.all.success).then(function () {
                  return _this497.resource = window.onSuccess.calls.mostRecent().args[0];
                });
              });
            });
            return it('executes the completion callback', function () {
              var _this498 = this;

              return this.promise.then(function () {
                _this498.resource.save(window.onCompletion);

                return moxios.wait(function () {
                  return moxios.requests.mostRecent().respondWith(JsonApiResponses.Product.save.success);
                });
              }).then(function () {
                return expect(window.onCompletion).toHaveBeenCalled();
              });
            });
          });
          describe('when resource is persisted', function () {
            beforeEach(function () {
              var _this499 = this;

              MyLibrary.Product.last().then(window.onSuccess);
              return this.promise = moxios.wait(function () {
                return moxios.requests.mostRecent().respondWith(JsonApiResponses.Product.all.success).then(function () {
                  return _this499.resource = window.onSuccess.calls.mostRecent().args[0];
                });
              });
            });
            return it('makes a PATCH request', function () {
              var _this500 = this;

              return this.promise.then(function () {
                _this500.resource.save();

                return moxios.wait(function () {
                  return expect(moxios.requests.mostRecent().method).toEqual('patch');
                });
              });
            });
          });
          describe('when resource is not persisted', function () {
            beforeEach(function () {
              return this.resource = MyLibrary.Product.build();
            });
            return it('makes a POST request', function () {
              this.resource.save();
              return moxios.wait(function () {
                return expect(moxios.requests.mostRecent().method).toEqual('post');
              });
            });
          });
          describe('when resource is valid', function () {
            beforeEach(function () {
              var _this501 = this;

              MyLibrary.Product.last().then(window.onSuccess);
              this.promise = moxios.wait(function () {
                return moxios.requests.mostRecent().respondWith(JsonApiResponses.Product.all.success).then(function () {
                  return _this501.resource = window.onSuccess.calls.mostRecent().args[0];
                });
              });
              return this.promise2 = this.promise.then(function () {
                _this501.resource.title = 'Another title';

                _this501.resource.save();

                return moxios.wait(function () {
                  return moxios.requests.mostRecent().respondWith(JsonApiResponses.Product.save.success);
                });
              });
            });
            it('returns the resource with saved attributes', function () {
              var _this502 = this;

              return this.promise2.then(function () {
                return expect(_this502.resource.title).toEqual('Another title');
              });
            });
            return it('returns true for valid()', function () {
              var _this503 = this;

              return this.promise2.then(function () {
                return expect(_this503.resource.valid()).toBeTruthy();
              });
            });
          });
          return describe('when resource is invalid', function () {
            beforeEach(function () {
              var _this504 = this;

              MyLibrary.Product.last().then(window.onSuccess);
              this.promise = moxios.wait(function () {
                return moxios.requests.mostRecent().respondWith(JsonApiResponses.Product.all.success).then(function () {
                  return _this504.resource = window.onSuccess.calls.mostRecent().args[0];
                });
              });
              return this.promise2 = this.promise.then(function () {
                _this504.resource.title = '';

                _this504.resource.save();

                return moxios.wait(function () {
                  return moxios.requests.mostRecent().respondWith(JsonApiResponses.Product.save.failure);
                });
              });
            });
            it('returns a resource with errors', function () {
              var _this505 = this;

              return this.promise2.catch(function () {
                var base;
                return expect(typeof (base = _this505.resource.errors()).empty === "function" ? base.empty() : void 0).toBeFalsy();
              });
            });
            return it('returns false for valid?()', function () {
              var _this506 = this;

              return this.promise2.catch(function () {
                var base;
                return expect(typeof (base = _this506.resource).valid === "function" ? base.valid() : void 0).toBeFalsy();
              });
            });
          });
        });
        describe('#update', function () {
          describe('in general', function () {
            beforeEach(function () {
              var _this507 = this;

              MyLibrary.Product.last().then(window.onSuccess);
              return this.promise = moxios.wait(function () {
                return moxios.requests.mostRecent().respondWith(JsonApiResponses.Product.all.success).then(function () {
                  return _this507.resource = window.onSuccess.calls.mostRecent().args[0];
                });
              });
            });
            return it('executes the completion callback', function () {
              var _this508 = this;

              return this.promise.then(function () {
                _this508.resource.update({
                  title: 'Another title'
                }, window.onCompletion);

                return moxios.wait(function () {
                  return moxios.requests.mostRecent().respondWith(JsonApiResponses.Product.save.success);
                });
              }).then(function () {
                return expect(window.onCompletion).toHaveBeenCalled();
              });
            });
          });
          describe('when resource is persisted', function () {
            beforeEach(function () {
              var _this509 = this;

              MyLibrary.Product.last().then(window.onSuccess);
              return this.promise = moxios.wait(function () {
                return moxios.requests.mostRecent().respondWith(JsonApiResponses.Product.all.success).then(function () {
                  return _this509.resource = window.onSuccess.calls.mostRecent().args[0];
                });
              });
            });
            return it('makes a PATCH request', function () {
              var _this510 = this;

              return this.promise.then(function () {
                _this510.resource.update({
                  title: 'Another title'
                });

                return moxios.wait(function () {
                  return expect(moxios.requests.mostRecent().method).toEqual('patch');
                });
              });
            });
          });
          describe('when resource is not persisted', function () {
            beforeEach(function () {
              return this.resource = MyLibrary.Product.build({
                title: 'A product title',
                description: 'A product description'
              });
            });
            return it('makes a POST request', function () {
              this.resource.update({
                title: 'Another title'
              });
              return moxios.wait(function () {
                return expect(moxios.requests.mostRecent().method).toEqual('post');
              });
            });
          });
          describe('when resource is valid', function () {
            beforeEach(function () {
              var _this511 = this;

              MyLibrary.Product.last().then(window.onSuccess);
              this.promise = moxios.wait(function () {
                return moxios.requests.mostRecent().respondWith(JsonApiResponses.Product.all.success).then(function () {
                  return _this511.resource = window.onSuccess.calls.mostRecent().args[0];
                });
              });
              return this.promise2 = this.promise.then(function () {
                _this511.resource.update({
                  title: 'Another title'
                }, window.onCompletion);

                return moxios.wait(function () {
                  return moxios.requests.mostRecent().respondWith(JsonApiResponses.Product.save.success);
                });
              });
            });
            return it('updates the resource\'s attributes', function () {
              var _this512 = this;

              return this.promise2.then(function () {
                return expect(_this512.resource.title).toEqual('Another title');
              });
            });
          });
          return describe('when resource is invalid', function () {
            beforeEach(function () {
              var _this513 = this;

              MyLibrary.Product.last().then(window.onSuccess);
              this.promise = moxios.wait(function () {
                return moxios.requests.mostRecent().respondWith(JsonApiResponses.Product.all.success).then(function () {
                  return _this513.resource = window.onSuccess.calls.mostRecent().args[0];
                });
              });
              return this.promise2 = this.promise.then(function () {
                _this513.resource.update({
                  title: '',
                  description: ''
                }, window.onCompletion);

                return moxios.wait(function () {
                  return moxios.requests.mostRecent().respondWith(JsonApiResponses.Product.save.failure);
                });
              });
            });
            it('does not update the attributes', function () {
              var _this514 = this;

              return this.promise2.catch(function () {
                return expect(_this514.resource.title).not.toEqual('');
              });
            });
            return it('returns a resource with errors', function () {
              var _this515 = this;

              return this.promise2.catch(function () {
                var base;
                return expect(typeof (base = _this515.resource.errors()).empty === "function" ? base.empty() : void 0).toBeFalsy();
              });
            });
          });
        });
        return describe('#destroy', function () {
          beforeEach(function () {
            var _this516 = this;

            MyLibrary.Product.last().then(window.onSuccess);
            this.promise = moxios.wait(function () {
              return moxios.requests.mostRecent().respondWith(JsonApiResponses.Product.all.success).then(function () {
                return _this516.resource = window.onSuccess.calls.mostRecent().args[0];
              });
            });
            return this.promise2 = this.promise.then(function () {
              _this516.resource.destroy().then(window.onSuccess).catch(window.onFailure);

              return _this516.resource;
            });
          });
          describe('in general', function () {
            return it('makes a DELETE request', function () {
              return this.promise2.then(function () {
                return expect(moxios.requests.mostRecent().method).toEqual('delete');
              });
            });
          });
          describe('on success', function () {
            beforeEach(function () {
              return this.promise3 = this.promise2.then(function () {
                return moxios.requests.mostRecent().respondWith(JsonApiResponses.Product.destroy.success);
              });
            });
            it('unpersists the resource', function () {
              var _this517 = this;

              return this.promise3.then(function () {
                var base;
                return expect(typeof (base = _this517.resource).persisted === "function" ? base.persisted() : void 0).toBeFalsy();
              });
            });
            it('executes the success callback', function () {
              return this.promise3.then(function () {
                return expect(window.onSuccess).toHaveBeenCalled();
              });
            });
            return it('returns the destroyed resource to the callback', function () {
              var _this518 = this;

              return this.promise3.then(function () {
                return expect(window.onSuccess.calls.mostRecent().args[0]).toEqual(_this518.resource);
              });
            });
          });
          return describe('on failure', function () {
            beforeEach(function () {
              return this.promise3 = this.promise2.then(function () {
                return moxios.requests.mostRecent().respondWith(JsonApiResponses.Product.destroy.failure);
              });
            });
            it('does not unpersisted the resource', function () {
              var _this519 = this;

              return this.promise3.catch(function () {
                var base;
                return expect(typeof (base = _this519.resource).persisted === "function" ? base.persisted() : void 0).toBeTruthy();
              });
            });
            it('executes the failure callback', function () {
              return this.promise3.catch(function () {
                return expect(window.onFailure).toHaveBeenCalled();
              });
            });
            return it('returns an error to the callback', function () {
              return this.promise3.catch(function () {
                var errors;
                errors = window.onFailure.calls.mostRecent().args[0];
                return expect(errors.first().code).toEqual('forbidden');
              });
            });
          });
        });
      });
    });
  }).call(undefined);
  (function () {
    describe('ActiveResource', function () {
      describe('::Reflection', function () {
        describe('#reflections', function () {
          beforeEach(function () {
            return this.reflections = MyLibrary.Product.reflections();
          });
          it('returns a reflections object', function () {
            return expect(_.keys(this.reflections)).toContain('orders', 'merchant');
          });
          return it('returns a reflections object', function () {
            var base;
            return expect(typeof (base = _.values(this.reflections)[0]).isA === "function" ? base.isA(ActiveResource.prototype.Reflection.prototype.AbstractReflection) : void 0).toBeTruthy();
          });
        });
        describe('#reflectOnAllAssociations', function () {
          beforeEach(function () {
            return this.reflections = MyLibrary.Order.reflectOnAllAssociations();
          });
          it('returns a collection', function () {
            var base;
            return expect(typeof (base = this.reflections).isA === "function" ? base.isA(ActiveResource.prototype.Collection) : void 0).toBeTruthy();
          });
          it('returns reflections', function () {
            var base;
            return expect(typeof (base = this.reflections.first()).isA === "function" ? base.isA(ActiveResource.prototype.Reflection.prototype.AbstractReflection) : void 0).toBeTruthy();
          });
          return describe('when a macro is provided', function () {
            beforeEach(function () {
              return this.reflections = MyLibrary.Order.reflectOnAllAssociations('hasMany');
            });
            return it('scopes to reflections of that macro', function () {
              return expect(this.reflections.size()).toEqual(3);
            });
          });
        });
        describe('#reflectOnAssociation', function () {
          return it('gets the specific reflection', function () {
            var base;
            return expect(typeof (base = MyLibrary.Product.reflectOnAssociation('orders')).isA === "function" ? base.isA(ActiveResource.prototype.Reflection.prototype.HasManyReflection) : void 0).toBeTruthy();
          });
        });
        describe('#reflectOnAllAutosaveAssociations', function () {
          beforeEach(function () {
            return MyLibrary.Customer = function () {
              var Customer =
              /*#__PURE__*/
              function (_MyLibrary$Base25) {
                _inherits(Customer, _MyLibrary$Base25);

                function Customer() {
                  _classCallCheck(this, Customer);

                  return _possibleConstructorReturn(this, _getPrototypeOf(Customer).apply(this, arguments));
                }

                return Customer;
              }(MyLibrary.Base);

              
              Customer.hasMany('orders', {
                autosave: true
              });
              return Customer;
            }.call(this);
          });
          return it('gets all autosave reflections', function () {
            return expect(MyLibrary.Customer.reflectOnAllAutosaveAssociations().first().options['autosave']).toBeTruthy();
          });
        });
        return describe('various reflection options', function () {
          return describe('autosave: true', function () {
            beforeEach(function () {
              return MyLibrary.Customer = function () {
                var Customer =
                /*#__PURE__*/
                function (_MyLibrary$Base26) {
                  _inherits(Customer, _MyLibrary$Base26);

                  function Customer() {
                    _classCallCheck(this, Customer);

                    return _possibleConstructorReturn(this, _getPrototypeOf(Customer).apply(this, arguments));
                  }

                  return Customer;
                }(MyLibrary.Base);

                
                Customer.hasMany('orders', {
                  autosave: true
                });
                return Customer;
              }.call(this);
            });
            return it('adds the association to class level queryParams', function () {
              return expect(MyLibrary.Customer.queryParams()['include']).toContain('orders');
            });
          });
        });
      });
      return describe('building reflections using ::Associations', function () {
        describe('.hasMany', function () {
          beforeEach(function () {
            return MyLibrary.Customer = function () {
              var Customer =
              /*#__PURE__*/
              function (_MyLibrary$Base27) {
                _inherits(Customer, _MyLibrary$Base27);

                function Customer() {
                  _classCallCheck(this, Customer);

                  return _possibleConstructorReturn(this, _getPrototypeOf(Customer).apply(this, arguments));
                }

                return Customer;
              }(MyLibrary.Base);

              
              Customer.hasMany('orders');
              return Customer;
            }.call(this);
          });
          it('builds a hasMany reflection', function () {
            var reflection;
            reflection = MyLibrary.Customer.reflectOnAssociation('orders');
            return expect(typeof reflection.isA === "function" ? reflection.isA(ActiveResource.prototype.Reflection.prototype.HasManyReflection) : void 0).toBeTruthy();
          });
          it('builds an accessor method into the class prototype', function () {
            return expect(MyLibrary.Customer.prototype['orders']).toBeDefined();
          });
          return it('builds a loader method into the class prototype', function () {
            return expect(MyLibrary.Customer.prototype['loadOrders']).toBeDefined();
          });
        });
        describe('.hasOne', function () {
          beforeEach(function () {}); //class MyLibrary.GiftCard extends MyLibrary.Base
          //@hasOne 'order'

          it('builds a hasOne reflection', function () {
            var reflection;
            reflection = MyLibrary.GiftCard.reflectOnAssociation('order');
            return expect(typeof reflection.isA === "function" ? reflection.isA(ActiveResource.prototype.Reflection.prototype.HasOneReflection) : void 0).toBeTruthy();
          });
          it('builds an accessor method into the class prototype', function () {
            return expect(MyLibrary.GiftCard.prototype['order']).toBeDefined();
          });
          it('builds a loader method into the class prototype', function () {
            return expect(MyLibrary.GiftCard.prototype['loadOrder']).toBeDefined();
          });
          it('builds an assigner method into the class prototype', function () {
            return expect(MyLibrary.GiftCard.prototype['assignOrder']).toBeDefined();
          });
          it('builds an updater method into the class prototype', function () {
            return expect(MyLibrary.GiftCard.prototype['updateOrder']).toBeDefined();
          });
          it('builds a builder method into the class prototype', function () {
            return expect(MyLibrary.GiftCard.prototype['buildOrder']).toBeDefined();
          });
          return it('builds a creator method into the class prototype', function () {
            return expect(MyLibrary.GiftCard.prototype['createOrder']).toBeDefined();
          });
        });
        return describe('.belongsTo', function () {
          beforeEach(function () {
            return MyLibrary.AttributeValue = function () {
              var AttributeValue =
              /*#__PURE__*/
              function (_MyLibrary$Base28) {
                _inherits(AttributeValue, _MyLibrary$Base28);

                function AttributeValue() {
                  _classCallCheck(this, AttributeValue);

                  return _possibleConstructorReturn(this, _getPrototypeOf(AttributeValue).apply(this, arguments));
                }

                return AttributeValue;
              }(MyLibrary.Base);

              
              AttributeValue.belongsTo('order');
              return AttributeValue;
            }.call(this);
          });
          it('builds a belongsTo reflection', function () {
            var reflection;
            reflection = MyLibrary.AttributeValue.reflectOnAssociation('order');
            return expect(typeof reflection.isA === "function" ? reflection.isA(ActiveResource.prototype.Reflection.prototype.BelongsToReflection) : void 0).toBeTruthy();
          });
          it('builds an accessor method into the class prototype', function () {
            return expect(MyLibrary.AttributeValue.prototype['order']).toBeDefined();
          });
          it('builds a loader method into the class prototype', function () {
            return expect(MyLibrary.AttributeValue.prototype['loadOrder']).toBeDefined();
          });
          it('builds an assigner method into the class prototype', function () {
            return expect(MyLibrary.AttributeValue.prototype['assignOrder']).toBeDefined();
          });
          it('builds an updater method into the class prototype', function () {
            return expect(MyLibrary.AttributeValue.prototype['updateOrder']).toBeDefined();
          });
          it('builds a builder method into the class prototype', function () {
            return expect(MyLibrary.AttributeValue.prototype['buildOrder']).toBeDefined();
          });
          return it('builds a creator method into the class prototype', function () {
            return expect(MyLibrary.AttributeValue.prototype['createOrder']).toBeDefined();
          });
        });
      });
    });
  }).call(undefined);
  (function () {
    describe('ActiveResource', function () {
      beforeEach(function () {
        moxios.install(MyLibrary.interface.axios);
        window.onSuccess = jasmine.createSpy('onSuccess');
        window.onFailure = jasmine.createSpy('onFailure');
        return window.onCompletion = jasmine.createSpy('onCompletion');
      });
      afterEach(function () {
        return moxios.uninstall();
      });
      return describe('::Relation', function () {
        describe('when calling Relation extension methods on Base', function () {
          return it('creates a new Relation', function () {
            return expect(MyLibrary.Product.where({
              token: 'jshf8e'
            }).klass()).toEqual(ActiveResource.prototype.Relation);
          });
        });
        describe('when calling custom method of Base on Relation', function () {
          return it('calls method', function () {
            return expect(MyLibrary.Product.where({
              token: 'jshf8e'
            }).customFind()).toEqual('found');
          });
        });
        describe('#links()', function () {
          return it('returns the correct links', function () {
            return expect(MyLibrary.Product.where({
              token: 'jshf8e'
            }).links()).toEqual({
              related: 'https://example.com/api/v1/products/'
            });
          });
        });
        describe('#all()', function () {
          beforeEach(function () {
            var _this520 = this;

            MyLibrary.Product.all().then(window.onSuccess);
            return this.promise = moxios.wait(function () {
              return moxios.requests.mostRecent().respondWith(JsonApiResponses.Product.all.success).then(function () {
                return _this520.result = window.onSuccess.calls.mostRecent().args[0];
              });
            });
          });
          it('makes a call to retrieve all resources', function () {
            return this.promise.then(function () {
              return expect(moxios.requests.mostRecent().url).toEqual(MyLibrary.Product.links()['related']);
            });
          });
          return it('returns a collection of the type requested', function () {
            var _this521 = this;

            return this.promise.then(function () {
              var base;
              return expect(typeof (base = _this521.result).isA === "function" ? base.isA(ActiveResource.prototype.Collection) : void 0).toBeTruthy();
            });
          });
        });
        describe('#each()', function () {
          beforeEach(function () {
            var _this522 = this;

            this.i = 0;
            MyLibrary.Product.each(function (p) {
              return _this522.i += 1;
            });
            return this.promise = moxios.wait(function () {
              _this522.response = JsonApiResponses.Product.all.success;
              return moxios.requests.mostRecent().respondWith(_this522.response);
            });
          });
          it('makes a call to retrieve all resources', function () {
            return this.promise.then(function () {
              return expect(moxios.requests.mostRecent().url).toEqual(MyLibrary.Product.links()['related']);
            });
          });
          return it('iterates over each resource returned', function () {
            var _this523 = this;

            return this.promise.then(function () {
              return expect(_this523.i).toEqual(_this523.response.response.data.length);
            });
          });
        });
        describe('#find()', function () {
          beforeEach(function () {
            var _this524 = this;

            MyLibrary.Product.find(1).then(window.onSuccess);
            return this.promise = moxios.wait(function () {
              return moxios.requests.mostRecent().respondWith(JsonApiResponses.Product.find.success).then(function () {
                return _this524.result = window.onSuccess.calls.mostRecent().args[0];
              });
            });
          });
          it('makes a call to retrieve a resource', function () {
            return this.promise.then(function () {
              return expect(moxios.requests.mostRecent().url).toEqual(MyLibrary.Product.links()['related'] + '1/');
            });
          });
          return it('returns a resource of the type requested', function () {
            var _this525 = this;

            return this.promise.then(function () {
              var base;
              return expect(typeof (base = _this525.result).isA === "function" ? base.isA(MyLibrary.Product) : void 0).toBeTruthy();
            });
          });
        });
        describe('#findBy()', function () {
          beforeEach(function () {
            var _this526 = this;

            MyLibrary.Product.findBy({
              token: 'jshf8e'
            }).then(window.onSuccess);
            return this.promise = moxios.wait(function () {
              return moxios.requests.mostRecent().respondWith(JsonApiResponses.Product.all.success).then(function () {
                return _this526.result = window.onSuccess.calls.mostRecent().args[0];
              });
            });
          });
          it('makes a call to retrieve filtered resources', function () {
            var _this527 = this;

            return this.promise.then(function () {
              _this527.paramStr = requestParams(moxios.requests.mostRecent());
              return expect(_this527.paramStr).toContain('filter[token]=jshf8e');
            });
          });
          return it('returns a resource of the type requested', function () {
            var _this528 = this;

            return this.promise.then(function () {
              var base;
              return expect(typeof (base = _this528.result).isA === "function" ? base.isA(MyLibrary.Product) : void 0).toBeTruthy();
            });
          });
        });
        describe('#first()', function () {
          beforeEach(function () {
            var _this529 = this;

            MyLibrary.Product.first().then(window.onSuccess);
            return this.promise = moxios.wait(function () {
              return moxios.requests.mostRecent().respondWith(JsonApiResponses.Product.all.success).then(function () {
                return _this529.result = window.onSuccess.calls.mostRecent().args[0];
              });
            });
          });
          it('makes a call to retrieve a single resource via index', function () {
            var _this530 = this;

            return this.promise.then(function () {
              _this530.paramStr = requestParams(moxios.requests.mostRecent());
              return expect(_this530.paramStr).toContain('limit=1');
            });
          });
          return it('returns a resource of the type requested', function () {
            var _this531 = this;

            return this.promise.then(function () {
              var base;
              return expect(typeof (base = _this531.result).isA === "function" ? base.isA(MyLibrary.Product) : void 0).toBeTruthy();
            });
          });
        });
        describe('#last()', function () {
          beforeEach(function () {
            var _this532 = this;

            MyLibrary.Product.last().then(window.onSuccess);
            return this.promise = moxios.wait(function () {
              return moxios.requests.mostRecent().respondWith(JsonApiResponses.Product.all.success).then(function () {
                return _this532.result = window.onSuccess.calls.mostRecent().args[0];
              });
            });
          });
          it('makes a call to retrieve a single resource starting from the back, via index', function () {
            var _this533 = this;

            return this.promise.then(function () {
              _this533.paramStr = requestParams(moxios.requests.mostRecent());
              return expect(_this533.paramStr).toContain('limit=1&offset=-1');
            });
          });
          return it('returns a resource of the type requested', function () {
            var _this534 = this;

            return this.promise.then(function () {
              var base;
              return expect(typeof (base = _this534.result).isA === "function" ? base.isA(MyLibrary.Product) : void 0).toBeTruthy();
            });
          });
        });
        describe('#where()', function () {
          it('adds filters to a query', function () {
            var _this535 = this;

            MyLibrary.Product.where({
              token: 'jshf8e'
            }).all();
            return moxios.wait(function () {
              _this535.paramStr = requestParams(moxios.requests.mostRecent());
              return expect(_this535.paramStr).toContain('filter[token]=jshf8e');
            });
          });
          it('merges filters', function () {
            var _this536 = this;

            MyLibrary.Product.where({
              token: 'jshf8e'
            }).where({
              another: 'param'
            }).all();
            return moxios.wait(function () {
              _this536.paramStr = requestParams(moxios.requests.mostRecent());
              return expect(_this536.paramStr).toContain('filter[token]=jshf8e&filter[another]=param');
            });
          });
          describe('when value is null', function () {
            return it('sets filter to null', function () {
              var _this537 = this;

              MyLibrary.OrderItem.where({
                order: null
              }).all();
              return moxios.wait(function () {
                _this537.paramStr = requestParams(moxios.requests.mostRecent());
                return expect(_this537.paramStr).toContain('filter[order]=%00');
              });
            });
          });
          describe('when value is resource', function () {
            return it('adds resource primary key as value', function () {
              var _this538 = this;

              MyLibrary.OrderItem.where({
                order: MyLibrary.Order.build({
                  id: '5'
                })
              }).all();
              return moxios.wait(function () {
                _this538.paramStr = requestParams(moxios.requests.mostRecent());
                return expect(_this538.paramStr).toContain('filter[order]=5');
              });
            });
          });
          return describe('when value is array of resources', function () {
            return it('adds resource primary key as value', function () {
              var _this539 = this;

              MyLibrary.OrderItem.where({
                order: [MyLibrary.Order.build({
                  id: '5'
                }), MyLibrary.Order.build({
                  id: '6'
                })]
              }).all();
              return moxios.wait(function () {
                _this539.paramStr = requestParams(moxios.requests.mostRecent());
                return expect(_this539.paramStr).toContain('filter[order]=5,6');
              });
            });
          });
        });
        describe('#order()', function () {
          it('adds sort params to a query', function () {
            var _this540 = this;

            MyLibrary.Product.order({
              createdAt: 'asc'
            }).all();
            return moxios.wait(function () {
              _this540.paramStr = requestParams(moxios.requests.mostRecent());
              return expect(_this540.paramStr).toContain('sort=created_at');
            });
          });
          return it('merges sorts', function () {
            var _this541 = this;

            MyLibrary.Product.order({
              createdAt: 'asc'
            }).order({
              updatedAt: 'desc'
            }).all();
            return moxios.wait(function () {
              _this541.paramStr = requestParams(moxios.requests.mostRecent());
              return expect(_this541.paramStr).toContain('sort=created_at,-updated_at');
            });
          });
        });
        describe('#select()', function () {
          it('determines the root model to apply fields to', function () {
            var _this542 = this;

            MyLibrary.Product.select('id', 'createdAt').all();
            return moxios.wait(function () {
              _this542.paramStr = requestParams(moxios.requests.mostRecent());
              return expect(_this542.paramStr).toContain('fields[products]=id,created_at');
            });
          });
          it('determines the model to apply nested fields to', function () {
            var _this543 = this;

            MyLibrary.Product.select('id', {
              orders: 'price'
            }).all();
            return moxios.wait(function () {
              _this543.paramStr = requestParams(moxios.requests.mostRecent());
              return expect(_this543.paramStr).toContain('fields[products]=id&fields[orders]=price');
            });
          });
          it('underscores class names', function () {
            var _this544 = this;

            MyLibrary.Product.select({
              timeSlots: 'startsAt'
            }).all();
            return moxios.wait(function () {
              _this544.paramStr = requestParams(moxios.requests.mostRecent());
              return expect(_this544.paramStr).toContain('fields[time_slots]=starts_at');
            });
          });
          return it('merges fields', function () {
            var _this545 = this;

            MyLibrary.Product.select('id', 'createdAt').select({
              orders: 'price'
            }).all();
            return moxios.wait(function () {
              _this545.paramStr = requestParams(moxios.requests.mostRecent());
              return expect(_this545.paramStr).toContain('fields[products]=id,created_at&fields[orders]=price');
            });
          });
        });
        describe('#includes()', function () {
          it('adds root level includes', function () {
            var _this546 = this;

            MyLibrary.Product.includes('merchant', 'attributeValues').all();
            return moxios.wait(function () {
              _this546.paramStr = requestParams(moxios.requests.mostRecent());
              return expect(_this546.paramStr).toContain('include=merchant,attribute_values');
            });
          });
          return it('adds nested includes', function () {
            var _this547 = this;

            MyLibrary.Product.includes('merchant', {
              orders: ['attributeValues', 'giftCards']
            }).all();
            return moxios.wait(function () {
              _this547.paramStr = requestParams(moxios.requests.mostRecent());
              return expect(_this547.paramStr).toContain('include=merchant,orders.attribute_values,orders.gift_cards');
            });
          });
        });
        describe('#page()', function () {
          beforeEach(function () {
            MyLibrary.Product.page(2).all().then(window.onSuccess);
            return this.promise = moxios.wait(function () {
              return true;
            });
          });
          it('adds a page number to the query', function () {
            var _this548 = this;

            return this.promise.then(function () {
              _this548.paramStr = requestParams(moxios.requests.mostRecent());
              return expect(_this548.paramStr).toContain('page[number]=2');
            });
          });
          describe('when no links in response', function () {
            beforeEach(function () {
              var _this549 = this;

              return this.promise2 = this.promise.then(function () {
                return moxios.requests.mostRecent().respondWith(JsonApiResponses.Product.all.success).then(function () {
                  return _this549.resources = window.onSuccess.calls.mostRecent().args[0];
                });
              });
            });
            it('hasNextPage returns false', function () {
              var _this550 = this;

              return this.promise2.then(function () {
                return expect(_this550.resources.hasNextPage()).toBeFalsy();
              });
            });
            it('nextPage returns null', function () {
              var _this551 = this;

              return this.promise2.then(function () {
                return expect(_this551.resources.nextPage()).toBeUndefined();
              });
            });
            it('hasPrevPage returns false', function () {
              var _this552 = this;

              return this.promise2.then(function () {
                return expect(_this552.resources.hasPrevPage()).toBeFalsy();
              });
            });
            return it('prevPage returns null', function () {
              var _this553 = this;

              return this.promise2.then(function () {
                return expect(_this553.resources.prevPage()).toBeUndefined();
              });
            });
          });
          describe('when next link in response', function () {
            beforeEach(function () {
              var _this554 = this;

              return this.promise2 = this.promise.then(function () {
                return moxios.requests.mostRecent().respondWith(JsonApiResponses.Product.all.paginated).then(function () {
                  return _this554.resources = window.onSuccess.calls.mostRecent().args[0];
                });
              });
            });
            it('hasNextPage returns true', function () {
              var _this555 = this;

              return this.promise2.then(function () {
                return expect(_this555.resources.hasNextPage()).toBeTruthy();
              });
            });
            return describe('requesting nextPage', function () {
              beforeEach(function () {
                var _this556 = this;

                return this.promise3 = this.promise2.then(function () {
                  _this556.resources.nextPage().then(window.onSuccess);

                  return moxios.wait(function () {
                    return moxios.requests.mostRecent().respondWith(JsonApiResponses.Product.all.paginated);
                  });
                });
              });
              it('nextPage requests next link', function () {
                return this.promise3.then(function () {
                  return expect(moxios.requests.mostRecent().url).toEqual('https://example.com/api/v1/products?page[number]=3&page[size]=2');
                });
              });
              return describe('requesting same nextPage again', function () {
                beforeEach(function () {
                  var _this557 = this;

                  return this.promise4 = this.promise3.then(function () {
                    _this557.requestCount = moxios.requests.count();
                    return _this557.resources.nextPage();
                  });
                });
                return it('does not request nextPage again', function () {
                  var _this558 = this;

                  return this.promise4.then(function () {
                    return expect(_this558.requestCount).toEqual(moxios.requests.count());
                  });
                });
              });
            });
          });
          return describe('when prev link in response', function () {
            beforeEach(function () {
              var _this559 = this;

              return this.promise2 = this.promise.then(function () {
                return moxios.requests.mostRecent().respondWith(JsonApiResponses.Product.all.paginated).then(function () {
                  return _this559.resources = window.onSuccess.calls.mostRecent().args[0];
                });
              });
            });
            it('hasPrevPage returns true', function () {
              var _this560 = this;

              return this.promise2.then(function () {
                return expect(_this560.resources.hasPrevPage()).toBeTruthy();
              });
            });
            return describe('requesting prevPage', function () {
              beforeEach(function () {
                var _this561 = this;

                return this.promise3 = this.promise2.then(function () {
                  _this561.resources.prevPage().then(window.onSuccess);

                  return moxios.wait(function () {
                    return moxios.requests.mostRecent().respondWith(JsonApiResponses.Product.all.paginated);
                  });
                });
              });
              it('prevPage requests prev link', function () {
                return this.promise3.then(function () {
                  return expect(moxios.requests.mostRecent().url).toEqual('https://example.com/api/v1/products?page[number]=1&page[size]=2');
                });
              });
              return describe('requesting same prevPage again', function () {
                beforeEach(function () {
                  var _this562 = this;

                  return this.promise4 = this.promise3.then(function () {
                    _this562.requestCount = moxios.requests.count();
                    return _this562.resources.prevPage();
                  });
                });
                return it('does not request prevPage again', function () {
                  var _this563 = this;

                  return this.promise4.then(function () {
                    return expect(_this563.requestCount).toEqual(moxios.requests.count());
                  });
                });
              });
            });
          });
        });
        describe('#perPage()', function () {
          return it('adds a page size to the query', function () {
            var _this564 = this;

            MyLibrary.Product.perPage(2).all();
            return moxios.wait(function () {
              _this564.paramStr = requestParams(moxios.requests.mostRecent());
              return expect(_this564.paramStr).toContain('page[size]=2');
            });
          });
        });
        describe('#limit()', function () {
          return it('adds a limit to the query', function () {
            var _this565 = this;

            MyLibrary.Product.limit(2).all();
            return moxios.wait(function () {
              _this565.paramStr = requestParams(moxios.requests.mostRecent());
              return expect(_this565.paramStr).toContain('limit=2');
            });
          });
        });
        describe('#offset()', function () {
          return it('adds an offset to the query', function () {
            var _this566 = this;

            MyLibrary.Product.offset(2).all();
            return moxios.wait(function () {
              _this566.paramStr = requestParams(moxios.requests.mostRecent());
              return expect(_this566.paramStr).toContain('offset=2');
            });
          });
        });
        describe('#build()', function () {
          beforeEach(function () {
            return this.product = MyLibrary.Product.build({
              title: 'A product title'
            });
          });
          it('assigns attributes to the built resource', function () {
            return expect(this.product.title).toEqual('A product title');
          });
          it('builds a resource of Base\'s type', function () {
            var base;
            return expect(typeof (base = this.product).isA === "function" ? base.isA(MyLibrary.Product) : void 0).toBeTruthy();
          });
          return describe('when called from Relation', function () {
            beforeEach(function () {
              return this.product = MyLibrary.Product.where({
                title: 'My title'
              }).build();
            });
            it('builds a resource of Relation\'s base type', function () {
              var base;
              return expect(typeof (base = this.product).isA === "function" ? base.isA(MyLibrary.Product) : void 0).toBeTruthy();
            });
            return it('adds filters to the attributes assigned', function () {
              return expect(this.product.title).toEqual('My title');
            });
          });
        });
        return describe('#create()', function () {
          describe('in general', function () {
            beforeEach(function () {
              var _this567 = this;

              MyLibrary.Product.create({
                title: 'Another title',
                description: 'Another description'
              }, window.onCompletion);
              return this.promise = moxios.wait(function () {
                return moxios.requests.mostRecent().respondWith(JsonApiResponses.Product.save.success).then(function () {
                  return _this567.result = window.onCompletion.calls.mostRecent().args[0];
                });
              });
            });
            it('executes the completion callback', function () {
              return this.promise.then(function () {
                return expect(window.onCompletion).toHaveBeenCalled();
              });
            });
            it('builds a resource of class\'s type', function () {
              var _this568 = this;

              return this.promise.then(function () {
                var base;
                return expect(typeof (base = _this568.result).isA === "function" ? base.isA(MyLibrary.Product) : void 0).toBeTruthy();
              });
            });
            return it('assigns attributes to the created resource', function () {
              var _this569 = this;

              return this.promise.then(function () {
                return expect(_this569.result.title).toEqual('Another title');
              });
            });
          });
          describe('on success', function () {
            beforeEach(function () {
              var _this570 = this;

              MyLibrary.Product.create({
                title: 'Another title',
                description: 'Another description'
              }, window.onCompletion);
              return this.promise = moxios.wait(function () {
                return moxios.requests.mostRecent().respondWith(JsonApiResponses.Product.save.success).then(function () {
                  return _this570.result = window.onCompletion.calls.mostRecent().args[0];
                });
              });
            });
            return it('creates a persisted resource', function () {
              var _this571 = this;

              return this.promise.then(function () {
                return expect(_this571.result.persisted()).toBeTruthy();
              });
            });
          });
          return describe('on failure', function () {
            beforeEach(function () {
              var _this572 = this;

              MyLibrary.Product.create({
                title: '',
                description: ''
              }, window.onCompletion);
              return this.promise = moxios.wait(function () {
                return moxios.requests.mostRecent().respondWith(JsonApiResponses.Product.save.failure).catch(function () {
                  return Promise.reject(_this572.result = window.onCompletion.calls.mostRecent().args[0]);
                });
              });
            });
            it('does not create a persisted resource', function () {
              var _this573 = this;

              return this.promise.catch(function () {
                var base;
                return expect(typeof (base = _this573.result).persisted === "function" ? base.persisted() : void 0).toBeFalsy();
              });
            });
            return it('adds errors', function () {
              var _this574 = this;

              return this.promise.catch(function () {
                var base;
                return expect(typeof (base = _this574.result.errors()).empty === "function" ? base.empty() : void 0).toBeFalsy();
              });
            });
          });
        });
      });
    });
  }).call(undefined);
  (function () {
    describe('ActiveResource', function () {
      beforeEach(function () {
        moxios.install(MyLibrary.interface.axios);
        window.onSuccess = jasmine.createSpy('onSuccess');
        window.onFailure = jasmine.createSpy('onFailure');
        return window.onCompletion = jasmine.createSpy('onCompletion');
      });
      afterEach(function () {
        return moxios.uninstall();
      });
      describe('.createResourceLibrary', function () {
        beforeEach(function () {
          return this.myLibrary = ActiveResource.createResourceLibrary('https://www.example.com', {
            headers: {
              Authorization: 'xxx'
            },
            interface: ActiveResource.Interfaces.JsonApi,
            constantizeScope: window
          });
        });
        it('adds the baseUrl to the library', function () {
          return expect(this.myLibrary.baseUrl).toEqual('https://www.example.com/');
        });
        it('adds the headers to the library', function () {
          return expect(this.myLibrary.headers).toEqual({
            Authorization: 'xxx'
          });
        });
        it('adds the interface to the library', function () {
          return expect(this.myLibrary.interface.constructor).toBe(ActiveResource.Interfaces.JsonApi);
        });
        it('adds the constantizeScope to the library', function () {
          return expect(this.myLibrary.constantizeScope).toEqual(window);
        });
        return describe('when interface not provided', function () {
          beforeEach(function () {
            return this.myLibrary = ActiveResource.createResourceLibrary('https://www.example.com', {
              headers: {
                Authorization: 'xxx'
              }
            });
          });
          return it('uses JsonApi interface', function () {
            return expect(this.myLibrary.interface.constructor).toBe(ActiveResource.prototype.Interfaces.prototype.JsonApi);
          });
        });
      });
      return describe('ResourceLibrary', function () {
        beforeEach(function () {
          this.MyLibrary = ActiveResource.createResourceLibrary('https://www.example2.com', {
            headers: {
              Authorization: 'xxx'
            }
          });
          moxios.install(this.MyLibrary.interface.axios);
          return this.MyLibrary.Product = function () {
            var Product =
            /*#__PURE__*/
            function (_this$MyLibrary$Base) {
              _inherits(Product, _this$MyLibrary$Base);

              function Product() {
                _classCallCheck(this, Product);

                return _possibleConstructorReturn(this, _getPrototypeOf(Product).apply(this, arguments));
              }

              return Product;
            }(this.MyLibrary.Base);

            
            Product.className = 'Product';
            Product.queryName = 'products';
            return Product;
          }.call(this);
        });
        afterEach(function () {
          return moxios.uninstall(this.MyLibrary.interface.axios);
        });
        describe('#constantize', function () {
          it('returns the correct class', function () {
            return expect(this.MyLibrary.constantize('Product')).toEqual(this.MyLibrary.Product);
          });
          describe('when class does not exist', function () {
            beforeEach(function () {
              return this.className = 'ClassThatDoesNotExist';
            });
            return it('throws an error', function () {
              var _this575 = this;

              return expect(function () {
                return _this575.MyLibrary.constantize(_this575.className);
              }).toThrow();
            });
          });
          return describe('when constantizeScope set', function () {
            beforeEach(function () {
              this.MyLibrary.constantizeScope = window;
              return window.Product = function () {
                var Product =
                /*#__PURE__*/
                function (_this$MyLibrary$Base2) {
                  _inherits(Product, _this$MyLibrary$Base2);

                  function Product() {
                    _classCallCheck(this, Product);

                    return _possibleConstructorReturn(this, _getPrototypeOf(Product).apply(this, arguments));
                  }

                  return Product;
                }(this.MyLibrary.Base);

                
                Product.className = 'Product';
                return Product;
              }.call(this);
            });
            afterEach(function () {
              return this.MyLibrary.constantizeScope = null;
            });
            return it('uses the scope', function () {
              return expect(this.MyLibrary.constantize('Product')).toEqual(window.Product);
            });
          });
        });
        describe('#createResource', function () {
          beforeEach(function () {
            var Order;
            return this.Order = this.MyLibrary.createResource(Order =
            /*#__PURE__*/
            function (_this$MyLibrary$Base3) {
              _inherits(Order, _this$MyLibrary$Base3);

              function Order() {
                _classCallCheck(this, Order);

                return _possibleConstructorReturn(this, _getPrototypeOf(Order).apply(this, arguments));
              }

              _createClass(Order, null, [{
                key: "define",
                value: function define() {
                  this.attributes('price');
                  this.belongsTo('product');
                  return this.hasMany('comments');
                }
              }]);

              return Order;
            }(this.MyLibrary.Base));
          });
          it('creates resource class that inherits from Base', function () {
            return expect(this.Order.build().isA(this.MyLibrary.Order)).toBeTruthy();
          });
          it('sets className', function () {
            return expect(this.Order.className).toEqual('Order');
          });
          it('sets queryName', function () {
            return expect(this.Order.queryName).toEqual('orders');
          });
          it('calls define', function () {
            return expect(this.Order.reflections().comments).toBeDefined();
          });
          it('finds constants for other resources', function () {
            return expect(this.Order.build().buildProduct().isA(this.MyLibrary.Product)).toBeTruthy();
          });
          describe('custom className', function () {
            beforeEach(function () {
              var Comment;
              return this.Comment = this.MyLibrary.createResource(Comment = function () {
                var Comment =
                /*#__PURE__*/
                function (_this$MyLibrary$Base4) {
                  _inherits(Comment, _this$MyLibrary$Base4);

                  function Comment() {
                    _classCallCheck(this, Comment);

                    return _possibleConstructorReturn(this, _getPrototypeOf(Comment).apply(this, arguments));
                  }

                  return Comment;
                }(this.MyLibrary.Base);

                
                Comment.className = 'NotComment';
                return Comment;
              }.call(this));
            });
            it('does not override className', function () {
              return expect(this.Comment.className).toEqual('NotComment');
            });
            return it('derives queryName from className', function () {
              return expect(this.Comment.queryName).toEqual('not_comments');
            });
          });
          return describe('custom library constantizeScope', function () {
            beforeEach(function () {
              var GiftCard;
              this.MyLibrary = ActiveResource.createResourceLibrary('https://www.example.com', {
                constantizeScope: window
              });
              return this.GiftCard = this.MyLibrary.createResource(GiftCard =
              /*#__PURE__*/
              function (_this$MyLibrary$Base5) {
                _inherits(GiftCard, _this$MyLibrary$Base5);

                function GiftCard() {
                  _classCallCheck(this, GiftCard);

                  return _possibleConstructorReturn(this, _getPrototypeOf(GiftCard).apply(this, arguments));
                }

                return GiftCard;
              }(this.MyLibrary.Base));
            });
            return it('adds klass to constantizeScope', function () {
              return expect(window.GiftCard).toBeDefined();
            });
          });
        });
        describe('when making a request', function () {
          beforeEach(function () {
            this.MyLibrary.Product.find(1);
            return this.promise = moxios.wait(function () {
              return true;
            });
          });
          it('uses the baseUrl', function () {
            return this.promise.then(function () {
              return expect(moxios.requests.mostRecent().url).toContain('https://www.example2.com/');
            });
          });
          return it('uses the headers', function () {
            return this.promise.then(function () {
              return expect(moxios.requests.mostRecent().headers['Authorization']).toEqual('xxx');
            });
          });
        });
        return describe('when changing headers', function () {
          beforeEach(function () {
            this.MyLibrary.headers = {
              Authorization: 'Basic XYZ'
            };
            moxios.install(this.MyLibrary.interface.axios);
            this.MyLibrary.Product.find(1);
            return this.promise = moxios.wait(function () {
              return moxios.requests.mostRecent().respondWith(JsonApiResponses.Product.find.success);
            });
          });
          afterEach(function () {
            return moxios.uninstall(this.MyLibrary.interface.axios);
          });
          it('uses interface content type', function () {
            return this.promise.then(function () {
              return expect(moxios.requests.mostRecent().headers['Content-Type']).toEqual('application/vnd.api+json');
            });
          });
          return it('uses the new headers', function () {
            return this.promise.then(function () {
              return expect(moxios.requests.mostRecent().headers['Authorization']).toEqual('Basic XYZ');
            });
          });
        });
      });
    });
  }).call(undefined);
  (function () {
    describe('ActiveResource', function () {
      return describe('::Typing', function () {
        beforeEach(function () {
          this.instance = new MyLibrary.Product();
          return this.otherInstance = new MyLibrary.Order();
        });
        describe('#klass()', function () {
          return it('returns the correct class', function () {
            expect(this.instance.klass()).toEqual(MyLibrary.Product);
            return expect(this.otherInstance.klass()).toEqual(MyLibrary.Order);
          });
        });
        return describe('#isA()', function () {
          describe("when argument is the object's class", function () {
            return it('returns true', function () {
              return expect(this.instance.isA(MyLibrary.Product)).toBeTruthy();
            });
          });
          return describe("when argument is not the object's class", function () {
            return it('returns false', function () {
              return expect(this.instance.isA(MyLibrary.Order)).toBeFalsy();
            });
          });
        });
      });
    });
  }).call(undefined);

})));
