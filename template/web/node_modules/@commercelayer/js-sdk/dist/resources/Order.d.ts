import BaseClass from "../utils/BaseClass";
import { LineItemCollection } from './LineItem';
import { SingleRelationship, MultiRelationship } from "../typings/Library";
import { ShipmentCollection } from './Shipment';
import { PaymentMethodCollection } from './PaymentMethod';
import { MarketCollection } from './Market';
import { CustomerCollection } from './Customer';
import { AddressCollection } from './Address';
import { StripePaymentCollection } from './StripePayment';
import { WireTransferCollection } from './WireTransfer';
import { PaypalPaymentCollection } from './PaypalPayment';
import { BraintreePaymentCollection } from './BraintreePayment';
import { AdyenPaymentCollection } from './AdyenPayment';
export declare class OrderCollection extends BaseClass {
    static className: string;
    number: number;
    status: string;
    paymentStatus: string;
    paymentSourceId: string;
    paymentSourceType: string;
    fulfillmentStatus: string;
    guest: boolean;
    editable: boolean;
    placeable: boolean;
    customerEmail: string;
    customerPassword: string;
    languageCode: string;
    currencyCode: string;
    taxIncluded: boolean;
    taxRate: number;
    freightTaxable: boolean;
    countryCode: string;
    shippingCountryCodeLock: string;
    couponCode: string;
    subtotalAmountCents: number;
    subtotalAmountFloat: number;
    formattedSubtotalAmount: string;
    shippingAmountCents: number;
    shippingAmountFloat: number;
    formattedShippingAmount: string;
    paymentMethodAmountCents: number;
    paymentMethodAmountFloat: number;
    formattedPaymentMethodAmount: string;
    discountAmountCents: number;
    discountAmountFloat: number;
    formattedDiscountAmount: string;
    totalTaxAmountCents: number;
    totalTaxAmountFloat: number;
    formattedTotalTaxAmount: string;
    subtotalTaxAmountCents: number;
    subtotalTaxAmountFloat: number;
    formattedSubtotalTaxAmount: string;
    shippingTaxAmountCents: number;
    shippingTaxAmountFloat: number;
    formattedShippingTaxAmount: string;
    paymentMethodTaxAmountCents: number;
    paymentMethodTaxAmountFloat: number;
    formattedPaymentMethodTaxAmount: string;
    discountTaxAmountCents: number;
    discountTaxAmountFloat: number;
    formattedDiscountTaxAmount: string;
    totalAmountCents: number;
    totalAmountFloat: number;
    formattedTotalAmount: string;
    totalTaxableAmountCents: number;
    totalTaxableAmountFloat: number;
    formattedTotalTaxableAmount: string;
    subtotalTaxableAmountCents: number;
    subtotalTaxableAmountFloat: number;
    formattedSubtotalTaxableAmount: string;
    shippingTaxableAmountCents: number;
    shippingTaxableAmountFloat: number;
    formattedShippingTaxableAmount: string;
    paymentMethodTaxableAmountCents: number;
    paymentMethodTaxableAmountFloat: number;
    formattedPaymentMethodTaxableAmount: string;
    discountTaxableAmountCents: number;
    discountTaxableAmountFloat: number;
    formattedDiscountTaxableAmount: string;
    totalAmountWithTaxesCents: number;
    totalAmountWithTaxesFloat: number;
    formattedTotalAmountWithTaxes: string;
    feesAmountCents: number;
    feesAmountFloat: number;
    formattedFeesAmount: string;
    skusCount: string;
    lineItemOptionsCount: number;
    shipmentsCount: number;
    paymentSourceDetails: object;
    token: string;
    cartUrl: string;
    returnUrl: string;
    termsUrl: string;
    privacyUrl: string;
    checkoutUrl: string;
    _place: number;
    _cancel: number;
    _approve: number;
    _capture: number;
    _refund: number;
    _updateTaxes: number;
    _billingAddressCloneId: number;
    _shippingAddressCloneId: number;
    _customerPaymentSourceId: number;
    _shippingAddressSameAsBilling: number;
    _billingAddressSameAsShipping: number;
    _savePaymentSourceToCustomerWallet: number;
    _saveShippingAddressToCustomerAddressBook: number;
    _saveBillingAddressToCustomerAddressBook: number;
    _refresh: number;
    placedAt: Date;
    archivedAt: Date;
    approvedAt: Date;
    cancelledAt: Date;
    paymentUpdatedAt: Date;
    fulfillmentUpdatedAt: Date;
    id: string;
    createdAt: Date;
    updatedAt: Date;
    reference: string;
    referenceOrigin: string;
    metadata: object;
    market: () => SingleRelationship<MarketCollection>;
    customer: () => SingleRelationship<CustomerCollection>;
    shippingAddress: () => SingleRelationship<AddressCollection>;
    paymentSource: () => SingleRelationship<StripePaymentCollection | WireTransferCollection | PaypalPaymentCollection | BraintreePaymentCollection | AdyenPaymentCollection>;
    loadShippingAddress: () => SingleRelationship<AddressCollection>;
    billingAddress: () => SingleRelationship<AddressCollection>;
    paymentMethod: () => SingleRelationship<PaymentMethodCollection>;
    lineItems: () => MultiRelationship<LineItemCollection>;
    availablePaymentMethods: () => MultiRelationship<PaymentMethodCollection>;
    shipments: () => MultiRelationship<ShipmentCollection>;
    static define(): void;
}
declare const Order: import("../typings/Library").BaseResource<OrderCollection>;
export default Order;
