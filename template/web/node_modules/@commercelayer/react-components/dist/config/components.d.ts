/// <reference types="react" />
import PropTypes from 'prop-types';
import { TimeFormat, BaseInputType, GiftCardInputName, LineItemType, BasePriceType, BaseFormatPrice, BaseSelectorType, AddressInputName, AddressCountrySelectName } from "../typings/index";
import { DeliveryLeadTimeField } from '../components/DeliveryLeadTime';
import { StockTransferFieldType } from "../components/StockTransferField";
declare const components: {
    Address: {
        permittedChildren: string[];
        displayName: string;
        propTypes: {
            children: PropTypes.Validator<string | number | boolean | {} | import("react").ReactElement<any, string | ((props: any) => import("react").ReactElement<any, any> | null) | (new (props: any) => import("react").Component<any, any, any>)> | import("react").ReactNodeArray | import("react").ReactPortal>;
        };
    };
    AddressCountrySelector: {
        displayName: string;
        propTypes: {
            children: PropTypes.Requireable<(...args: any[]) => any>;
            placeholder: PropTypes.Requireable<PropTypes.InferProps<{
                label: PropTypes.Validator<string>;
                value: PropTypes.Validator<import("react").ReactText>;
            }>>;
            value: PropTypes.Requireable<string>;
            name: PropTypes.Validator<AddressCountrySelectName>;
            required: PropTypes.Requireable<boolean>;
        };
        defaultProps: {
            required: boolean;
        };
    };
    AddressField: {
        displayName: string;
        propTypes: {
            children: PropTypes.Requireable<(...args: any[]) => any>;
        };
    };
    AddressInput: {
        displayName: string;
        propTypes: {
            children: PropTypes.Requireable<(...args: any[]) => any>;
            name: PropTypes.Validator<AddressInputName>;
            type: PropTypes.Validator<BaseInputType>;
            placeholder: PropTypes.Requireable<string>;
            disabled: PropTypes.Requireable<boolean>;
            required: PropTypes.Requireable<boolean>;
        };
        defaultProps: {
            required: boolean;
        };
    };
    AddToCartButton: {
        displayName: string;
        propTypes: {
            children: PropTypes.Requireable<(...args: any[]) => any>;
            label: PropTypes.Requireable<string>;
            skuCode: PropTypes.Requireable<string>;
            disabled: PropTypes.Requireable<boolean>;
            lineItem: PropTypes.Requireable<PropTypes.InferProps<{
                name: PropTypes.Validator<string>;
                imageUrl: PropTypes.Requireable<string>;
            }>>;
        };
        defaultProps: {
            label: string;
        };
    };
    AddressesContainer: {
        displayName: string;
        permittedChildren: string[];
        propTypes: {
            children: PropTypes.Validator<string | number | boolean | {} | import("react").ReactElement<any, string | ((props: any) => import("react").ReactElement<any, any> | null) | (new (props: any) => import("react").Component<any, any, any>)> | import("react").ReactNodeArray | import("react").ReactPortal>;
            shipToDifferentAddress: PropTypes.Requireable<boolean>;
        };
    };
    AvailabilityContainer: {
        displayName: string;
        permittedChildren: string[];
        propTypes: {
            children: PropTypes.Validator<string | number | boolean | {} | import("react").ReactElement<any, string | ((props: any) => import("react").ReactElement<any, any> | null) | (new (props: any) => import("react").Component<any, any, any>)> | import("react").ReactNodeArray | import("react").ReactPortal>;
            skuCode: PropTypes.Requireable<string>;
        };
    };
    AvailabilityTemplate: {
        displayName: string;
        propTypes: {
            timeFormat: PropTypes.Requireable<TimeFormat>;
            showShippingMethodName: PropTypes.Requireable<boolean>;
            children: PropTypes.Requireable<(...args: any[]) => any>;
        };
        defaultProps: {
            timeFormat: string;
            showShippingMethodName: boolean;
        };
    };
    BillingAddressContainer: {
        permittedChildren: string[];
        propTypes: {
            children: PropTypes.Validator<string | number | boolean | {} | import("react").ReactElement<any, string | ((props: any) => import("react").ReactElement<any, any> | null) | (new (props: any) => import("react").Component<any, any, any>)> | import("react").ReactNodeArray | import("react").ReactPortal>;
        };
    };
    BillingAddressForm: {
        permittedChildren: string[];
        propTypes: {
            children: PropTypes.Validator<string | number | boolean | {} | import("react").ReactElement<any, string | ((props: any) => import("react").ReactElement<any, any> | null) | (new (props: any) => import("react").Component<any, any, any>)> | import("react").ReactNodeArray | import("react").ReactPortal>;
        };
    };
    CheckoutLink: {
        displayName: string;
        propTypes: {
            children: PropTypes.Requireable<(...args: any[]) => any>;
            label: PropTypes.Requireable<string>;
        };
        defaultProps: {
            label: string;
        };
    };
    CommerceLayer: {
        permittedChildren: string[];
        propTypes: {
            children: PropTypes.Validator<string | number | boolean | {} | import("react").ReactElement<any, string | ((props: any) => import("react").ReactElement<any, any> | null) | (new (props: any) => import("react").Component<any, any, any>)> | import("react").ReactNodeArray | import("react").ReactPortal>;
            accessToken: PropTypes.Validator<string>;
            endpoint: PropTypes.Validator<string>;
        };
    };
    CustomerContainer: {
        displayName: string;
        permittedChildren: string[];
        propTypes: {
            children: PropTypes.Validator<string | number | boolean | {} | import("react").ReactElement<any, string | ((props: any) => import("react").ReactElement<any, any> | null) | (new (props: any) => import("react").Component<any, any, any>)> | import("react").ReactNodeArray | import("react").ReactPortal>;
            isGuest: PropTypes.Requireable<boolean>;
        };
    };
    CustomerInput: {
        displayName: string;
        propTypes: {
            children: PropTypes.Requireable<(...args: any[]) => any>;
            name: PropTypes.Requireable<string>;
            type: PropTypes.Requireable<string>;
            placeholder: PropTypes.Requireable<string>;
            disabled: PropTypes.Requireable<boolean>;
            required: PropTypes.Requireable<boolean>;
            saveOnBlur: PropTypes.Requireable<boolean>;
        };
        defaultProps: {
            required: boolean;
        };
    };
    DeliveryLeadTime: {
        displayName: string;
        propTypes: {
            type: PropTypes.Validator<DeliveryLeadTimeField>;
            children: PropTypes.Requireable<(...args: any[]) => any>;
        };
    };
    DiscountAmount: {
        displayName: string;
        propTypes: {
            id: PropTypes.Requireable<string>;
            className: PropTypes.Requireable<string>;
            style: PropTypes.Requireable<object>;
            name: PropTypes.Requireable<string>;
            children: PropTypes.Requireable<(...args: any[]) => any>;
            format: PropTypes.Requireable<BaseFormatPrice>;
        };
        defaultProps: {
            format: BaseFormatPrice;
        };
    };
    Errors: {
        displayName: string;
        propTypes: {
            resource: PropTypes.Validator<import("../typings/errors").ResourceErrorType>;
            children: PropTypes.Requireable<(...args: any[]) => any>;
            field: PropTypes.Requireable<string>;
        };
        defaultProps: {
            messages: never[];
            field: string;
        };
    };
    ExternalFunction: {
        displayName: string;
        permittedChildren: string[];
        propTypes: {
            children: PropTypes.Validator<string | number | boolean | {} | import("react").ReactElement<any, string | ((props: any) => import("react").ReactElement<any, any> | null) | (new (props: any) => import("react").Component<any, any, any>)> | import("react").ReactNodeArray | import("react").ReactPortal>;
            url: PropTypes.Validator<string>;
        };
    };
    GiftCard: {
        permittedChildren: string[];
        displayName: string;
        propTypes: {
            children: PropTypes.Validator<string | number | boolean | {} | import("react").ReactElement<any, string | ((props: any) => import("react").ReactElement<any, any> | null) | (new (props: any) => import("react").Component<any, any, any>)> | import("react").ReactNodeArray | import("react").ReactPortal>;
            onSubmit: PropTypes.Requireable<(...args: any[]) => any>;
        };
        defaultProps: {
            onSubmit: undefined;
        };
    };
    GiftCardAmount: {
        displayName: string;
        propTypes: {
            id: PropTypes.Requireable<string>;
            className: PropTypes.Requireable<string>;
            style: PropTypes.Requireable<object>;
            name: PropTypes.Requireable<string>;
            children: PropTypes.Requireable<(...args: any[]) => any>;
            format: PropTypes.Requireable<BaseFormatPrice>;
        };
    };
    GiftCardContainer: {
        permittedChildren: string[];
        displayName: string;
        propTypes: {
            children: PropTypes.Validator<string | number | boolean | {} | import("react").ReactElement<any, string | ((props: any) => import("react").ReactElement<any, any> | null) | (new (props: any) => import("react").Component<any, any, any>)> | import("react").ReactNodeArray | import("react").ReactPortal>;
        };
    };
    GiftCardCurrencySelector: {
        displayName: string;
        propTypes: {
            children: PropTypes.Requireable<(...args: any[]) => any>;
            placeholder: PropTypes.Requireable<PropTypes.InferProps<{
                value: PropTypes.Validator<import("react").ReactText>;
                label: PropTypes.Validator<string>;
            }>>;
            value: PropTypes.Requireable<string>;
            required: PropTypes.Requireable<boolean>;
        };
        defaultProps: {
            required: boolean;
        };
    };
    GiftCardInput: {
        displayName: string;
        propTypes: {
            type: PropTypes.Validator<BaseInputType>;
            name: PropTypes.Validator<GiftCardInputName>;
            children: PropTypes.Requireable<(...args: any[]) => any>;
            placeholder: PropTypes.Requireable<string>;
        };
    };
    ItemContainer: {
        permittedChildren: string[];
        displayName: string;
        propTypes: {
            children: PropTypes.Validator<string | number | boolean | {} | import("react").ReactElement<any, string | ((props: any) => import("react").ReactElement<any, any> | null) | (new (props: any) => import("react").Component<any, any, any>)> | import("react").ReactNodeArray | import("react").ReactPortal>;
            skuCode: PropTypes.Requireable<string>;
            lineItem: PropTypes.Requireable<PropTypes.InferProps<{
                name: PropTypes.Validator<string>;
                imageUrl: PropTypes.Requireable<string>;
            }>>;
        };
    };
    LineItem: {
        permittedChildren: string[];
        displayName: string;
        propTypes: {
            children: PropTypes.Validator<string | number | boolean | {} | import("react").ReactElement<any, string | ((props: any) => import("react").ReactElement<any, any> | null) | (new (props: any) => import("react").Component<any, any, any>)> | import("react").ReactNodeArray | import("react").ReactPortal>;
            type: PropTypes.Requireable<LineItemType>;
        };
        defaultProps: {
            type: string;
        };
    };
    LineItemAmount: {
        displayName: string;
        propTypes: {
            type: PropTypes.Requireable<BasePriceType>;
            id: PropTypes.Requireable<string>;
            className: PropTypes.Requireable<string>;
            style: PropTypes.Requireable<object>;
            name: PropTypes.Requireable<string>;
            children: PropTypes.Requireable<(...args: any[]) => any>;
            format: PropTypes.Requireable<BaseFormatPrice>;
        };
        defaultProps: {
            format: string;
            type: string;
        };
    };
    LineItemImage: {
        displayName: string;
        propTypes: {
            width: PropTypes.Requireable<number>;
            children: PropTypes.Requireable<(...args: any[]) => any>;
        };
    };
    LineItemName: {
        displayName: string;
        propTypes: {
            children: PropTypes.Requireable<(...args: any[]) => any>;
        };
    };
    LineItemOption: {
        displayName: string;
        propTypes: {
            name: PropTypes.Validator<string>;
            children: PropTypes.Requireable<(...args: any[]) => any>;
            valueClassName: PropTypes.Requireable<string>;
            keyClassName: PropTypes.Requireable<string>;
            keyId: PropTypes.Requireable<string>;
            keyStyle: PropTypes.Requireable<object>;
        };
    };
    LineItemOptions: {
        permittedChildren: string[];
        displayName: string;
        propTypes: {
            children: PropTypes.Validator<string | number | boolean | {} | import("react").ReactElement<any, string | ((props: any) => import("react").ReactElement<any, any> | null) | (new (props: any) => import("react").Component<any, any, any>)> | import("react").ReactNodeArray | import("react").ReactPortal>;
            title: PropTypes.Requireable<string>;
            showName: PropTypes.Requireable<boolean>;
            skuOptionId: PropTypes.Validator<string>;
        };
        defaultProps: {
            showName: boolean;
        };
    };
    LineItemQuantity: {
        displayName: string;
        propTypes: {
            children: PropTypes.Requireable<(...args: any[]) => any>;
            max: PropTypes.Requireable<number>;
            disabled: PropTypes.Requireable<boolean>;
            readonly: PropTypes.Requireable<boolean>;
        };
        defaultProps: {
            max: number;
        };
    };
    LineItemRemoveLink: {
        displayName: string;
        propTypes: {
            children: PropTypes.Requireable<(...args: any[]) => any>;
            label: PropTypes.Requireable<string>;
        };
        defaultProps: {
            label: string;
        };
    };
    LineItemsContainer: {
        permittedChildren: string[];
        displayName: string;
        propTypes: {
            children: PropTypes.Validator<string | number | boolean | {} | import("react").ReactElement<any, string | ((props: any) => import("react").ReactElement<any, any> | null) | (new (props: any) => import("react").Component<any, any, any>)> | import("react").ReactNodeArray | import("react").ReactPortal>;
            filters: PropTypes.Requireable<object>;
            loader: PropTypes.Requireable<string | PropTypes.ReactElementLike>;
        };
        defaultProps: {
            filters: {};
            loader: string;
        };
    };
    LineItemsCount: {
        displayName: string;
        propTypes: {
            children: PropTypes.Requireable<(...args: any[]) => any>;
            id: PropTypes.Requireable<string>;
            className: PropTypes.Requireable<string>;
            name: PropTypes.Requireable<string>;
            style: PropTypes.Requireable<object>;
        };
    };
    MetadataInput: {
        displayName: string;
        propTypes: {
            children: PropTypes.Requireable<(...args: any[]) => any>;
            name: PropTypes.Validator<string>;
            type: PropTypes.Validator<BaseInputType>;
            onChange: PropTypes.Requireable<(...args: any[]) => any>;
            placeholder: PropTypes.Requireable<string>;
        };
    };
    OrderContainer: {
        permittedChildren: string[];
        displayName: string;
        propTypes: {
            children: PropTypes.Validator<string | number | boolean | {} | import("react").ReactElement<any, string | ((props: any) => import("react").ReactElement<any, any> | null) | (new (props: any) => import("react").Component<any, any, any>)> | import("react").ReactNodeArray | import("react").ReactPortal>;
            orderId: PropTypes.Requireable<string>;
            metadata: PropTypes.Requireable<{
                [x: string]: string | null | undefined;
            }>;
            attributes: PropTypes.Requireable<object>;
        };
        defaultProps: {
            metadata: {};
        };
    };
    OrderStorage: {
        permittedChildren: string[];
        displayName: string;
        propTypes: {
            children: PropTypes.Validator<string | number | boolean | {} | import("react").ReactElement<any, string | ((props: any) => import("react").ReactElement<any, any> | null) | (new (props: any) => import("react").Component<any, any, any>)> | import("react").ReactNodeArray | import("react").ReactPortal>;
            clearWhenPlaced: PropTypes.Requireable<boolean>;
            persistKey: PropTypes.Validator<string>;
        };
    };
    Price: {
        displayName: string;
        propTypes: {
            children: PropTypes.Requireable<(...args: any[]) => any>;
            compareClassName: PropTypes.Requireable<string>;
            skuCode: PropTypes.Requireable<string>;
            showCompare: PropTypes.Requireable<boolean>;
        };
        defaultProps: {
            skuCode: string;
        };
    };
    PricesContainer: {
        permittedChildren: string[];
        displayName: string;
        propTypes: {
            children: PropTypes.Validator<string | number | boolean | {} | import("react").ReactElement<any, string | ((props: any) => import("react").ReactElement<any, any> | null) | (new (props: any) => import("react").Component<any, any, any>)> | import("react").ReactNodeArray | import("react").ReactPortal>;
            skuCode: PropTypes.Requireable<string>;
            loader: PropTypes.Requireable<string | PropTypes.ReactElementLike>;
            perPage: PropTypes.Requireable<number>;
            filters: PropTypes.Requireable<object>;
        };
        defaultProps: {
            perPage: number;
            filters: {};
            loader: string;
            skuCode: string;
        };
    };
    QuantitySelector: {
        displayName: string;
        propTypes: {
            children: PropTypes.Requireable<(...args: any[]) => any>;
            min: PropTypes.Requireable<number>;
            max: PropTypes.Requireable<number>;
            value: PropTypes.Requireable<string>;
            skuCode: PropTypes.Requireable<string>;
            disabled: PropTypes.Requireable<boolean>;
        };
        defaultProps: {
            min: number;
        };
    };
    SaveAddressesButton: {
        displayName: string;
        propTypes: {
            children: PropTypes.Requireable<(...args: any[]) => any>;
            label: PropTypes.Requireable<string>;
            onClick: PropTypes.Requireable<(...args: any[]) => any>;
            disabled: PropTypes.Requireable<boolean>;
        };
        defaultProps: {
            label: string;
        };
    };
    Shipment: {
        permittedChildren: string[];
        displayName: string;
        propTypes: {
            children: PropTypes.Validator<string | number | boolean | {} | import("react").ReactElement<any, string | ((props: any) => import("react").ReactElement<any, any> | null) | (new (props: any) => import("react").Component<any, any, any>)> | import("react").ReactNodeArray | import("react").ReactPortal>;
        };
    };
    ShipmentsContainer: {
        displayName: string;
        permittedChildren: string[];
        propTypes: {
            children: PropTypes.Validator<string | number | boolean | {} | import("react").ReactElement<any, string | ((props: any) => import("react").ReactElement<any, any> | null) | (new (props: any) => import("react").Component<any, any, any>)> | import("react").ReactNodeArray | import("react").ReactPortal>;
        };
    };
    ShippingAddressContainer: {
        permittedChildren: string[];
        propTypes: {
            children: PropTypes.Validator<string | number | boolean | {} | import("react").ReactElement<any, string | ((props: any) => import("react").ReactElement<any, any> | null) | (new (props: any) => import("react").Component<any, any, any>)> | import("react").ReactNodeArray | import("react").ReactPortal>;
        };
    };
    SaveCustomerButton: {
        displayName: string;
        propTypes: {
            children: PropTypes.Requireable<(...args: any[]) => any>;
            label: PropTypes.Requireable<string>;
            onClick: PropTypes.Requireable<(...args: any[]) => any>;
        };
        defaultProps: {
            label: string;
        };
    };
    ShippingAddressForm: {
        permittedChildren: string[];
        propTypes: {
            children: PropTypes.Validator<string | number | boolean | {} | import("react").ReactElement<any, string | ((props: any) => import("react").ReactElement<any, any> | null) | (new (props: any) => import("react").Component<any, any, any>)> | import("react").ReactNodeArray | import("react").ReactPortal>;
        };
    };
    ShippingAmount: {
        displayName: string;
        propTypes: {
            id: PropTypes.Requireable<string>;
            className: PropTypes.Requireable<string>;
            style: PropTypes.Requireable<object>;
            name: PropTypes.Requireable<string>;
            children: PropTypes.Requireable<(...args: any[]) => any>;
            format: PropTypes.Requireable<BaseFormatPrice>;
        };
    };
    ShippingMethod: {
        permittedChildren: string[];
        displayName: string;
        propTypes: {
            children: PropTypes.Validator<string | number | boolean | {} | import("react").ReactElement<any, string | ((props: any) => import("react").ReactElement<any, any> | null) | (new (props: any) => import("react").Component<any, any, any>)> | import("react").ReactNodeArray | import("react").ReactPortal>;
            readonly: PropTypes.Requireable<boolean>;
        };
    };
    ShippingMethodName: {
        displayName: string;
        propTypes: {
            children: PropTypes.Requireable<(...args: any[]) => any>;
        };
    };
    ShippingMethodRadioButton: {
        displayName: string;
        propTypes: {
            children: PropTypes.Requireable<(...args: any[]) => any>;
        };
    };
    ShippingMethodPrice: {
        displayName: string;
        propTypes: {
            type: PropTypes.Requireable<"amount">;
            id: PropTypes.Requireable<string>;
            className: PropTypes.Requireable<string>;
            style: PropTypes.Requireable<object>;
            name: PropTypes.Requireable<string>;
            children: PropTypes.Requireable<(...args: any[]) => any>;
            format: PropTypes.Requireable<BaseFormatPrice>;
        };
        defaultProps: {
            format: string;
            type: string;
        };
    };
    SkuList: {
        permittedChildren: string[];
        displayName: string;
        propTypes: {
            children: PropTypes.Validator<string | number | boolean | {} | import("react").ReactElement<any, string | ((props: any) => import("react").ReactElement<any, any> | null) | (new (props: any) => import("react").Component<any, any, any>)> | import("react").ReactNodeArray | import("react").ReactPortal>;
            id: PropTypes.Validator<string>;
        };
    };
    SkuListsContainer: {
        permittedChildren: string[];
        displayName: string;
        propTypes: {
            children: PropTypes.Validator<string | number | boolean | {} | import("react").ReactElement<any, string | ((props: any) => import("react").ReactElement<any, any> | null) | (new (props: any) => import("react").Component<any, any, any>)> | import("react").ReactNodeArray | import("react").ReactPortal>;
        };
    };
    SkuOption: {
        permittedChildren: string[];
        displayName: string;
        propTypes: {
            children: PropTypes.Validator<string | number | boolean | {} | import("react").ReactElement<any, string | ((props: any) => import("react").ReactElement<any, any> | null) | (new (props: any) => import("react").Component<any, any, any>)> | import("react").ReactNodeArray | import("react").ReactPortal>;
            id: PropTypes.Validator<string>;
        };
    };
    SkuOptionInput: {
        displayName: string;
        propTypes: {
            children: PropTypes.Requireable<(...args: any[]) => any>;
            name: PropTypes.Validator<string>;
            type: PropTypes.Validator<BaseInputType>;
            onChange: PropTypes.Requireable<(...args: any[]) => any>;
            placeholder: PropTypes.Requireable<string>;
        };
    };
    SkuOptionsContainer: {
        permittedChildren: string[];
        displayName: string;
        propTypes: {
            children: PropTypes.Validator<string | number | boolean | {} | import("react").ReactElement<any, string | ((props: any) => import("react").ReactElement<any, any> | null) | (new (props: any) => import("react").Component<any, any, any>)> | import("react").ReactNodeArray | import("react").ReactPortal>;
            skuCode: PropTypes.Requireable<string>;
        };
    };
    StockTransfer: {
        permittedChildren: string[];
        displayName: string;
        propTypes: {
            children: PropTypes.Validator<string | number | boolean | {} | import("react").ReactElement<any, string | ((props: any) => import("react").ReactElement<any, any> | null) | (new (props: any) => import("react").Component<any, any, any>)> | import("react").ReactNodeArray | import("react").ReactPortal>;
        };
    };
    StockTransferField: {
        displayName: string;
        propTypes: {
            children: PropTypes.Requireable<(...args: any[]) => any>;
            type: PropTypes.Validator<StockTransferFieldType>;
        };
    };
    SubmitButton: {
        displayName: string;
        propTypes: {
            children: PropTypes.Requireable<(...args: any[]) => any>;
            label: PropTypes.Requireable<string>;
        };
        defaultProps: {
            label: string;
        };
    };
    SubTotalAmount: {
        displayName: string;
        propTypes: {
            id: PropTypes.Requireable<string>;
            className: PropTypes.Requireable<string>;
            style: PropTypes.Requireable<object>;
            name: PropTypes.Requireable<string>;
            children: PropTypes.Requireable<(...args: any[]) => any>;
            format: PropTypes.Requireable<BaseFormatPrice>;
        };
        defaultProps: {
            format: BaseFormatPrice;
        };
    };
    TaxesAmount: {
        displayName: string;
        propTypes: {
            id: PropTypes.Requireable<string>;
            className: PropTypes.Requireable<string>;
            style: PropTypes.Requireable<object>;
            name: PropTypes.Requireable<string>;
            children: PropTypes.Requireable<(...args: any[]) => any>;
            format: PropTypes.Requireable<BaseFormatPrice>;
        };
        defaultProps: {
            format: BaseFormatPrice;
        };
    };
    TotalAmount: {
        displayName: string;
        propTypes: {
            id: PropTypes.Requireable<string>;
            className: PropTypes.Requireable<string>;
            style: PropTypes.Requireable<object>;
            name: PropTypes.Requireable<string>;
            children: PropTypes.Requireable<(...args: any[]) => any>;
            format: PropTypes.Requireable<BaseFormatPrice>;
        };
        defaultProps: {
            format: BaseFormatPrice;
        };
    };
    VariantsContainer: {
        permittedChildren: string[];
        displayName: string;
        propTypes: {
            children: PropTypes.Validator<string | number | boolean | {} | import("react").ReactElement<any, string | ((props: any) => import("react").ReactElement<any, any> | null) | (new (props: any) => import("react").Component<any, any, any>)> | import("react").ReactNodeArray | import("react").ReactPortal>;
            skuCode: PropTypes.Requireable<string>;
            filters: PropTypes.Requireable<object>;
        };
        defaultProps: {
            skuCode: string;
            filters: {};
        };
    };
    VariantSelector: {
        displayName: string;
        propTypes: {
            options: PropTypes.Validator<PropTypes.InferProps<{
                label: PropTypes.Validator<string>;
                code: PropTypes.Validator<string>;
                lineItem: PropTypes.Requireable<PropTypes.InferProps<{
                    name: PropTypes.Validator<string>;
                    imageUrl: PropTypes.Requireable<string>;
                }>>;
            }>[]>;
            name: PropTypes.Requireable<string>;
            children: PropTypes.Requireable<(...args: any[]) => any>;
            type: PropTypes.Requireable<BaseSelectorType>;
            loader: PropTypes.Requireable<PropTypes.ReactElementLike>;
            placeholder: PropTypes.Requireable<string>;
            skuCode: PropTypes.Requireable<string>;
        };
        defaultProps: {
            placeholder: string;
            type: BaseSelectorType;
        };
    };
};
export default components;
