import { Dispatch, ReactNode, RefObject } from 'react';
import PropTypes, { InferProps, ReactElementLike } from 'prop-types';
import { BaseError } from './errors';
export declare const BC: {
    id: PropTypes.Requireable<string>;
    className: PropTypes.Requireable<string>;
    style: PropTypes.Requireable<object>;
    name: PropTypes.Requireable<string>;
};
export declare const PTLoader: PropTypes.Requireable<string | PropTypes.ReactElementLike>;
export declare const BaseSelectComponentPropTypes: {
    children: PropTypes.Requireable<(...args: any[]) => any>;
    options: PropTypes.Validator<PropTypes.InferProps<{
        label: PropTypes.Validator<string>;
        value: PropTypes.Validator<string | number>;
        selected: PropTypes.Requireable<boolean>;
    }>[]>;
    placeholder: PropTypes.Requireable<PropTypes.InferProps<{
        label: PropTypes.Validator<string>;
        value: PropTypes.Validator<string | number>;
    }>>;
    value: PropTypes.Requireable<string>;
    name: PropTypes.Validator<string>;
};
export declare type SelectPlaceholder = Option;
declare type BaseSelectChildrenComponentProps = Omit<BaseSelectComponentProps, 'children'>;
declare type Option = {
    label: string;
    value: string | number;
    disabled?: boolean;
};
export interface BaseSelectComponentProps {
    children?: (props: BaseSelectChildrenComponentProps) => ReactNode;
    options: Option[];
    placeholder?: Option;
    value?: string;
    name: string;
}
export declare const BaseInputComponentPropTypes: {
    children: PropTypes.Requireable<(...args: any[]) => any>;
    name: PropTypes.Validator<string>;
    type: PropTypes.Validator<BaseInputType>;
    onChange: PropTypes.Requireable<(...args: any[]) => any>;
    placeholder: PropTypes.Requireable<string>;
};
declare type BaseInputChildrenComponentProps = Omit<BaseInputComponentProps, 'children'> & {
    handleChange: (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => void;
};
export interface BaseInputComponentProps {
    ref?: RefObject<any>;
    children?: (props: BaseInputChildrenComponentProps) => ReactNode;
    name: string;
    onChange?: (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => void;
    placeholder?: string;
}
export declare type LineItemType = 'gift_cards' | 'paymentMethods' | 'promotions' | 'shipments' | 'skus';
export declare type GiftCardInputName = 'balanceCents' | 'balanceMaxCents' | 'singleUse' | 'rechargeable' | 'imageUrl' | 'expiresAt' | 'referenceOrigin' | 'email' | 'firstName' | 'lastName' | 'reference';
export declare type AddressInputName = 'billing_address_city' | 'billing_address_company' | 'billing_address_first_name' | 'billing_address_email' | 'billing_address_last_name' | 'billing_address_line_1' | 'billing_address_line_2' | 'billing_address_phone' | 'billing_address_state_code' | 'billing_address_zip_code' | 'billing_address_save_to_customer_book' | 'shipping_address_city' | 'shipping_address_company' | 'shipping_address_email' | 'shipping_address_first_name' | 'shipping_address_last_name' | 'shipping_address_line_1' | 'shipping_address_line_2' | 'shipping_address_phone' | 'shipping_address_state_code' | 'shipping_address_zip_code' | 'shipping_address_save_to_customer_book';
export declare type AddressCountrySelectName = 'billing_address_country_code' | 'shipping_address_country_code';
export declare type BaseInputType = 'checkbox' | 'date' | 'email' | 'number' | 'tel' | 'text' | 'textarea';
export declare type LoaderType = string | ReactElementLike;
export declare const BMObject: PropTypes.Requireable<{
    [x: string]: string | null | undefined;
}>;
export declare type BaseMetadataObject = {
    [key: string]: string | undefined | null;
};
export declare type TimeFormat = 'days' | 'hours';
export declare type BaseComponent = InferProps<typeof BC>;
export interface BaseAction<A = string> {
    type: A;
    payload: Record<string, any>;
}
export interface BaseState {
    [key: string]: any;
    errors?: BaseError[];
}
export declare type BaseActionType<T = string> = T[];
export interface BFSetStateContainer<T> {
    <P extends T>(param: P): void;
}
export interface BaseReducer {
    <S extends BaseState, A extends BaseAction, T extends BaseActionType>(state: S, action: A, type: T): S;
}
export interface BaseUnsetState<A> {
    (dispatch: Dispatch<A>): void;
}
export interface BaseMetadata {
    [key: string]: string | undefined | null;
}
export declare type BaseFormatPrice = 'formatted' | 'cents' | 'float';
export declare const baseOrderPricePropTypes: {
    id: PropTypes.Requireable<string>;
    className: PropTypes.Requireable<string>;
    style: PropTypes.Requireable<object>;
    name: PropTypes.Requireable<string>;
    base: PropTypes.Validator<string>;
    type: PropTypes.Validator<string>;
    children: PropTypes.Requireable<(...args: any[]) => any>;
    format: PropTypes.Requireable<BaseFormatPrice>;
};
export declare const baseOrderComponentPricePropTypes: {
    id: PropTypes.Requireable<string>;
    className: PropTypes.Requireable<string>;
    style: PropTypes.Requireable<object>;
    name: PropTypes.Requireable<string>;
    children: PropTypes.Requireable<(...args: any[]) => any>;
    format: PropTypes.Requireable<BaseFormatPrice>;
};
export declare type BasePriceType = 'total' | 'option' | 'unit';
export declare type BaseSelectorType = 'select' | 'radio';
export declare type BaseAmountComponentChildren = Omit<BaseAmountComponent, 'children'>;
export interface BaseAmountComponent extends Partial<JSX.IntrinsicElements['span']> {
    children?: (props: BaseAmountComponentChildren) => ReactNode;
    format?: BaseFormatPrice;
}
export interface FunctionChildren<P = Record<string, any>> {
    (props: P): ReactNode;
}
export {};
