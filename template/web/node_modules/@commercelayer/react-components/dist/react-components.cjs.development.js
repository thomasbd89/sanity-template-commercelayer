'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);
var PropTypes = _interopDefault(require('prop-types'));
var CLayer = require('@commercelayer/js-sdk');
var CLayer__default = _interopDefault(CLayer);
var _ = _interopDefault(require('lodash'));
var axios = _interopDefault(require('axios'));
var useRapidForm = _interopDefault(require('rapid-form'));

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var PProps = {
  children: PropTypes.func
};

var Parent = function Parent(props) {
  var Child = props.children;
  return Child ? /*#__PURE__*/React__default.createElement(Child, props) : null;
};

Parent.propTypes = PProps;

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var runtime_1 = createCommonjsModule(function (module) {
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var runtime = (function (exports) {

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined$1; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] =
    GeneratorFunction.displayName = "GeneratorFunction";

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      prototype[method] = function(arg) {
        return this._invoke(method, arg);
      };
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return PromiseImpl.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return PromiseImpl.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    if (PromiseImpl === void 0) PromiseImpl = Promise;

    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList),
      PromiseImpl
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined$1) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined$1;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined$1;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  Gp[toStringTagSymbol] = "Generator";

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined$1;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined$1, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined$1;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined$1;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined$1;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined$1;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined$1;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
   module.exports 
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  Function("r", "regeneratorRuntime = r")(runtime);
}
});

var baseReducer = function baseReducer(state, action, actionTypes) {
  var actions = actionTypes;

  if (actions.indexOf(action.type) !== -1) {
    var data = action.payload;
    state = _extends({}, state, data);
  }

  return state;
};

var ERROR_CODES = ['RECORD_NOT_FOUND', 'UNAUTHORIZED', 'INVALID_TOKEN', 'VALIDATION_ERROR', 'INVALID_RESOURCE', 'FILTER_NOT_ALLOWED', 'INVALID_FIELD_VALUE', 'INVALID_FIELD', 'PARAM_NOT_ALLOWED', 'PARAM_MISSING', 'INVALID_FILTER_VALUE', 'KEY_ORDER_MISMATCH', 'KEY_NOT_INCLUDED_IN_URL', 'INVALID_INCLUDE', 'RELATION_EXISTS', 'INVALID_SORT_CRITERIA', 'INVALID_LINKS_OBJECT', 'TYPE_MISMATCH', 'INVALID_PAGE_OBJECT', 'INVALID_PAGE_VALUE', 'INVALID_FIELD_FORMAT', 'INVALID_FILTERS_SYNTAX', 'SAVE_FAILED', 'INVALID_DATA_FORMAT', 'FORBIDDEN', 'RECORD_NOT_FOUND', 'NOT_ACCEPTABLE', 'UNSUPPORTED_MEDIA_TYPE', 'LOCKED', 'INTERNAL_SERVER_ERROR'];

var transformCode = function transformCode(code) {
  var newCode = '';
  ERROR_CODES.map(function (c) {
    var checkCode = [];
    var words = c.split('_');
    words.map(function (w) {
      var rgx = new RegExp("(?:s|" + w + ")", 'g');
      var m = code.match(rgx);

      if (m && (m == null ? void 0 : m.length) > 0) {
        checkCode.push(m[0]);
      }
    });

    if (checkCode.length === words.length) {
      newCode = c;
    }
  });
  return newCode;
};

var getErrorsByCollection = function getErrorsByCollection(collection, resourceType) {
  var errors = [];

  if (_.has(collection, 'errors') && !collection.errors().empty()) {
    collection.errors().toArray().map(function (error) {
      // TODO Add function to correct different field
      if (error['field'] === 'recipientEmail') error['field'] = 'email';
      errors.push({
        id: collection['id'],
        code: transformCode(error['code']),
        field: error['field'] === 'recipientEmail' ? 'email' : error['field'],
        resource: resourceType,
        message: error['message']
      });
    });
  } else if (_.isArray(collection)) {
    collection.map(function (error) {
      errors.push({
        // id: collection['id'],
        code: transformCode(error['code']),
        field: error['field'] === 'recipientEmail' ? 'email' : error['field'],
        resource: resourceType,
        message: error['message']
      });
    });
  }

  return errors;
};

var actionType = ['setLoading', 'setOrderId', 'setOrder', 'setSingleQuantity', 'setCurrentSkuCodes', 'setCurrentSkuPrices', 'setErrors', 'setCurrentItem', 'setSaveAddressToCustomerBook'];
var createOrder = /*#__PURE__*/function () {
  var _ref = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(params) {
    var persistKey, state, dispatch, config, metadata, _params$orderAttribut, orderAttributes, setLocalOrder, o;

    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            persistKey = params.persistKey, state = params.state, dispatch = params.dispatch, config = params.config, metadata = params.orderMetadata, _params$orderAttribut = params.orderAttributes, orderAttributes = _params$orderAttribut === void 0 ? {} : _params$orderAttribut, setLocalOrder = params.setLocalOrder;

            if (!state.orderId) {
              _context.next = 3;
              break;
            }

            return _context.abrupt("return", state.orderId);

          case 3:
            _context.next = 5;
            return CLayer__default.Order.withCredentials(config).create(_extends({
              metadata: metadata
            }, orderAttributes));

          case 5:
            o = _context.sent;

            if (o.id) {
              _context.next = 8;
              break;
            }

            return _context.abrupt("return", '');

          case 8:
            dispatch({
              type: 'setOrderId',
              payload: {
                orderId: o.id
              }
            });
            dispatch({
              type: 'setOrder',
              payload: {
                order: o
              }
            });
            persistKey && setLocalOrder && setLocalOrder(persistKey, o.id);
            return _context.abrupt("return", o.id);

          case 12:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function createOrder(_x) {
    return _ref.apply(this, arguments);
  };
}();
var getApiOrder = /*#__PURE__*/function () {
  var _ref2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(params) {
    var id, dispatch, config, clearWhenPlaced, persistKey, deleteLocalOrder, o;
    return runtime_1.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            id = params.id, dispatch = params.dispatch, config = params.config, clearWhenPlaced = params.clearWhenPlaced, persistKey = params.persistKey, deleteLocalOrder = params.deleteLocalOrder;
            _context2.prev = 1;
            _context2.next = 4;
            return CLayer.Order.withCredentials(config).includes('billingAddress', 'shippingAddress').find(id);

          case 4:
            o = _context2.sent;
            if (o) if (clearWhenPlaced && o.status === 'placed' || o.status === 'approved' || o.status === 'cancelled') {
              persistKey && deleteLocalOrder && deleteLocalOrder(persistKey);
              dispatch({
                type: 'setOrder',
                payload: {
                  order: undefined,
                  orderId: ''
                }
              });
            } else {
              dispatch({
                type: 'setOrder',
                payload: {
                  order: o
                }
              });
            }
            _context2.next = 12;
            break;

          case 8:
            _context2.prev = 8;
            _context2.t0 = _context2["catch"](1);
            persistKey && deleteLocalOrder && deleteLocalOrder(persistKey);
            dispatch({
              type: 'setOrder',
              payload: {
                order: undefined,
                orderId: ''
              }
            });

          case 12:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, null, [[1, 8]]);
  }));

  return function getApiOrder(_x2) {
    return _ref2.apply(this, arguments);
  };
}();
var addToCart = /*#__PURE__*/function () {
  var _ref3 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(params) {
    var skuCode, skuId, quantity, option, config, dispatch, lineItem, errors, id, order, name, imageUrl, attrs, lineItemResource, c, _errors;

    return runtime_1.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            skuCode = params.skuCode, skuId = params.skuId, quantity = params.quantity, option = params.option, config = params.config, dispatch = params.dispatch, lineItem = params.lineItem, errors = params.errors;
            _context4.prev = 1;
            _context4.next = 4;
            return createOrder(params);

          case 4:
            id = _context4.sent;
            order = CLayer__default.Order.build({
              id: id
            });
            name = lineItem == null ? void 0 : lineItem.name;
            imageUrl = lineItem == null ? void 0 : lineItem.imageUrl;
            attrs = {
              order: order,
              skuCode: skuCode,
              name: name,
              imageUrl: imageUrl,
              quantity: quantity || 1,
              _updateQuantity: 1
            };

            if (skuId) {
              attrs['item'] = CLayer__default.Sku.build({
                id: skuId
              });
            }

            _context4.next = 12;
            return CLayer__default.LineItem.withCredentials(config).create(attrs);

          case 12:
            lineItemResource = _context4.sent;

            if (_.isEmpty(option)) {
              _context4.next = 18;
              break;
            }

            c = 0;

            _.map(option, /*#__PURE__*/function () {
              var _ref4 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(opt) {
                var options, skuOptionId, skuOption;
                return runtime_1.wrap(function _callee3$(_context3) {
                  while (1) {
                    switch (_context3.prev = _context3.next) {
                      case 0:
                        options = opt.options, skuOptionId = opt.skuOptionId;
                        skuOption = CLayer__default.SkuOption.build({
                          id: skuOptionId
                        });
                        _context3.next = 4;
                        return CLayer__default.LineItemOption.withCredentials(config).create({
                          quantity: 1,
                          options: options,
                          lineItem: lineItemResource,
                          skuOption: skuOption
                        });

                      case 4:
                        c += 1;

                        if (!(c === _.size(option))) {
                          _context3.next = 8;
                          break;
                        }

                        _context3.next = 8;
                        return getApiOrder(_extends({
                          id: id
                        }, params));

                      case 8:
                      case "end":
                        return _context3.stop();
                    }
                  }
                }, _callee3);
              }));

              return function (_x4) {
                return _ref4.apply(this, arguments);
              };
            }());

            _context4.next = 20;
            break;

          case 18:
            _context4.next = 20;
            return getApiOrder(_extends({
              id: id
            }, params));

          case 20:
            if (!_.isEmpty(errors)) {
              dispatch({
                type: 'setErrors',
                payload: {
                  errors: []
                }
              });
            }

            return _context4.abrupt("return", {
              success: true
            });

          case 24:
            _context4.prev = 24;
            _context4.t0 = _context4["catch"](1);
            _errors = getErrorsByCollection(_context4.t0, 'order');
            dispatch({
              type: 'setErrors',
              payload: {
                errors: _errors
              }
            });
            return _context4.abrupt("return", {
              success: false
            });

          case 29:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4, null, [[1, 24]]);
  }));

  return function addToCart(_x3) {
    return _ref3.apply(this, arguments);
  };
}();
var unsetOrderState = function unsetOrderState(dispatch) {
  dispatch({
    type: 'setOrderId',
    payload: {
      orderId: ''
    }
  });
  dispatch({
    type: 'setOrder',
    payload: {
      order: undefined
    }
  });
};
var setOrderErrors = function setOrderErrors(_ref5) {
  var dispatch = _ref5.dispatch,
      collection = _ref5.collection;
  var errors = getErrorsByCollection(collection, 'order');
  dispatch({
    type: 'setErrors',
    payload: {
      errors: errors
    }
  });
  return {
    success: false
  };
};
var saveAddressToCustomerBook = function saveAddressToCustomerBook(_ref6) {
  var _payload;

  var type = _ref6.type,
      value = _ref6.value,
      dispatch = _ref6.dispatch;
  dispatch({
    type: 'setSaveAddressToCustomerBook',
    payload: (_payload = {}, _payload["save" + type + "ToCustomerBook"] = value, _payload)
  });
};
var orderInitialState = {
  loading: false,
  orderId: '',
  order: undefined,
  errors: []
};

var orderReducer = function orderReducer(state, reducer) {
  return baseReducer(state, reducer, actionType);
};

var OrderContext = /*#__PURE__*/React.createContext(orderInitialState);

var initialItemContext = {
  item: {},
  items: {},
  quantity: {},
  option: {},
  prices: {},
  lineItems: {}
};
var ItemContext = /*#__PURE__*/React.createContext(initialItemContext);

var getCurrentItemKey = function getCurrentItemKey(item) {
  return _.first(_.keys(item)) || '';
};

var checkChildrenTypes = function checkChildrenTypes(props, propName, componentName) {
  var error = null;
  var children = props[propName];
  var cpName = componentName.replace('CL', '');
  if (_.isEmpty(children) && props['isRequired']) error = new Error("The prop '" + propName + "' is marked as required in '" + cpName + "', but its value is '" + children + "'.");
  React.Children.map(children, function (c) {
    if (error) return error;
    var type = c.type;
    var itemTypes = components[cpName].permittedChildren;
    var errorMsg = "Invalid prop '" + propName + "' supplied to " + cpName + ". Only components " + itemTypes.join(', ') + " are allowed.";

    if (_.isFunction(type) && _.has(type, 'displayName')) {
      var displayName = type['displayName'];
      var childComponentName = type.name;

      if (displayName && displayName === "" + childComponentName) {
        if (!itemTypes.includes(childComponentName)) {
          error = new Error(errorMsg);
        }
      }
    }

    if (! /*#__PURE__*/React.isValidElement(c)) {
      error = new Error(errorMsg);
    }
  });
  return error;
};

var childrenTypes = checkChildrenTypes;

childrenTypes['isRequired'] = function (props, propName, componentName, location, propFullName) {
  return checkChildrenTypes(_extends({}, props, {
    isRequired: true
  }), propName, componentName);
}; // NOTE change in the future (now is general for typescript)

var BC = {
  id: PropTypes.string,
  className: PropTypes.string,
  style: PropTypes.object,
  name: PropTypes.string
};
var PTLoader = /*#__PURE__*/PropTypes.oneOfType([PropTypes.element, PropTypes.string]);
var BaseSelectComponentPropTypes = {
  children: PropTypes.func,
  options: /*#__PURE__*/PropTypes.arrayOf( /*#__PURE__*/PropTypes.shape({
    label: PropTypes.string.isRequired,
    value: /*#__PURE__*/PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,
    selected: PropTypes.bool
  }).isRequired).isRequired,
  placeholder: /*#__PURE__*/PropTypes.shape({
    label: PropTypes.string.isRequired,
    value: /*#__PURE__*/PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired
  }),
  value: PropTypes.string,
  name: PropTypes.string.isRequired
};
var BaseInputComponentPropTypes = {
  children: PropTypes.func,
  name: PropTypes.string.isRequired,
  type: /*#__PURE__*/PropTypes.oneOf(['text', 'email', 'number', 'date', 'checkbox', 'textarea']).isRequired,
  onChange: PropTypes.func,
  placeholder: PropTypes.string
};
var BMObject = /*#__PURE__*/PropTypes.objectOf(PropTypes.string);
var baseOrderPricePropTypes = /*#__PURE__*/_extends({
  base: PropTypes.string.isRequired,
  type: PropTypes.string.isRequired,
  children: PropTypes.func,
  format: /*#__PURE__*/PropTypes.oneOf(['formatted', 'cents', 'float'])
}, BC);
var baseOrderComponentPricePropTypes = /*#__PURE__*/_extends({
  children: baseOrderPricePropTypes['children'],
  format: baseOrderPricePropTypes['format']
}, BC);

var CEType = ['EMPTY_ERROR', 'FILTER_NOT_ALLOWED', 'FORBIDDEN', 'INTERNAL_SERVER_ERROR', 'INVALID_DATA_FORMAT', 'INVALID_FIELD', 'INVALID_FIELD_FORMAT', 'INVALID_FIELD_VALUE', 'INVALID_FILTERS_SYNTAX', 'INVALID_FILTER_VALUE', 'INVALID_INCLUDE', 'INVALID_LINKS_OBJECT', 'INVALID_PAGE_OBJECT', 'INVALID_PAGE_VALUE', 'INVALID_RESOURCE', 'INVALID_SORT_CRITERIA', 'INVALID_TOKEN', 'KEY_NOT_INCLUDED_IN_URL', 'KEY_ORDER_MISMATCH', 'LOCKED', 'NOT_ACCEPTABLE', 'PARAM_MISSING', 'PARAM_NOT_ALLOWED', 'RECORD_NOT_FOUND', 'RECORD_NOT_FOUND', 'RELATION_EXISTS', 'SAVE_FAILED', 'TYPE_MISMATCH', 'UNAUTHORIZED', 'UNSUPPORTED_MEDIA_TYPE', 'VALIDATION_ERROR'];
var REType = ['order', 'giftCard', 'lineItem', 'variant', 'price', 'skuOption'];
var BaseErrorObject = /*#__PURE__*/PropTypes.shape({
  code: /*#__PURE__*/PropTypes.oneOf(CEType).isRequired,
  message: PropTypes.string.isRequired,
  resource: /*#__PURE__*/PropTypes.oneOf(REType),
  field: PropTypes.string,
  id: PropTypes.string
});
var ErrorPropTypes = {
  resource: /*#__PURE__*/PropTypes.oneOf(['order', 'giftCard', 'lineItem', 'variant', 'price', 'skuOption', 'billingAddress', 'shippingAddress']).isRequired,
  children: PropTypes.func,
  field: PropTypes.string
};

var components = {
  Address: {
    permittedChildren: ['AddressField', 'ReactNode'],
    displayName: 'Address',
    propTypes: {
      children: childrenTypes.isRequired
    }
  },
  AddressCountrySelector: {
    displayName: 'AddressCountrySelector',
    propTypes: {
      children: PropTypes.func,
      placeholder: /*#__PURE__*/PropTypes.shape({
        label: PropTypes.string.isRequired,
        value: /*#__PURE__*/PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired
      }),
      value: PropTypes.string,
      name: /*#__PURE__*/PropTypes.oneOf(['billing_address_country_code', 'shipping_address_country_code']).isRequired,
      required: PropTypes.bool
    },
    defaultProps: {
      required: true
    }
  },
  AddressField: {
    displayName: 'AddressField',
    propTypes: {
      children: PropTypes.func
    }
  },
  AddressInput: {
    displayName: 'AddressInput',
    propTypes: {
      children: PropTypes.func,
      name: /*#__PURE__*/PropTypes.oneOf(['billing_address_city', 'billing_address_company', 'billing_address_email', 'billing_address_first_name', 'billing_address_last_name', 'billing_address_line_1', 'billing_address_line_2', 'billing_address_phone', 'billing_address_state_code', 'billing_address_zip_code', 'billing_address_save_to_customer_book', 'shipping_address_city', 'shipping_address_company', 'shipping_address_email', 'shipping_address_first_name', 'shipping_address_last_name', 'shipping_address_line_1', 'shipping_address_line_2', 'shipping_address_phone', 'shipping_address_state_code', 'shipping_address_zip_code', 'shipping_address_save_to_customer_book']).isRequired,
      type: /*#__PURE__*/PropTypes.oneOf(['checkbox', 'date', 'email', 'number', 'tel', 'text', 'textarea']).isRequired,
      placeholder: PropTypes.string,
      disabled: PropTypes.bool,
      required: PropTypes.bool
    },
    defaultProps: {
      required: true
    }
  },
  AddToCartButton: {
    displayName: 'AddToCartButton',
    propTypes: {
      children: PropTypes.func,
      label: PropTypes.string,
      skuCode: PropTypes.string,
      disabled: PropTypes.bool,
      lineItem: /*#__PURE__*/PropTypes.shape({
        name: PropTypes.string.isRequired,
        imageUrl: PropTypes.string
      })
    },
    defaultProps: {
      label: 'Add to cart'
    }
  },
  AddressesContainer: {
    displayName: 'AddressesContainer',
    permittedChildren: ['BillingAddressForm', 'BillingAddressContainer', 'ShippingAddressForm', 'ShippingAddressContainer', 'SaveAddressesButton', 'ReactNode'],
    propTypes: {
      children: childrenTypes.isRequired,
      shipToDifferentAddress: PropTypes.bool
    }
  },
  AvailabilityContainer: {
    displayName: 'AvailabilityContainer',
    permittedChildren: ['AvailabilityTemplate', 'ReactNode'],
    propTypes: {
      children: childrenTypes.isRequired,
      skuCode: PropTypes.string
    }
  },
  AvailabilityTemplate: {
    displayName: 'AvailabilityTemplate',
    propTypes: {
      timeFormat: /*#__PURE__*/PropTypes.oneOf(['days', 'hours']),
      showShippingMethodName: PropTypes.bool,
      children: PropTypes.func
    },
    defaultProps: {
      timeFormat: 'days',
      showShippingMethodName: false
    }
  },
  BillingAddressContainer: {
    permittedChildren: ['Address', 'ReactNode'],
    propTypes: {
      children: childrenTypes.isRequired
    }
  },
  BillingAddressForm: {
    permittedChildren: ['AddressInput', 'ReactNode'],
    propTypes: {
      children: childrenTypes.isRequired
    }
  },
  CheckoutLink: {
    displayName: 'CheckoutLink',
    propTypes: {
      children: PropTypes.func,
      label: PropTypes.string
    },
    defaultProps: {
      label: 'Checkout'
    }
  },
  CommerceLayer: {
    permittedChildren: ['OrderContainer', 'PricesContainer', 'GiftCardContainer', 'ReactNode'],
    propTypes: {
      children: childrenTypes.isRequired,
      accessToken: PropTypes.string.isRequired,
      endpoint: PropTypes.string.isRequired
    }
  },
  CustomerContainer: {
    displayName: 'CustomerContainer',
    permittedChildren: ['CustomerInput', 'SaveCustomerButton', 'AddressesContainer', 'ReactNode'],
    propTypes: {
      children: childrenTypes.isRequired,
      isGuest: PropTypes.bool
    }
  },
  CustomerInput: {
    displayName: 'CustomerInput',
    propTypes: {
      children: PropTypes.func,
      name: /*#__PURE__*/PropTypes.oneOf(['customerEmail']),
      type: /*#__PURE__*/PropTypes.oneOf(['email']),
      placeholder: PropTypes.string,
      disabled: PropTypes.bool,
      required: PropTypes.bool,
      saveOnBlur: PropTypes.bool
    },
    defaultProps: {
      required: true
    }
  },
  DeliveryLeadTime: {
    displayName: 'DeliveryLeadTime',
    propTypes: {
      type: /*#__PURE__*/PropTypes.oneOf(['maxDays', 'maxHours', 'minDays', 'minHours']).isRequired,
      children: PropTypes.func
    }
  },
  DiscountAmount: {
    displayName: 'DiscountAmount',
    propTypes: baseOrderComponentPricePropTypes,
    defaultProps: {
      format: 'formatted'
    }
  },
  Errors: {
    displayName: 'Errors',
    propTypes: ErrorPropTypes,
    defaultProps: {
      messages: [],
      field: 'base'
    }
  },
  ExternalFunction: {
    displayName: 'ExternalFunction',
    permittedChildren: ['AddToCartButton', 'ReactNode'],
    propTypes: {
      children: childrenTypes.isRequired,
      url: PropTypes.string.isRequired
    }
  },
  GiftCard: {
    permittedChildren: ['GiftCardCurrencySelector', 'GiftCardInput', 'Errors', 'MetadataInput', 'SubmitButton', 'ReactNode'],
    displayName: 'GiftCard',
    propTypes: {
      children: childrenTypes.isRequired,
      onSubmit: PropTypes.func
    },
    defaultProps: {
      onSubmit: undefined
    }
  },
  GiftCardAmount: {
    displayName: 'GiftCardAmount',
    propTypes: baseOrderComponentPricePropTypes
  },
  GiftCardContainer: {
    permittedChildren: ['GiftCard', 'Errors', 'ReactNode'],
    displayName: 'GiftCardContainer',
    propTypes: {
      children: childrenTypes.isRequired
    }
  },
  GiftCardCurrencySelector: {
    displayName: 'GiftCardCurrencySelector',
    propTypes: {
      children: PropTypes.func,
      placeholder: /*#__PURE__*/PropTypes.shape({
        value: /*#__PURE__*/PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,
        label: PropTypes.string.isRequired
      }),
      value: PropTypes.string,
      required: PropTypes.bool
    },
    defaultProps: {
      required: true
    }
  },
  GiftCardInput: {
    displayName: 'GiftCardInput',
    propTypes: {
      type: /*#__PURE__*/PropTypes.oneOf(['text', 'email', 'number', 'date', 'checkbox']).isRequired,
      name: /*#__PURE__*/PropTypes.oneOf(['balanceCents', 'balanceMaxCents', 'singleUse', 'rechargeable', 'imageUrl', 'expiresAt', 'referenceOrigin', 'email', 'firstName', 'lastName', 'reference']).isRequired,
      children: PropTypes.func,
      placeholder: PropTypes.string
    }
  },
  ItemContainer: {
    permittedChildren: ['PricesContainer', 'VariantsContainer', 'SkuOptionContainer', 'QuantitySelector', 'AddToCartButton', 'AvailabilityContainer', 'SkuListsContainer', 'ReactNode'],
    displayName: 'ItemContainer',
    propTypes: {
      children: childrenTypes.isRequired,
      skuCode: PropTypes.string,
      lineItem: /*#__PURE__*/PropTypes.shape({
        name: PropTypes.string.isRequired,
        imageUrl: PropTypes.string
      })
    }
  },
  LineItem: {
    permittedChildren: ['LineItemImage', 'LineItemName', 'LineItemOptions', 'LineItemQuantity', 'LineItemAmount', 'LineItemRemoveLink', 'StockTransfer', 'Errors', 'ReactNode'],
    displayName: 'LineItem',
    propTypes: {
      children: childrenTypes.isRequired,
      type: /*#__PURE__*/PropTypes.oneOf(['skus', 'gift_cards', 'shipments', 'paymentMethods', 'promotions'])
    },
    defaultProps: {
      type: 'skus'
    }
  },
  LineItemAmount: {
    displayName: 'LineItemAmount',
    propTypes: /*#__PURE__*/_extends({}, baseOrderComponentPricePropTypes, {
      type: /*#__PURE__*/PropTypes.oneOf(['total', 'unit', 'option'])
    }),
    defaultProps: {
      format: 'formatted',
      type: 'total'
    }
  },
  LineItemImage: {
    displayName: 'LineItemImage',
    propTypes: {
      width: PropTypes.number,
      children: PropTypes.func
    }
  },
  LineItemName: {
    displayName: 'LineItemName',
    propTypes: {
      children: PropTypes.func
    }
  },
  LineItemOption: {
    displayName: 'LineItemOption',
    propTypes: {
      name: PropTypes.string.isRequired,
      children: PropTypes.func,
      valueClassName: PropTypes.string,
      keyClassName: PropTypes.string,
      keyId: PropTypes.string,
      keyStyle: PropTypes.object
    }
  },
  LineItemOptions: {
    permittedChildren: ['LineItemOption', 'ReactNode'],
    displayName: 'LineItemOptions',
    propTypes: {
      children: childrenTypes.isRequired,
      title: PropTypes.string,
      showName: PropTypes.bool,
      skuOptionId: PropTypes.string.isRequired
    },
    defaultProps: {
      showName: true
    }
  },
  LineItemQuantity: {
    displayName: 'LineItemQuantity',
    propTypes: {
      children: PropTypes.func,
      max: PropTypes.number,
      disabled: PropTypes.bool,
      readonly: PropTypes.bool
    },
    defaultProps: {
      max: 50
    }
  },
  LineItemRemoveLink: {
    displayName: 'LineItemRemoveLink',
    propTypes: {
      children: PropTypes.func,
      label: PropTypes.string
    },
    defaultProps: {
      label: 'Remove'
    }
  },
  LineItemsContainer: {
    permittedChildren: ['LineItemsCount', 'LineItem', 'ReactNode'],
    displayName: 'LineItemsContainer',
    propTypes: {
      children: childrenTypes.isRequired,
      filters: PropTypes.object,
      loader: PTLoader
    },
    defaultProps: {
      filters: {},
      loader: 'Loading...'
    }
  },
  LineItemsCount: {
    displayName: 'LineItemsCount',
    propTypes: {
      children: PropTypes.func,
      id: PropTypes.string,
      className: PropTypes.string,
      name: PropTypes.string,
      style: PropTypes.object
    }
  },
  MetadataInput: {
    displayName: 'MetadataInput',
    propTypes: BaseInputComponentPropTypes
  },
  OrderContainer: {
    permittedChildren: ['AddressesContainer', 'CustomerContainer', 'ItemContainer', 'LineItemsContainer', 'SubTotalAmount', 'DiscountAmount', 'ShippingAmount', 'TaxesAmount', 'GiftCardAmount', 'TotalAmount', 'CheckoutLink', 'GiftCardContainer', 'ShipmentsContainer', 'ReactNode'],
    displayName: 'OrderContainer',
    propTypes: {
      children: childrenTypes.isRequired,
      orderId: PropTypes.string,
      metadata: BMObject,
      attributes: PropTypes.object
    },
    defaultProps: {
      metadata: {}
    }
  },
  OrderStorage: {
    permittedChildren: ['OrderContainer', 'ReactNode'],
    displayName: 'OrderStorage',
    propTypes: {
      children: childrenTypes.isRequired,
      clearWhenPlaced: PropTypes.bool,
      persistKey: PropTypes.string.isRequired
    }
  },
  Price: {
    displayName: 'Price',
    propTypes: {
      children: PropTypes.func,
      compareClassName: PropTypes.string,
      skuCode: PropTypes.string,
      showCompare: PropTypes.bool
    },
    defaultProps: {
      skuCode: ''
    }
  },
  PricesContainer: {
    permittedChildren: ['Price', 'ReactNode'],
    displayName: 'PricesContainer',
    propTypes: {
      children: childrenTypes.isRequired,
      skuCode: PropTypes.string,
      loader: PTLoader,
      perPage: PropTypes.number,
      filters: PropTypes.object
    },
    defaultProps: {
      perPage: 10,
      filters: {},
      loader: 'Loading...',
      skuCode: ''
    }
  },
  QuantitySelector: {
    displayName: 'QuantitySelector',
    propTypes: {
      children: PropTypes.func,
      min: PropTypes.number,
      max: PropTypes.number,
      value: PropTypes.string,
      skuCode: PropTypes.string,
      disabled: PropTypes.bool
    },
    defaultProps: {
      min: 1
    }
  },
  SaveAddressesButton: {
    displayName: 'SaveAddressesButton',
    propTypes: {
      children: PropTypes.func,
      label: PropTypes.string,
      onClick: PropTypes.func,
      disabled: PropTypes.bool
    },
    defaultProps: {
      label: 'Continue to delivery'
    }
  },
  Shipment: {
    permittedChildren: ['LineItemsContainer', 'LineItem', 'ShippingMethod', 'ReactNode'],
    displayName: 'Shipment',
    propTypes: {
      children: childrenTypes.isRequired
    }
  },
  ShipmentsContainer: {
    displayName: 'ShipmentsContainer',
    permittedChildren: ['Shipment', 'ReactNode'],
    propTypes: {
      children: childrenTypes.isRequired
    }
  },
  ShippingAddressContainer: {
    permittedChildren: ['Address', 'ReactNode'],
    propTypes: {
      children: childrenTypes.isRequired
    }
  },
  SaveCustomerButton: {
    displayName: 'SaveCustomerButton',
    propTypes: {
      children: PropTypes.func,
      label: PropTypes.string,
      onClick: PropTypes.func
    },
    defaultProps: {
      label: 'Save'
    }
  },
  ShippingAddressForm: {
    permittedChildren: ['AddressInput', 'ReactNode'],
    propTypes: {
      children: childrenTypes.isRequired
    }
  },
  ShippingAmount: {
    displayName: 'ShippingAmount',
    propTypes: baseOrderComponentPricePropTypes
  },
  ShippingMethod: {
    permittedChildren: ['ShippingMethodName', 'ShippingMethodPrice', 'ShippingMethodRadioButton', 'DeliveryLeadTime', 'ReactNode'],
    displayName: 'ShippingMethod',
    propTypes: {
      children: childrenTypes.isRequired,
      readonly: PropTypes.bool
    }
  },
  ShippingMethodName: {
    displayName: 'ShippingMethodName',
    propTypes: {
      children: PropTypes.func
    }
  },
  ShippingMethodRadioButton: {
    displayName: 'ShippingMethodRadioButton',
    propTypes: {
      children: PropTypes.func
    }
  },
  ShippingMethodPrice: {
    displayName: 'ShippingMethodPrice',
    propTypes: /*#__PURE__*/_extends({}, baseOrderComponentPricePropTypes, {
      type: /*#__PURE__*/PropTypes.oneOf(['amount'])
    }),
    defaultProps: {
      format: 'formatted',
      type: 'amount'
    }
  },
  SkuList: {
    permittedChildren: ['AddToCartButton', 'QuantitySelector', 'ReactNode'],
    displayName: 'SkuList',
    propTypes: {
      children: childrenTypes.isRequired,
      id: PropTypes.string.isRequired
    }
  },
  SkuListsContainer: {
    permittedChildren: ['SkuList', 'ReactNode'],
    displayName: 'SkuListsContainer',
    propTypes: {
      children: childrenTypes.isRequired
    }
  },
  SkuOption: {
    permittedChildren: ['SkuOptionInput', 'ReactNode'],
    displayName: 'SkuOption',
    propTypes: {
      children: childrenTypes.isRequired,
      id: PropTypes.string.isRequired
    }
  },
  SkuOptionInput: {
    displayName: 'SkuOptionInput',
    propTypes: BaseInputComponentPropTypes
  },
  SkuOptionsContainer: {
    permittedChildren: ['SkuOption', 'ReactNode'],
    displayName: 'SkuOptionsContainer',
    propTypes: {
      children: childrenTypes.isRequired,
      skuCode: PropTypes.string
    }
  },
  StockTransfer: {
    permittedChildren: ['StockTransferField', 'ReactNode'],
    displayName: 'StockTransfer',
    propTypes: {
      children: childrenTypes.isRequired
    }
  },
  StockTransferField: {
    displayName: 'StockTransferField',
    propTypes: {
      children: PropTypes.func,
      type: /*#__PURE__*/PropTypes.oneOf(['quantity', 'skuCode']).isRequired
    }
  },
  SubmitButton: {
    displayName: 'SubmitButton',
    propTypes: {
      children: PropTypes.func,
      label: PropTypes.string
    },
    defaultProps: {
      label: 'Submit'
    }
  },
  SubTotalAmount: {
    displayName: 'SubTotalAmount',
    propTypes: baseOrderComponentPricePropTypes,
    defaultProps: {
      format: 'formatted'
    }
  },
  TaxesAmount: {
    displayName: 'TaxesAmount',
    propTypes: baseOrderComponentPricePropTypes,
    defaultProps: {
      format: 'formatted'
    }
  },
  TotalAmount: {
    displayName: 'TotalAmount',
    propTypes: baseOrderComponentPricePropTypes,
    defaultProps: {
      format: 'formatted'
    }
  },
  VariantsContainer: {
    permittedChildren: ['VariantSelector', 'ReactNode'],
    displayName: 'VariantsContainer',
    propTypes: {
      children: childrenTypes.isRequired,
      skuCode: PropTypes.string,
      filters: PropTypes.object
    },
    defaultProps: {
      skuCode: '',
      filters: {}
    }
  },
  VariantSelector: {
    displayName: 'VariantSelector',
    propTypes: {
      options: /*#__PURE__*/PropTypes.arrayOf( /*#__PURE__*/PropTypes.shape({
        label: PropTypes.string.isRequired,
        code: PropTypes.string.isRequired,
        lineItem: /*#__PURE__*/PropTypes.shape({
          name: PropTypes.string.isRequired,
          imageUrl: PropTypes.string
        })
      }).isRequired).isRequired,
      name: PropTypes.string,
      children: PropTypes.func,
      type: /*#__PURE__*/PropTypes.oneOf(['select', 'radio']),
      loader: PropTypes.element,
      placeholder: PropTypes.string,
      skuCode: PropTypes.string
    },
    defaultProps: {
      placeholder: 'Select a variant',
      type: 'select'
    }
  }
};

var actionType$1 = ['getSkuList', 'setSkuList'];
var skuListsInitialState = {
  listIds: [],
  skuLists: {}
};
var getSkuList = /*#__PURE__*/function () {
  var _ref2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(_ref) {
    var listIds, config, dispatch, skuLists;
    return runtime_1.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            listIds = _ref.listIds, config = _ref.config, dispatch = _ref.dispatch;
            skuLists = {};
            _context2.prev = 2;
            listIds.map( /*#__PURE__*/function () {
              var _ref3 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(id) {
                var _skuList$skus;

                var skuList, skuCodes;
                return runtime_1.wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        _context.next = 2;
                        return CLayer.SkuList.withCredentials(config).includes('skus').select({
                          skus: ['code']
                        }).find(id);

                      case 2:
                        skuList = _context.sent;
                        skuCodes = (_skuList$skus = skuList.skus()) == null ? void 0 : _skuList$skus.toArray().map(function (sku) {
                          return sku.code;
                        });
                        skuLists[id] = skuCodes;

                      case 5:
                      case "end":
                        return _context.stop();
                    }
                  }
                }, _callee);
              }));

              return function (_x2) {
                return _ref3.apply(this, arguments);
              };
            }());
            dispatch({
              payload: {
                skuLists: skuLists
              },
              type: 'getSkuList'
            });
            _context2.next = 11;
            break;

          case 7:
            _context2.prev = 7;
            _context2.t0 = _context2["catch"](2);
            console.error(_context2.t0);
            return _context2.abrupt("return", _context2.t0);

          case 11:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, null, [[2, 7]]);
  }));

  return function getSkuList(_x) {
    return _ref2.apply(this, arguments);
  };
}();

var skuListsReducer = function skuListsReducer(state, reducer) {
  return baseReducer(state, reducer, actionType$1);
};

var SkuListsContext = /*#__PURE__*/React.createContext(skuListsInitialState);

var callExternalFunction = /*#__PURE__*/function () {
  var _ref2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(_ref) {
    var url, data;
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            url = _ref.url, data = _ref.data;
            return _context.abrupt("return", axios.post(url, data));

          case 2:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function callExternalFunction(_x) {
    return _ref2.apply(this, arguments);
  };
}();
var ExternalFunctionContext = /*#__PURE__*/React.createContext({
  url: null,
  callExternalFunction: callExternalFunction
});

var propTypes = components.AddToCartButton.propTypes;
var defaultProps = components.AddToCartButton.defaultProps;
var displayName = components.AddToCartButton.displayName;

var AddToCartButton = function AddToCartButton(props) {
  var _items$skuCode;

  var _props$label = props.label,
      label = _props$label === void 0 ? 'Add to cart' : _props$label,
      children = props.children,
      skuCode = props.skuCode,
      disabled = props.disabled,
      skuListId = props.skuListId,
      lineItem = props.lineItem,
      p = _objectWithoutPropertiesLoose(props, ["label", "children", "skuCode", "disabled", "skuListId", "lineItem"]);

  var _useContext = React.useContext(OrderContext),
      addToCart = _useContext.addToCart,
      orderId = _useContext.orderId,
      getOrder = _useContext.getOrder,
      setOrderErrors = _useContext.setOrderErrors;

  var _useContext2 = React.useContext(ExternalFunctionContext),
      url = _useContext2.url,
      callExternalFunction = _useContext2.callExternalFunction;

  var _useContext3 = React.useContext(ItemContext),
      item = _useContext3.item,
      items = _useContext3.items,
      quantity = _useContext3.quantity,
      option = _useContext3.option,
      prices = _useContext3.prices,
      lineItems = _useContext3.lineItems,
      lineItemContext = _useContext3.lineItem,
      itemSkuCode = _useContext3.skuCode;

  var _useContext4 = React.useContext(SkuListsContext),
      skuLists = _useContext4.skuLists;

  var sCode = !_.isEmpty(items) && skuCode ? (_items$skuCode = items[skuCode]) == null ? void 0 : _items$skuCode.code : skuCode || getCurrentItemKey(item) || itemSkuCode;

  var handleClick = function handleClick() {
    var _item$sCode, _item$sCode2;

    var qty = quantity[sCode];
    var opt = option[sCode];
    var customLineItem = !_.isEmpty(lineItem || lineItemContext) ? lineItem || lineItemContext : lineItems[sCode];

    if (!_.isEmpty(skuLists) && skuListId && url) {
      var slQty = quantity[skuListId] || 1;

      if (_.has(skuLists, skuListId)) {
        var _lineItems = skuLists[skuListId].map(function (skuCode) {
          return {
            skuCode: skuCode,
            quantity: slQty,
            _update_quantity: 1
          };
        });

        return callExternalFunction({
          url: url,
          data: {
            resourceType: 'orders',
            inputs: [{
              id: orderId,
              lineItems: _lineItems
            }]
          }
        }).then(function (res) {
          getOrder && orderId && getOrder(orderId);
          return res;
        })["catch"](function (_ref) {
          var response = _ref.response;
          setOrderErrors && setOrderErrors(response['data']);
          return response;
        });
      }
    }

    return !url ? addToCart && addToCart({
      skuCode: sCode,
      skuId: (_item$sCode = item[sCode]) == null ? void 0 : _item$sCode.id,
      quantity: qty,
      option: opt,
      lineItem: customLineItem
    }) : callExternalFunction({
      url: url,
      data: {
        skuCode: sCode,
        skuId: (_item$sCode2 = item[sCode]) == null ? void 0 : _item$sCode2.id,
        quantity: qty,
        option: opt,
        lineItem: customLineItem
      }
    }).then(function (res) {
      getOrder && orderId && getOrder(orderId);
      return res;
    })["catch"](function (_ref2) {
      var response = _ref2.response;
      setOrderErrors && setOrderErrors(response['data']);
      return response;
    });
  };

  var autoDisabled = !_.isEmpty(skuLists) || skuListId ? false : disabled || !prices[sCode] || !sCode;

  var parentProps = _extends({
    handleClick: handleClick,
    disabled: disabled || autoDisabled,
    label: label
  }, props);

  return children ? /*#__PURE__*/React__default.createElement(Parent, parentProps, children) : /*#__PURE__*/React__default.createElement("button", _extends({
    disabled: autoDisabled,
    onClick: handleClick
  }, p), label);
};

AddToCartButton.propTypes = propTypes;
AddToCartButton.defaultProps = defaultProps;
AddToCartButton.displayName = displayName;

var initial = {
  address: {}
};
var AddressChildrenContext = /*#__PURE__*/React.createContext(initial);

var saveCustomerUser = /*#__PURE__*/function () {
  var _ref2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(_ref) {
    var config, customerEmail, dispatch, order, getOrder, o;
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            config = _ref.config, customerEmail = _ref.customerEmail, dispatch = _ref.dispatch, order = _ref.order, getOrder = _ref.getOrder;
            _context.prev = 1;

            if (!order) {
              _context.next = 8;
              break;
            }

            _context.next = 5;
            return order.withCredentials(config).update({
              customerEmail: customerEmail
            });

          case 5:
            o = _context.sent;
            getOrder(o.id);
            dispatch({
              type: 'setCustomerEmail',
              payload: {
                customerEmail: customerEmail
              }
            });

          case 8:
            _context.next = 13;
            break;

          case 10:
            _context.prev = 10;
            _context.t0 = _context["catch"](1);
            console.error(_context.t0);

          case 13:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[1, 10]]);
  }));

  return function saveCustomerUser(_x) {
    return _ref2.apply(this, arguments);
  };
}();
var setCustomerErrors = function setCustomerErrors(errors, dispatch) {
  dispatch && dispatch({
    type: 'setErrors',
    payload: {
      errors: errors
    }
  });
};
var setCustomerEmail = function setCustomerEmail(customerEmail, dispatch) {
  dispatch && dispatch({
    type: 'setCustomerEmail',
    payload: {
      customerEmail: customerEmail
    }
  });
};
var getCustomerAddresses = /*#__PURE__*/function () {
  var _ref4 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(_ref3) {
    var config, dispatch, customerAddresses, addresses, errors;
    return runtime_1.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            config = _ref3.config, dispatch = _ref3.dispatch;
            _context2.prev = 1;
            _context2.next = 4;
            return CLayer.CustomerAddress.withCredentials(config).includes('address').all();

          case 4:
            customerAddresses = _context2.sent;
            addresses = customerAddresses.toArray().map(function (customerAddress) {
              return customerAddress.address();
            });
            dispatch({
              type: 'setAddresses',
              payload: {
                addresses: addresses
              }
            });
            _context2.next = 13;
            break;

          case 9:
            _context2.prev = 9;
            _context2.t0 = _context2["catch"](1);
            errors = getErrorsByCollection(_context2.t0, 'address');
            dispatch({
              type: 'setErrors',
              payload: {
                errors: errors
              }
            });

          case 13:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, null, [[1, 9]]);
  }));

  return function getCustomerAddresses(_x2) {
    return _ref4.apply(this, arguments);
  };
}();
var customerInitialState = {
  errors: [],
  addresses: []
};
var type = ['setErrors', 'setCustomerEmail', 'setAddresses'];

var customerReducer = function customerReducer(state, reducer) {
  return baseReducer(state, reducer, type);
};

var defaultCustomerContext = {
  saveCustomerUser: /*#__PURE__*/function () {
    var _saveCustomerUser = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee() {
      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return");

            case 1:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    function saveCustomerUser() {
      return _saveCustomerUser.apply(this, arguments);
    }

    return saveCustomerUser;
  }(),
  setCustomerErrors: setCustomerErrors,
  setCustomerEmail: setCustomerEmail
};
var CustomerContext = /*#__PURE__*/React.createContext(defaultCustomerContext);

var defaultBillingAddressContext = {
  setBillingAddress: function setBillingAddress() {
    return;
  }
};
var BillingAddressContext = /*#__PURE__*/React.createContext(defaultBillingAddressContext);

var defaultShippingAddressContext = {};
var ShippingAddressContext = /*#__PURE__*/React.createContext(defaultShippingAddressContext);

var addressFields = ['city', 'company', 'country_code', 'first_name', 'last_name', 'line_1', 'line_2', 'phone', 'state_code', 'zip_code'];
var addressInitialState = {
  errors: []
};
var setAddressErrors = function setAddressErrors(errors, dispatch) {
  dispatch && dispatch({
    type: 'setErrors',
    payload: {
      errors: errors
    }
  });
};
var setAddress = function setAddress(_ref) {
  var _payload;

  var values = _ref.values,
      resource = _ref.resource,
      dispatch = _ref.dispatch;
  dispatch && dispatch({
    type: 'setAddress',
    payload: (_payload = {}, _payload["" + resource] = values, _payload)
  });
};
var setCloneAddress = function setCloneAddress(id, resource, dispatch) {
  var _payload2;

  dispatch({
    type: 'setCloneAddress',
    payload: (_payload2 = {}, _payload2[resource + "Id"] = id, _payload2)
  });
};
var saveAddresses = /*#__PURE__*/function () {
  var _ref3 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(_ref2) {
    var config, getOrder, order, state, shipToDifferentAddress, billingAddress, shippingAddress, billingAddressId, shippingAddressId, _order$billingAddress, currentBillingAddressRef, orderAttributes, _order$billingAddress2, _order$billingAddress3, o;

    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            config = _ref2.config, getOrder = _ref2.getOrder, order = _ref2.order, state = _ref2.state;
            shipToDifferentAddress = state.shipToDifferentAddress, billingAddress = state.billingAddress, shippingAddress = state.shippingAddress, billingAddressId = state.billingAddressId, shippingAddressId = state.shippingAddressId;
            _context.prev = 2;
            currentBillingAddressRef = order == null ? void 0 : (_order$billingAddress = order.billingAddress()) == null ? void 0 : _order$billingAddress.reference;
            orderAttributes = {
              _billingAddressCloneId: billingAddressId,
              _shippingAddressCloneId: billingAddressId
            };

            if (currentBillingAddressRef === billingAddressId) {
              orderAttributes._billingAddressCloneId = order == null ? void 0 : (_order$billingAddress2 = order.billingAddress()) == null ? void 0 : _order$billingAddress2.id;
              orderAttributes._shippingAddressCloneId = order == null ? void 0 : (_order$billingAddress3 = order.billingAddress()) == null ? void 0 : _order$billingAddress3.id;
            }

            if (!(!_.isEmpty(billingAddress) && billingAddress)) {
              _context.next = 13;
              break;
            }

            delete orderAttributes._billingAddressCloneId;
            delete orderAttributes._shippingAddressCloneId;
            orderAttributes._shippingAddressSameAsBilling = true;
            _context.next = 12;
            return CLayer.Address.withCredentials(config).create(billingAddress);

          case 12:
            orderAttributes.billingAddress = _context.sent;

          case 13:
            if (!shipToDifferentAddress) {
              _context.next = 21;
              break;
            }

            delete orderAttributes._shippingAddressSameAsBilling;
            if (shippingAddressId) orderAttributes._shippingAddressCloneId = shippingAddressId;

            if (!(!_.isEmpty(shippingAddress) && shippingAddress)) {
              _context.next = 21;
              break;
            }

            delete orderAttributes._shippingAddressCloneId;
            _context.next = 20;
            return CLayer.Address.withCredentials(config).create(shippingAddress);

          case 20:
            orderAttributes.shippingAddress = _context.sent;

          case 21:
            if (!(order && getOrder && !_.isEmpty(orderAttributes))) {
              _context.next = 29;
              break;
            }

            _context.next = 24;
            return CLayer.Order.withCredentials(config).find(order.id);

          case 24:
            o = _context.sent;
            _context.next = 27;
            return o.withCredentials(config).update(orderAttributes);

          case 27:
            _context.next = 29;
            return getOrder(order.id);

          case 29:
            _context.next = 34;
            break;

          case 31:
            _context.prev = 31;
            _context.t0 = _context["catch"](2);
            console.error(_context.t0);

          case 34:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[2, 31]]);
  }));

  return function saveAddresses(_x) {
    return _ref3.apply(this, arguments);
  };
}();
var type$1 = ['setErrors', 'setAddress', 'setShipToDifferentAddress', 'setCloneAddress'];

var addressReducer = function addressReducer(state, reducer) {
  return baseReducer(state, reducer, type$1);
};

var defaultAddressContext = {
  saveAddresses: function saveAddresses() {
    return;
  },
  setCloneAddress: function setCloneAddress() {
    return;
  },
  setAddress: setAddress,
  setAddressErrors: setAddressErrors
};
var AddressesContext = /*#__PURE__*/React.createContext(defaultAddressContext);

var propTypes$1 = components.Address.propTypes;

var Address = function Address(props) {
  var children = props.children,
      className = props.className,
      _props$selectedClassN = props.selectedClassName,
      selectedClassName = _props$selectedClassN === void 0 ? '' : _props$selectedClassN,
      _props$disabledClassN = props.disabledClassName,
      disabledClassName = _props$disabledClassN === void 0 ? '' : _props$disabledClassN,
      onSelect = props.onSelect,
      _props$addresses = props.addresses,
      addresses = _props$addresses === void 0 ? [] : _props$addresses,
      _props$deselect = props.deselect,
      deselect = _props$deselect === void 0 ? false : _props$deselect,
      p = _objectWithoutPropertiesLoose(props, ["children", "className", "selectedClassName", "disabledClassName", "onSelect", "addresses", "deselect"]);

  var _useContext = React.useContext(CustomerContext),
      addressesContext = _useContext.addresses;

  var _useContext2 = React.useContext(BillingAddressContext),
      setBillingAddress = _useContext2.setBillingAddress,
      billingCustomerAddressId = _useContext2.billingCustomerAddressId;

  var _useContext3 = React.useContext(ShippingAddressContext),
      setShippingAddress = _useContext3.setShippingAddress,
      shippingCustomerAddressId = _useContext3.shippingCustomerAddressId;

  var _useContext4 = React.useContext(AddressesContext),
      shipToDifferentAddress = _useContext4.shipToDifferentAddress,
      billingAddressId = _useContext4.billingAddressId,
      shippingAddressId = _useContext4.shippingAddressId;

  var _useContext5 = React.useContext(OrderContext),
      order = _useContext5.order;

  var _useState = React.useState(null),
      selected = _useState[0],
      setSelected = _useState[1];

  var items = !_.isEmpty(addresses) ? addresses : addressesContext && addressesContext || [];
  React.useEffect(function () {
    if (items && !deselect) {
      items.map(function (address, k) {
        if (billingCustomerAddressId) {
          var preselected = address.reference === billingCustomerAddressId;

          if (preselected && selected === null) {
            setSelected(k);
          }
        }

        if (!billingAddressId && k === selected) {
          setBillingAddress && setBillingAddress(address.id, {
            customerAddressId: address.customerAddressId
          });
        }

        if (shippingCustomerAddressId) {
          var _preselected = address.reference === shippingCustomerAddressId;

          _preselected && selected === null && setSelected(k);
        }

        if (!shippingAddressId && k === selected) {
          setShippingAddress && setShippingAddress(address.id, {
            customerAddressId: address.customerAddressId
          });
        }
      });
    }

    if (deselect) {
      var disabledSaveButton = /*#__PURE__*/function () {
        var _ref = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee() {
          return runtime_1.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _context.t0 = setBillingAddress;

                  if (!_context.t0) {
                    _context.next = 4;
                    break;
                  }

                  _context.next = 4;
                  return setBillingAddress('');

                case 4:
                  _context.t1 = setShippingAddress;

                  if (!_context.t1) {
                    _context.next = 8;
                    break;
                  }

                  _context.next = 8;
                  return setShippingAddress('');

                case 8:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }));

        return function disabledSaveButton() {
          return _ref.apply(this, arguments);
        };
      }();

      disabledSaveButton();
    }
  }, [deselect, billingCustomerAddressId, shippingCustomerAddressId, addressesContext, shipToDifferentAddress]);

  var handleSelect = /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(k, addressId, customerAddressId, disabled) {
      return runtime_1.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              !disabled && setSelected(k);
              _context2.t0 = setBillingAddress;

              if (!_context2.t0) {
                _context2.next = 5;
                break;
              }

              _context2.next = 5;
              return setBillingAddress(addressId, {
                customerAddressId: customerAddressId
              });

            case 5:
              _context2.t1 = !disabled && setShippingAddress;

              if (!_context2.t1) {
                _context2.next = 9;
                break;
              }

              _context2.next = 9;
              return setShippingAddress(addressId, {
                customerAddressId: customerAddressId
              });

            case 9:
              onSelect && onSelect();

            case 10:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function handleSelect(_x, _x2, _x3, _x4) {
      return _ref2.apply(this, arguments);
    };
  }();

  var components = items.map(function (address, k) {
    var addressProps = {
      address: address
    };
    var countryLock = order == null ? void 0 : order.shippingCountryCodeLock;
    var disabled = setShippingAddress && countryLock && countryLock !== address.countryCode || false;
    var selectedClass = deselect ? '' : selectedClassName;
    var addressSelectedClass = selected === k ? className + " " + selectedClass : className;
    var customerAddressId = (address == null ? void 0 : address.customerAddressId) || '';
    var finalClassName = disabled ? className + " " + disabledClassName : addressSelectedClass;
    return /*#__PURE__*/React__default.createElement(AddressChildrenContext.Provider, {
      key: k,
      value: addressProps
    }, /*#__PURE__*/React__default.createElement("div", _extends({
      className: finalClassName,
      onClick: function onClick() {
        return handleSelect(k, address.id, customerAddressId, disabled);
      },
      "data-disabled": disabled
    }, p), children));
  });
  return /*#__PURE__*/React__default.createElement(React.Fragment, null, components);
};

Address.propTypes = propTypes$1;

var BaseSelect = function BaseSelect(props, ref) {
  var _props$options = props.options,
      options = _props$options === void 0 ? [] : _props$options,
      children = props.children,
      _props$placeholder = props.placeholder,
      placeholder = _props$placeholder === void 0 ? {
    label: 'Select an option',
    value: ''
  } : _props$placeholder,
      _props$value = props.value,
      value = _props$value === void 0 ? '' : _props$value,
      p = _objectWithoutPropertiesLoose(props, ["options", "children", "placeholder", "value"]);

  if (_.findIndex(options, placeholder) === -1) {
    options.unshift(placeholder);
  } else {
    options[0] = placeholder;
  }

  var Options = options.map(function (o, k) {
    var label = o.label,
        option = _objectWithoutPropertiesLoose(o, ["label"]);

    return /*#__PURE__*/React__default.createElement("option", _extends({
      key: k
    }, option), label);
  });

  var parentProps = _extends({
    options: options,
    ref: ref
  }, p);

  return children ? /*#__PURE__*/React__default.createElement(Parent, parentProps, children) : /*#__PURE__*/React__default.createElement("select", _extends({
    ref: ref,
    defaultValue: value
  }, p), Options);
};

var BaseSelect$1 = /*#__PURE__*/React__default.forwardRef(BaseSelect);

var countriesOptions = [
	{
		label: "Afghanistan",
		value: "AF"
	},
	{
		label: "Albania",
		value: "AL"
	},
	{
		label: "Algeria",
		value: "DZ"
	},
	{
		label: "American Samoa",
		value: "AS"
	},
	{
		label: "Andorra",
		value: "AD"
	},
	{
		label: "Angola",
		value: "AO"
	},
	{
		label: "Anguilla",
		value: "AI"
	},
	{
		label: "Antarctica",
		value: "AQ"
	},
	{
		label: "Antigua and Barbuda",
		value: "AG"
	},
	{
		label: "Argentina",
		value: "AR"
	},
	{
		label: "Armenia",
		value: "AM"
	},
	{
		label: "Aruba",
		value: "AW"
	},
	{
		label: "Australia",
		value: "AU"
	},
	{
		label: "Austria",
		value: "AT"
	},
	{
		label: "Azerbaijan",
		value: "AZ"
	},
	{
		label: "Bahamas",
		value: "BS"
	},
	{
		label: "Bahrain",
		value: "BH"
	},
	{
		label: "Bangladesh",
		value: "BD"
	},
	{
		label: "Barbados",
		value: "BB"
	},
	{
		label: "Belarus",
		value: "BY"
	},
	{
		label: "Belgium",
		value: "BE"
	},
	{
		label: "Belize",
		value: "BZ"
	},
	{
		label: "Benin",
		value: "BJ"
	},
	{
		label: "Bermuda",
		value: "BM"
	},
	{
		label: "Bhutan",
		value: "BT"
	},
	{
		label: "Bolivia",
		value: "BO"
	},
	{
		label: "Bosnia and Herzegovina",
		value: "BA"
	},
	{
		label: "Botswana",
		value: "BW"
	},
	{
		label: "Bouvet Island",
		value: "BV"
	},
	{
		label: "Brazil",
		value: "BR"
	},
	{
		label: "British Indian Ocean Territory",
		value: "IO"
	},
	{
		label: "Brunei",
		value: "BN"
	},
	{
		label: "Bulgaria",
		value: "BG"
	},
	{
		label: "Burkina Faso",
		value: "BF"
	},
	{
		label: "Burundi",
		value: "BI"
	},
	{
		label: "Cambodia",
		value: "KH"
	},
	{
		label: "Cameroon",
		value: "CM"
	},
	{
		label: "Canada",
		value: "CA"
	},
	{
		label: "Cape Verde",
		value: "CV"
	},
	{
		label: "Cayman Islands",
		value: "KY"
	},
	{
		label: "Central African Republic",
		value: "CF"
	},
	{
		label: "Chad",
		value: "TD"
	},
	{
		label: "Chile",
		value: "CL"
	},
	{
		label: "China",
		value: "CN"
	},
	{
		label: "Christmas Island",
		value: "CX"
	},
	{
		label: "Cocos (Keeling) Islands",
		value: "CC"
	},
	{
		label: "Colombia",
		value: "CO"
	},
	{
		label: "Comoros",
		value: "KM"
	},
	{
		label: "Congo",
		value: "CG"
	},
	{
		label: "Cook Islands",
		value: "CK"
	},
	{
		label: "Costa Rica",
		value: "CR"
	},
	{
		label: "Croatia",
		value: "HR"
	},
	{
		label: "Cuba",
		value: "CU"
	},
	{
		label: "Cyprus",
		value: "CY"
	},
	{
		label: "Czech Republic",
		value: "CZ"
	},
	{
		label: "Denmark",
		value: "DK"
	},
	{
		label: "Djibouti",
		value: "DJ"
	},
	{
		label: "Dominica",
		value: "DM"
	},
	{
		label: "Dominican Republic",
		value: "DO"
	},
	{
		label: "East Timor",
		value: "TP"
	},
	{
		label: "Ecuador",
		value: "EC"
	},
	{
		label: "Egypt",
		value: "EG"
	},
	{
		label: "El Salvador",
		value: "SV"
	},
	{
		label: "Equatorial Guinea",
		value: "GQ"
	},
	{
		label: "Eritrea",
		value: "ER"
	},
	{
		label: "Estonia",
		value: "EE"
	},
	{
		label: "Ethiopia",
		value: "ET"
	},
	{
		label: "Falkland Islands",
		value: "FK"
	},
	{
		label: "Faroe Islands",
		value: "FO"
	},
	{
		label: "Fiji Islands",
		value: "FJ"
	},
	{
		label: "Finland",
		value: "FI"
	},
	{
		label: "France",
		value: "FR"
	},
	{
		label: "French Guiana",
		value: "GF"
	},
	{
		label: "French Polynesia",
		value: "PF"
	},
	{
		label: "French Southern territories",
		value: "TF"
	},
	{
		label: "Gabon",
		value: "GA"
	},
	{
		label: "Gambia",
		value: "GM"
	},
	{
		label: "Georgia",
		value: "GE"
	},
	{
		label: "Germany",
		value: "DE"
	},
	{
		label: "Ghana",
		value: "GH"
	},
	{
		label: "Gibraltar",
		value: "GI"
	},
	{
		label: "Greece",
		value: "GR"
	},
	{
		label: "Greenland",
		value: "GL"
	},
	{
		label: "Grenada",
		value: "GD"
	},
	{
		label: "Guadeloupe",
		value: "GP"
	},
	{
		label: "Guam",
		value: "GU"
	},
	{
		label: "Guatemala",
		value: "GT"
	},
	{
		label: "Guinea",
		value: "GN"
	},
	{
		label: "Guinea-Bissau",
		value: "GW"
	},
	{
		label: "Guyana",
		value: "GY"
	},
	{
		label: "Haiti",
		value: "HT"
	},
	{
		label: "Heard Island and McDonald Islands",
		value: "HM"
	},
	{
		label: "Holy See (Vatican City State)",
		value: "VA"
	},
	{
		label: "Honduras",
		value: "HN"
	},
	{
		label: "Hong Kong",
		value: "HK"
	},
	{
		label: "Hungary",
		value: "HU"
	},
	{
		label: "Iceland",
		value: "IS"
	},
	{
		label: "India",
		value: "IN"
	},
	{
		label: "Indonesia",
		value: "ID"
	},
	{
		label: "Iran",
		value: "IR"
	},
	{
		label: "Iraq",
		value: "IQ"
	},
	{
		label: "Ireland",
		value: "IE"
	},
	{
		label: "Israel",
		value: "IL"
	},
	{
		label: "Italy",
		value: "IT"
	},
	{
		label: "Ivory Coast",
		value: "CI"
	},
	{
		label: "Jamaica",
		value: "JM"
	},
	{
		label: "Japan",
		value: "JP"
	},
	{
		label: "Jordan",
		value: "JO"
	},
	{
		label: "Kazakhstan",
		value: "KZ"
	},
	{
		label: "Kenya",
		value: "KE"
	},
	{
		label: "Kiribati",
		value: "KI"
	},
	{
		label: "Kuwait",
		value: "KW"
	},
	{
		label: "Kyrgyzstan",
		value: "KG"
	},
	{
		label: "Laos",
		value: "LA"
	},
	{
		label: "Latvia",
		value: "LV"
	},
	{
		label: "Lebanon",
		value: "LB"
	},
	{
		label: "Lesotho",
		value: "LS"
	},
	{
		label: "Liberia",
		value: "LR"
	},
	{
		label: "Libyan Arab Jamahiriya",
		value: "LY"
	},
	{
		label: "Liechtenstein",
		value: "LI"
	},
	{
		label: "Lithuania",
		value: "LT"
	},
	{
		label: "Luxembourg",
		value: "LU"
	},
	{
		label: "Macao",
		value: "MO"
	},
	{
		label: "North Macedonia",
		value: "MK"
	},
	{
		label: "Madagascar",
		value: "MG"
	},
	{
		label: "Malawi",
		value: "MW"
	},
	{
		label: "Malaysia",
		value: "MY"
	},
	{
		label: "Maldives",
		value: "MV"
	},
	{
		label: "Mali",
		value: "ML"
	},
	{
		label: "Malta",
		value: "MT"
	},
	{
		label: "Marshall Islands",
		value: "MH"
	},
	{
		label: "Martinique",
		value: "MQ"
	},
	{
		label: "Mauritania",
		value: "MR"
	},
	{
		label: "Mauritius",
		value: "MU"
	},
	{
		label: "Mayotte",
		value: "YT"
	},
	{
		label: "Mexico",
		value: "MX"
	},
	{
		label: "Micronesia, Federated States of",
		value: "FM"
	},
	{
		label: "Moldova",
		value: "MD"
	},
	{
		label: "Monaco",
		value: "MC"
	},
	{
		label: "Mongolia",
		value: "MN"
	},
	{
		label: "Montserrat",
		value: "MS"
	},
	{
		label: "Morocco",
		value: "MA"
	},
	{
		label: "Mozambique",
		value: "MZ"
	},
	{
		label: "Myanmar",
		value: "MM"
	},
	{
		label: "Namibia",
		value: "NA"
	},
	{
		label: "Nauru",
		value: "NR"
	},
	{
		label: "Nepal",
		value: "NP"
	},
	{
		label: "Netherlands",
		value: "NL"
	},
	{
		label: "Netherlands Antilles",
		value: "AN"
	},
	{
		label: "New Caledonia",
		value: "NC"
	},
	{
		label: "New Zealand",
		value: "NZ"
	},
	{
		label: "Nicaragua",
		value: "NI"
	},
	{
		label: "Niger",
		value: "NE"
	},
	{
		label: "Nigeria",
		value: "NG"
	},
	{
		label: "Niue",
		value: "NU"
	},
	{
		label: "Norfolk Island",
		value: "NF"
	},
	{
		label: "North Korea",
		value: "KP"
	},
	{
		label: "Northern Mariana Islands",
		value: "MP"
	},
	{
		label: "Norway",
		value: "NO"
	},
	{
		label: "Oman",
		value: "OM"
	},
	{
		label: "Pakistan",
		value: "PK"
	},
	{
		label: "Palau",
		value: "PW"
	},
	{
		label: "Palestine",
		value: "PS"
	},
	{
		label: "Panama",
		value: "PA"
	},
	{
		label: "Papua New Guinea",
		value: "PG"
	},
	{
		label: "Paraguay",
		value: "PY"
	},
	{
		label: "Peru",
		value: "PE"
	},
	{
		label: "Philippines",
		value: "PH"
	},
	{
		label: "Pitcairn",
		value: "PN"
	},
	{
		label: "Poland",
		value: "PL"
	},
	{
		label: "Portugal",
		value: "PT"
	},
	{
		label: "Puerto Rico",
		value: "PR"
	},
	{
		label: "Qatar",
		value: "QA"
	},
	{
		label: "Reunion",
		value: "RE"
	},
	{
		label: "Romania",
		value: "RO"
	},
	{
		label: "Russian Federation",
		value: "RU"
	},
	{
		label: "Rwanda",
		value: "RW"
	},
	{
		label: "Saint Helena",
		value: "SH"
	},
	{
		label: "Saint Kitts and Nevis",
		value: "KN"
	},
	{
		label: "Saint Lucia",
		value: "LC"
	},
	{
		label: "Saint Pierre and Miquelon",
		value: "PM"
	},
	{
		label: "Saint Vincent and the Grenadines",
		value: "VC"
	},
	{
		label: "Samoa",
		value: "WS"
	},
	{
		label: "San Marino",
		value: "SM"
	},
	{
		label: "Sao Tome and Principe",
		value: "ST"
	},
	{
		label: "Saudi Arabia",
		value: "SA"
	},
	{
		label: "Senegal",
		value: "SN"
	},
	{
		label: "Seychelles",
		value: "SC"
	},
	{
		label: "Sierra Leone",
		value: "SL"
	},
	{
		label: "Singapore",
		value: "SG"
	},
	{
		label: "Slovakia",
		value: "SK"
	},
	{
		label: "Slovenia",
		value: "SI"
	},
	{
		label: "Solomon Islands",
		value: "SB"
	},
	{
		label: "Somalia",
		value: "SO"
	},
	{
		label: "South Africa",
		value: "ZA"
	},
	{
		label: "South Georgia and the South Sandwich Islands",
		value: "GS"
	},
	{
		label: "South Korea",
		value: "KR"
	},
	{
		label: "South Sudan",
		value: "SS"
	},
	{
		label: "Spain",
		value: "ES"
	},
	{
		label: "Sri Lanka",
		value: "LK"
	},
	{
		label: "Sudan",
		value: "SD"
	},
	{
		label: "Surilabel",
		value: "SR"
	},
	{
		label: "Svalbard and Jan Mayen",
		value: "SJ"
	},
	{
		label: "Swaziland",
		value: "SZ"
	},
	{
		label: "Sweden",
		value: "SE"
	},
	{
		label: "Switzerland",
		value: "CH"
	},
	{
		label: "Syria",
		value: "SY"
	},
	{
		label: "Tajikistan",
		value: "TJ"
	},
	{
		label: "Tanzania",
		value: "TZ"
	},
	{
		label: "Thailand",
		value: "TH"
	},
	{
		label: "The Democratic Republic of Congo",
		value: "CD"
	},
	{
		label: "Togo",
		value: "TG"
	},
	{
		label: "Tokelau",
		value: "TK"
	},
	{
		label: "Tonga",
		value: "TO"
	},
	{
		label: "Trinidad and Tobago",
		value: "TT"
	},
	{
		label: "Tunisia",
		value: "TN"
	},
	{
		label: "Turkey",
		value: "TR"
	},
	{
		label: "Turkmenistan",
		value: "TM"
	},
	{
		label: "Turks and Caicos Islands",
		value: "TC"
	},
	{
		label: "Tuvalu",
		value: "TV"
	},
	{
		label: "Uganda",
		value: "UG"
	},
	{
		label: "Ukraine",
		value: "UA"
	},
	{
		label: "United Arab Emirates",
		value: "AE"
	},
	{
		label: "United Kingdom",
		value: "GB"
	},
	{
		label: "United States",
		value: "US",
		states: [
			"AL",
			"AK",
			"AZ",
			"AR",
			"CA",
			"CO",
			"CT",
			"DE",
			"DC",
			"FL",
			"GA",
			"HI",
			"ID",
			"IL",
			"IN",
			"IA",
			"KS",
			"KY",
			"LA",
			"ME",
			"MD",
			"MA",
			"MI",
			"MN",
			"MS",
			"MO",
			"MT",
			"NE",
			"NV",
			"NH",
			"NJ",
			"NM",
			"NY",
			"NC",
			"ND",
			"OH",
			"OK",
			"OR",
			"PA",
			"PR",
			"RI",
			"SC",
			"SD",
			"TN",
			"TX",
			"UT",
			"VT",
			"VA",
			"WA",
			"WV",
			"WI",
			"WY"
		]
	},
	{
		label: "United States Minor Outlying Islands",
		value: "UM"
	},
	{
		label: "Uruguay",
		value: "UY"
	},
	{
		label: "Uzbekistan",
		value: "UZ"
	},
	{
		label: "Vanuatu",
		value: "VU"
	},
	{
		label: "Venezuela",
		value: "VE"
	},
	{
		label: "Vietnam",
		value: "VN"
	},
	{
		label: "Virgin Islands, British",
		value: "VG"
	},
	{
		label: "Virgin Islands, U.S.",
		value: "VI"
	},
	{
		label: "Wallis and Futuna",
		value: "WF"
	},
	{
		label: "Western Sahara",
		value: "EH"
	},
	{
		label: "Yemen",
		value: "YE"
	},
	{
		label: "Yugoslavia",
		value: "YU"
	},
	{
		label: "Zambia",
		value: "ZM"
	},
	{
		label: "Zimbabwe",
		value: "ZW"
	}
];

var BillingAddressFormContext = /*#__PURE__*/React.createContext({});

var ShippingAddressFormContext = /*#__PURE__*/React.createContext({});

var propTypes$2 = components.AddressCountrySelector.propTypes;
var defaultProps$1 = components.AddressCountrySelector.defaultProps;
var displayName$1 = components.AddressCountrySelector.displayName;

var AddressCountrySelector = function AddressCountrySelector(props) {
  var _props$required = props.required,
      required = _props$required === void 0 ? true : _props$required,
      value = props.value,
      name = props.name;
  var billingAddress = React.useContext(BillingAddressFormContext);
  var shippingAddress = React.useContext(ShippingAddressFormContext);
  React.useEffect(function () {
    if (value && billingAddress != null && billingAddress.setValue) {
      billingAddress.setValue(name, value);
    }

    if (value && shippingAddress != null && shippingAddress.setValue) {
      shippingAddress.setValue(name, value);
    }
  }, [value]);
  return /*#__PURE__*/React__default.createElement(BaseSelect$1, _extends({
    ref: (billingAddress == null ? void 0 : billingAddress.validation) || (shippingAddress == null ? void 0 : shippingAddress.validation),
    required: required,
    options: countriesOptions
  }, props));
};

AddressCountrySelector.propTypes = propTypes$2;
AddressCountrySelector.defaultProps = defaultProps$1;
AddressCountrySelector.displayName = displayName$1;

var propTypes$3 = components.AddressField.propTypes;
var displayName$2 = components.AddressField.displayName;

var AddressField = function AddressField(props) {
  var name = props.name;

  var _useContext = React.useContext(AddressChildrenContext),
      address = _useContext.address;

  var key = _.camelCase(name);

  var text = _.get(address, key);

  var parentProps = _extends({}, props);

  return props.children ? /*#__PURE__*/React__default.createElement(Parent, parentProps, props.children) : /*#__PURE__*/React__default.createElement("p", props, text);
};

AddressField.propTypes = propTypes$3;
AddressField.displayName = displayName$2;

var BaseInput = function BaseInput(props, ref) {
  var children = props.children,
      p = _objectWithoutPropertiesLoose(props, ["children"]);

  var input = props.type === 'textarea' ? /*#__PURE__*/React__default.createElement("textarea", _extends({
    ref: ref
  }, p)) : /*#__PURE__*/React__default.createElement("input", _extends({
    ref: ref
  }, p));
  return children ? /*#__PURE__*/React__default.createElement(Parent, p, children) : input;
};

var BaseInput$1 = /*#__PURE__*/React__default.forwardRef(BaseInput);

var propTypes$4 = components.AddressInput.propTypes;
var displayName$3 = components.AddressInput.displayName;

var AddressInput = function AddressInput(props) {
  var _props$placeholder = props.placeholder,
      placeholder = _props$placeholder === void 0 ? '' : _props$placeholder,
      required = props.required,
      value = props.value,
      p = _objectWithoutPropertiesLoose(props, ["placeholder", "required", "value"]);

  var billingAddress = React.useContext(BillingAddressFormContext);
  var shippingAddress = React.useContext(ShippingAddressFormContext);
  React.useEffect(function () {
    if (value && billingAddress != null && billingAddress.setValue) {
      billingAddress.setValue(p.name, value);
    }

    if (value && shippingAddress != null && shippingAddress.setValue) {
      shippingAddress.setValue(p.name, value);
    }
  }, [value]);
  return /*#__PURE__*/React__default.createElement(BaseInput$1, _extends({
    ref: (billingAddress == null ? void 0 : billingAddress.validation) || (shippingAddress == null ? void 0 : shippingAddress.validation),
    required: required !== undefined ? required : true,
    placeholder: placeholder,
    defaultValue: value
  }, p));
};

AddressInput.propTypes = propTypes$4;
AddressInput.displayName = displayName$3;

var initial$1 = {
  accessToken: '',
  endpoint: '',
  cache: false
};
var CommerceLayerContext = /*#__PURE__*/React.createContext(initial$1);

var propTypes$5 = components.AddressesContainer.propTypes;
var displayName$4 = components.AddressesContainer.displayName;

var AddressesContainer = function AddressesContainer(props) {
  var children = props.children,
      _props$shipToDifferen = props.shipToDifferentAddress,
      shipToDifferentAddress = _props$shipToDifferen === void 0 ? false : _props$shipToDifferen;

  var _useReducer = React.useReducer(addressReducer, addressInitialState),
      state = _useReducer[0],
      dispatch = _useReducer[1];

  var _useContext = React.useContext(OrderContext),
      order = _useContext.order,
      orderId = _useContext.orderId,
      getOrder = _useContext.getOrder;

  var config = React.useContext(CommerceLayerContext);
  React.useEffect(function () {
    dispatch({
      type: 'setShipToDifferentAddress',
      payload: {
        shipToDifferentAddress: shipToDifferentAddress
      }
    });
  }, [shipToDifferentAddress]);

  var contextValue = _extends({}, state, {
    setAddressErrors: function setAddressErrors(errors) {
      return defaultAddressContext['setAddressErrors'](errors, dispatch);
    },
    setAddress: function setAddress(params) {
      return defaultAddressContext['setAddress'](_extends({}, params, {
        dispatch: dispatch
      }));
    },
    saveAddresses: function () {
      var _saveAddresses2 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee() {
        return runtime_1.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return saveAddresses({
                  config: config,
                  dispatch: dispatch,
                  getOrder: getOrder,
                  order: order,
                  orderId: orderId,
                  state: state
                });

              case 2:
                return _context.abrupt("return", _context.sent);

              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function saveAddresses$1() {
        return _saveAddresses2.apply(this, arguments);
      }

      return saveAddresses$1;
    }(),
    setCloneAddress: function setCloneAddress$1(id, resource) {
      return setCloneAddress(id, resource, dispatch);
    }
  });

  return /*#__PURE__*/React__default.createElement(AddressesContext.Provider, {
    value: contextValue
  }, children);
};

AddressesContainer.propTypes = propTypes$5;
AddressesContainer.displayName = displayName$4;

var availabilityInitialState = {
  quantity: null,
  min: {
    days: 0,
    hours: 0
  },
  max: {
    days: 0,
    hours: 0
  },
  errors: []
};
var getAvailability = /*#__PURE__*/function () {
  var _ref2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(_ref) {
    var _inventorySku$invento;

    var skuCode, dispatch, config, sku, inventorySku, firstLevel, firstDelivery;
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            skuCode = _ref.skuCode, dispatch = _ref.dispatch, config = _ref.config;
            _context.next = 3;
            return CLayer.Sku.withCredentials(config).select('id').where({
              codeIn: skuCode
            }).first();

          case 3:
            sku = _context.sent;
            _context.next = 6;
            return CLayer.Sku.withCredentials(config).select('inventory').find(sku.id);

          case 6:
            inventorySku = _context.sent;
            firstLevel = _.first(inventorySku == null ? void 0 : (_inventorySku$invento = inventorySku.inventory) == null ? void 0 : _inventorySku$invento.levels);
            firstDelivery = _.first(firstLevel == null ? void 0 : firstLevel.deliveryLeadTimes);
            dispatch({
              type: 'setAvailability',
              payload: _extends({}, firstDelivery, {
                quantity: firstLevel == null ? void 0 : firstLevel.quantity
              })
            });

          case 10:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function getAvailability(_x) {
    return _ref2.apply(this, arguments);
  };
}();
var typeAction = ['setAvailability', 'setErrors'];

var availabilityReducer = function availabilityReducer(state, reducer) {
  return baseReducer(state, reducer, typeAction);
};

var AvailabilityContext = /*#__PURE__*/React.createContext(availabilityInitialState);

var propTypes$6 = components.AvailabilityContainer.propTypes;
var displayName$5 = components.AvailabilityContainer.displayName;

var AvailabilityContainer = function AvailabilityContainer(props) {
  var children = props.children,
      skuCode = props.skuCode;

  var _useContext = React.useContext(ItemContext),
      item = _useContext.item,
      itemSkuCode = _useContext.skuCode;

  var config = React.useContext(CommerceLayerContext);

  var _useReducer = React.useReducer(availabilityReducer, availabilityInitialState),
      state = _useReducer[0],
      dispatch = _useReducer[1];

  React.useEffect(function () {
    var sCode = skuCode || getCurrentItemKey(item) || itemSkuCode;

    if (sCode) {
      var _item$sCode, _item$sCode$inventory;

      var firstLevel = _.first((_item$sCode = item[sCode]) == null ? void 0 : (_item$sCode$inventory = _item$sCode.inventory) == null ? void 0 : _item$sCode$inventory.levels) || {
        quantity: null,
        deliveryLeadTimes: []
      };

      if (!_.isEmpty(firstLevel) && firstLevel.deliveryLeadTimes.length > 0) {
        var firstDelivery = _.first(firstLevel.deliveryLeadTimes);

        dispatch({
          type: 'setAvailability',
          payload: _extends({}, firstDelivery, {
            quantity: firstLevel == null ? void 0 : firstLevel.quantity
          })
        });
      } else if (config.accessToken) {
        getAvailability({
          skuCode: sCode,
          config: config,
          dispatch: dispatch
        });
      }
    }

    return function () {
      dispatch({
        type: 'setAvailability',
        payload: {}
      });
    };
  }, [config.accessToken, item, itemSkuCode]);
  return /*#__PURE__*/React__default.createElement(AvailabilityContext.Provider, {
    value: _extends({}, state)
  }, children);
};

AvailabilityContainer.propTypes = propTypes$6;
AvailabilityContainer.displayName = displayName$5;

var propTypes$7 = components.AvailabilityTemplate.propTypes;
var defaultProps$2 = components.AvailabilityTemplate.defaultProps;
var displayName$6 = components.AvailabilityTemplate.displayName;

var AvailabilityTemplate = function AvailabilityTemplate(props) {
  var timeFormat = props.timeFormat,
      showShippingMethodName = props.showShippingMethodName,
      children = props.children,
      p = _objectWithoutPropertiesLoose(props, ["timeFormat", "showShippingMethodName", "children"]);

  var _useContext = React.useContext(AvailabilityContext),
      min = _useContext.min,
      max = _useContext.max,
      shippingMethod = _useContext.shippingMethod,
      quantity = _useContext.quantity;

  var mn = !_.isEmpty(min) ? min["" + timeFormat] : '';
  var mx = !_.isEmpty(max) ? max["" + timeFormat] : '';
  var text = [];
  var name = showShippingMethodName && shippingMethod ? "with " + shippingMethod.name : '';

  if (quantity && quantity > 0) {
    text.push('Available');

    if (mn && mx) {
      text.push("in " + mn + " - " + mx + " " + timeFormat + " " + name);
    }
  } else if (quantity === 0) {
    text.push('Out of stock');
  }

  var parentProps = _extends({
    min: min,
    max: max,
    shippingMethod: shippingMethod,
    quantity: quantity
  }, props);

  return children ? /*#__PURE__*/React__default.createElement(Parent, parentProps, children) : /*#__PURE__*/React__default.createElement("p", p, text.join(' '));
};

AvailabilityTemplate.propTypes = propTypes$7;
AvailabilityTemplate.defaultProps = defaultProps$2;
AvailabilityTemplate.displayName = displayName$6;

var billingAddressInitialState = {
  _billingAddressCloneId: ''
};
var setBillingAddress = /*#__PURE__*/function () {
  var _ref = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(id, options) {
    var address;
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;

            if (!(options != null && options.order)) {
              _context.next = 10;
              break;
            }

            if (!options.customerAddressId) {
              _context.next = 9;
              break;
            }

            _context.next = 5;
            return CLayer.Address.withCredentials(options.config).find(id);

          case 5:
            address = _context.sent;

            if (!(address.reference !== options.customerAddressId)) {
              _context.next = 9;
              break;
            }

            _context.next = 9;
            return address.withCredentials(options.config).update({
              reference: options.customerAddressId
            });

          case 9:
            options.dispatch({
              type: 'setBillingAddress',
              payload: {
                _billingAddressCloneId: id
              }
            });

          case 10:
            _context.next = 15;
            break;

          case 12:
            _context.prev = 12;
            _context.t0 = _context["catch"](0);
            console.error(_context.t0);

          case 15:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[0, 12]]);
  }));

  return function setBillingAddress(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();
var setBillingCustomerAddressId = function setBillingCustomerAddressId(_ref2) {
  var customerAddressId = _ref2.customerAddressId,
      dispatch = _ref2.dispatch;
  dispatch({
    type: 'setBillingCustomerAddressId',
    payload: {
      billingCustomerAddressId: customerAddressId
    }
  });
};
var type$2 = ['setBillingAddress', 'setBillingCustomerAddressId'];

var billingAddressReducer = function billingAddressReducer(state, reducer) {
  return baseReducer(state, reducer, type$2);
};

var propTypes$8 = components.BillingAddressContainer.propTypes;

var BillingAddressContainer = function BillingAddressContainer(props) {
  var children = props.children;

  var _useReducer = React.useReducer(billingAddressReducer, billingAddressInitialState),
      state = _useReducer[0],
      dispatch = _useReducer[1];

  var config = React.useContext(CommerceLayerContext);

  var _useContext = React.useContext(OrderContext),
      order = _useContext.order,
      getOrder = _useContext.getOrder;

  var _useContext2 = React.useContext(AddressesContext),
      shipToDifferentAddress = _useContext2.shipToDifferentAddress,
      setCloneAddress = _useContext2.setCloneAddress;

  React.useEffect(function () {
    if (order) {
      var _order$billingAddress;

      var customerAddressId = ((_order$billingAddress = order.billingAddress()) == null ? void 0 : _order$billingAddress.reference) || '';
      setBillingCustomerAddressId({
        customerAddressId: customerAddressId,
        dispatch: dispatch
      });
      setCloneAddress(customerAddressId, 'billingAddress');
    }
  }, [order]);

  var contextValue = _extends({}, state, {
    setBillingAddress: function () {
      var _setBillingAddress2 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(id, options) {
        return runtime_1.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return setBillingAddress(id, {
                  config: config,
                  dispatch: dispatch,
                  order: order,
                  getOrder: getOrder,
                  shipToDifferentAddress: shipToDifferentAddress,
                  customerAddressId: options == null ? void 0 : options.customerAddressId
                });

              case 2:
                setCloneAddress(id, 'billingAddress');

              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function setBillingAddress$1(_x, _x2) {
        return _setBillingAddress2.apply(this, arguments);
      }

      return setBillingAddress$1;
    }()
  });

  return /*#__PURE__*/React__default.createElement(BillingAddressContext.Provider, {
    value: contextValue
  }, children);
};

BillingAddressContainer.propTypes = propTypes$8;

var propTypes$9 = components.BillingAddressForm.propTypes;

var BillingAddressForm = function BillingAddressForm(props) {
  var children = props.children,
      _props$autoComplete = props.autoComplete,
      autoComplete = _props$autoComplete === void 0 ? 'on' : _props$autoComplete,
      _props$reset = props.reset,
      reset = _props$reset === void 0 ? false : _props$reset,
      p = _objectWithoutPropertiesLoose(props, ["children", "autoComplete", "reset"]);

  var _useRapidForm = useRapidForm(),
      validation = _useRapidForm.validation,
      values = _useRapidForm.values,
      errors = _useRapidForm.errors,
      resetForm = _useRapidForm.reset;

  var _useContext = React.useContext(AddressesContext),
      setAddressErrors = _useContext.setAddressErrors,
      setAddress = _useContext.setAddress;

  var _useContext2 = React.useContext(OrderContext),
      saveAddressToCustomerBook = _useContext2.saveAddressToCustomerBook;

  var ref = React.useRef(null);
  React.useEffect(function () {
    if (!_.isEmpty(errors)) {
      var formErrors = [];

      for (var fieldName in errors) {
        var _errors$fieldName = errors[fieldName],
            code = _errors$fieldName.code,
            message = _errors$fieldName.message;
        formErrors.push({
          code: code,
          message: message,
          resource: 'billingAddress',
          field: fieldName
        });
      }

      !_.isEmpty(formErrors) && setAddressErrors(formErrors);
    } else if (!_.isEmpty(values)) {
      setAddressErrors([]);

      for (var name in values) {
        var field = values[name];

        if (field != null && field.value) {
          values[name.replace('billing_address_', '')] = field.value;
          delete values[name];
        }

        if ((field == null ? void 0 : field.type) === 'checkbox') {
          delete values[name];
          saveAddressToCustomerBook('BillingAddress', field.checked);
        }
      }

      setAddress({
        values: values,
        resource: 'billingAddress'
      });
    }

    if (reset && (!_.isEmpty(values) || !_.isEmpty(errors))) {
      saveAddressToCustomerBook && saveAddressToCustomerBook('BillingAddress', false);

      if (ref) {
        var _ref$current;

        // debugger
        (_ref$current = ref.current) == null ? void 0 : _ref$current.reset();
        resetForm({
          target: ref.current
        });
        setAddressErrors([]);
        setAddress({
          values: {},
          resource: 'billingAddress'
        });
      }
    }
  }, [errors, values, reset]);

  var setValue = function setValue(name, value) {
    var _field;

    var field = (_field = {}, _field[name.replace('billing_address_', '')] = value, _field);
    setAddress({
      values: _extends({}, values, field),
      resource: 'billingAddress'
    });
  };

  return /*#__PURE__*/React__default.createElement(BillingAddressFormContext.Provider, {
    value: {
      validation: validation,
      setValue: setValue
    }
  }, /*#__PURE__*/React__default.createElement("form", _extends({
    ref: ref,
    autoComplete: autoComplete
  }, p), children));
};

BillingAddressForm.propTypes = propTypes$9;

var propTypes$a = components.CheckoutLink.propTypes;
var defaultProps$3 = components.CheckoutLink.defaultProps;
var displayName$7 = components.CheckoutLink.displayName;

var CheckoutLink = function CheckoutLink(props) {
  var label = props.label,
      children = props.children,
      p = _objectWithoutPropertiesLoose(props, ["label", "children"]);

  var _useContext = React.useContext(OrderContext),
      order = _useContext.order;

  var parentProps = _extends({
    checkoutUrl: order == null ? void 0 : order.checkoutUrl,
    label: label
  }, p);

  return children ? /*#__PURE__*/React__default.createElement(Parent, parentProps, children) : /*#__PURE__*/React__default.createElement("a", _extends({
    href: order == null ? void 0 : order.checkoutUrl
  }, p), label);
};

CheckoutLink.propTypes = propTypes$a;
CheckoutLink.defaultProps = defaultProps$3;
CheckoutLink.displayName = displayName$7;

var propTypes$b = components.CommerceLayer.propTypes;

var CommerceLayer = function CommerceLayer(props) {
  var children = props.children,
      _props$cache = props.cache,
      cache = _props$cache === void 0 ? false : _props$cache,
      p = _objectWithoutPropertiesLoose(props, ["children", "cache"]);

  return /*#__PURE__*/React__default.createElement(CommerceLayerContext.Provider, {
    value: _extends({}, p, {
      cache: cache
    })
  }, children);
};

CommerceLayer.propTypes = propTypes$b;
CommerceLayer.defaultProps = {
  cache: false
};

var propTypes$c = components.CustomerContainer.propTypes;
var displayName$8 = components.CustomerContainer.displayName;

var CustomerContainer = function CustomerContainer(props) {
  var children = props.children,
      _props$isGuest = props.isGuest,
      isGuest = _props$isGuest === void 0 ? false : _props$isGuest;

  var _useReducer = React.useReducer(customerReducer, customerInitialState),
      state = _useReducer[0],
      dispatch = _useReducer[1];

  var _useContext = React.useContext(OrderContext),
      order = _useContext.order,
      getOrder = _useContext.getOrder;

  var config = React.useContext(CommerceLayerContext);
  React.useEffect(function () {
    if (config.accessToken && _.isEmpty(state.addresses) && !isGuest) {
      getCustomerAddresses({
        config: config,
        dispatch: dispatch
      });
    }
  }, [config.accessToken]);

  var contextValue = _extends({}, state, {
    saveCustomerUser: function () {
      var _saveCustomerUser2 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(customerEmail) {
        return runtime_1.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return saveCustomerUser({
                  config: config,
                  customerEmail: customerEmail,
                  dispatch: dispatch,
                  getOrder: getOrder,
                  order: order
                });

              case 2:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function saveCustomerUser$1(_x) {
        return _saveCustomerUser2.apply(this, arguments);
      }

      return saveCustomerUser$1;
    }(),
    setCustomerErrors: function setCustomerErrors(errors) {
      return defaultCustomerContext['setCustomerErrors'](errors, dispatch);
    },
    setCustomerEmail: function setCustomerEmail(customerEmail) {
      return defaultCustomerContext['setCustomerEmail'](customerEmail, dispatch);
    }
  });

  return /*#__PURE__*/React__default.createElement(CustomerContext.Provider, {
    value: contextValue
  }, children);
};

CustomerContainer.propTypes = propTypes$c;
CustomerContainer.displayName = displayName$8;

var propTypes$d = components.CustomerInput.propTypes;
var displayName$9 = components.CustomerInput.displayName;

var CustomerInput = function CustomerInput(props) {
  var _props$name = props.name,
      name = _props$name === void 0 ? 'customer_email' : _props$name,
      _props$placeholder = props.placeholder,
      placeholder = _props$placeholder === void 0 ? '' : _props$placeholder,
      _props$required = props.required,
      required = _props$required === void 0 ? true : _props$required,
      _props$saveOnBlur = props.saveOnBlur,
      saveOnBlur = _props$saveOnBlur === void 0 ? false : _props$saveOnBlur,
      _props$type = props.type,
      type = _props$type === void 0 ? 'email' : _props$type,
      value = props.value,
      onBlur = props.onBlur,
      p = _objectWithoutPropertiesLoose(props, ["name", "placeholder", "required", "saveOnBlur", "type", "value", "onBlur"]);

  var _useRapidForm = useRapidForm(),
      validation = _useRapidForm.validation,
      values = _useRapidForm.values,
      errors = _useRapidForm.errors;

  var _useContext = React.useContext(CustomerContext),
      saveCustomerUser = _useContext.saveCustomerUser,
      setCustomerErrors = _useContext.setCustomerErrors,
      setCustomerEmail = _useContext.setCustomerEmail;

  var handleOnBlur = /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee() {
      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!(saveOnBlur && _.isEmpty(errors) && !_.isEmpty(values))) {
                _context.next = 4;
                break;
              }

              _context.next = 3;
              return saveCustomerUser(values[name].value);

            case 3:
              onBlur && onBlur();

            case 4:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function handleOnBlur() {
      return _ref.apply(this, arguments);
    };
  }();

  React.useEffect(function () {
    if (!_.isEmpty(errors)) {
      var formErrors = [];

      for (var fieldName in errors) {
        var _errors$fieldName = errors[fieldName],
            code = _errors$fieldName.code,
            message = _errors$fieldName.message;
        formErrors.push({
          code: code,
          message: message,
          resource: 'order',
          field: fieldName
        });
      }

      !_.isEmpty(formErrors) && setCustomerErrors(formErrors);
    } else if (!_.isEmpty(values)) {
      setCustomerErrors([]);
      setCustomerEmail(values[name].value);
    }
  }, [errors]);
  return /*#__PURE__*/React__default.createElement(BaseInput$1, _extends({
    name: name,
    type: type,
    ref: validation,
    required: required,
    placeholder: placeholder,
    defaultValue: value,
    onBlur: handleOnBlur
  }, p));
};

CustomerInput.propTypes = propTypes$d;
CustomerInput.displayName = displayName$9;

var getAmount = function getAmount(base, type, format, obj) {
  var v;

  _.keys(obj).map(function (k) {
    var key = k.toLowerCase();
    var typeOne = ("" + format + type + base).toLowerCase();
    var typeTwo = ("" + type + base + format).toLowerCase();
    var typeThree = ("" + format + base + type).toLowerCase();
    var typeFourth = ("" + base + type + format).toLowerCase();

    if (key === typeOne) {
      v = obj[k];
    }

    if (key === typeTwo) {
      v = obj[k];
    }

    if (key === typeThree) {
      v = obj[k];
    }

    if (key === typeFourth) {
      v = obj[k];
    }
  });

  return v;
};

var BaseOrderPrice = function BaseOrderPrice(props) {
  var format = props.format,
      base = props.base,
      type = props.type,
      children = props.children,
      p = _objectWithoutPropertiesLoose(props, ["format", "base", "type", "children"]);

  var _useContext = React.useContext(OrderContext),
      order = _useContext.order;

  var _useState = React.useState(''),
      price = _useState[0],
      setPrice = _useState[1];

  React.useEffect(function () {
    var p = getAmount(base, type, format || 'formatted', order || {});
    setPrice(p);
    return function () {
      if (_.isEmpty(order)) {
        setPrice('');
      }
    };
  }, [order]);

  var parentProps = _extends({
    price: price
  }, p);

  return props.children ? /*#__PURE__*/React__default.createElement(Parent, parentProps, children) : /*#__PURE__*/React__default.createElement("span", p, price);
};

BaseOrderPrice.propTypes = baseOrderPricePropTypes;
BaseOrderPrice.defaultProps = {
  format: 'formatted'
};

var propTypes$e = components.DiscountAmount.propTypes;
var defaultProps$4 = components.DiscountAmount.defaultProps;
var displayName$a = components.DiscountAmount.displayName;

var DiscountAmount = function DiscountAmount(props) {
  return /*#__PURE__*/React__default.createElement(BaseOrderPrice, _extends({
    base: "amount",
    type: "discount"
  }, props));
};

DiscountAmount.propTypes = propTypes$e;
DiscountAmount.defaultProps = defaultProps$4;
DiscountAmount.displayName = displayName$a;

var giftCardInitialState = {
  currencyCode: '',
  balanceCent: 0,
  singleUse: false,
  rechargeable: true,
  loading: false,
  expiresAt: null,
  errors: []
};
var addGiftCardRecipient = /*#__PURE__*/function () {
  var _ref = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(values, config, dispatch) {
    var recipient;
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            _context.next = 3;
            return CLayer__default.GiftCardRecipient.withCredentials(config).create(values);

          case 3:
            recipient = _context.sent;
            dispatch({
              type: 'setGiftCardRecipient',
              payload: {
                giftCardRecipient: recipient
              }
            });
            _context.next = 10;
            break;

          case 7:
            _context.prev = 7;
            _context.t0 = _context["catch"](0);
            console.error(_context.t0);

          case 10:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[0, 7]]);
  }));

  return function addGiftCardRecipient(_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  };
}();
var addGiftCardLoading = function addGiftCardLoading(loading, dispatch) {
  dispatch({
    type: 'setGiftCardLoading',
    payload: {
      loading: loading
    }
  });
};
var addGiftCard = /*#__PURE__*/function () {
  var _ref3 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(values, _ref2) {
    var config, dispatch, getOrder, createOrder, firstName, lastName, email, orderId, val, giftCardValue, recipientValues, giftCard, _yield$giftCard$withC, id, order, item, errors;

    return runtime_1.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            config = _ref2.config, dispatch = _ref2.dispatch, getOrder = _ref2.getOrder, createOrder = _ref2.createOrder;
            _context2.prev = 1;
            addGiftCardLoading(true, dispatch);
            firstName = values.firstName, lastName = values.lastName, email = values.email, orderId = values.orderId, val = _objectWithoutPropertiesLoose(values, ["firstName", "lastName", "email", "orderId"]);
            giftCardValue = _extends({
              recipientEmail: email
            }, val);
            recipientValues = {};
            _context2.next = 8;
            return CLayer__default.GiftCard.withCredentials(config).create(giftCardValue);

          case 8:
            giftCard = _context2.sent;
            if (firstName) recipientValues['firstName'] = firstName;
            if (lastName) recipientValues['lastName'] = lastName;

            if (_.isEmpty(recipientValues)) {
              _context2.next = 22;
              break;
            }

            _context2.next = 14;
            return giftCard.withCredentials(config).giftCardRecipient();

          case 14:
            _context2.t0 = _yield$giftCard$withC = _context2.sent;

            if (!(_context2.t0 == null)) {
              _context2.next = 19;
              break;
            }

            _context2.t1 = void 0;
            _context2.next = 20;
            break;

          case 19:
            _context2.t1 = _yield$giftCard$withC.update(recipientValues);

          case 20:
            _context2.next = 22;
            return _context2.t1;

          case 22:
            if (!(createOrder && getOrder)) {
              _context2.next = 35;
              break;
            }

            _context2.t2 = orderId;

            if (_context2.t2) {
              _context2.next = 28;
              break;
            }

            _context2.next = 27;
            return createOrder();

          case 27:
            _context2.t2 = _context2.sent;

          case 28:
            id = _context2.t2;

            if (!id) {
              _context2.next = 35;
              break;
            }

            order = CLayer__default.Order.build({
              id: id
            });
            item = CLayer__default.GiftCard.build({
              id: giftCard.id
            });
            _context2.next = 34;
            return CLayer__default.LineItem.withCredentials(config).create({
              quantity: 1,
              order: order,
              item: item
            });

          case 34:
            getOrder && getOrder(id);

          case 35:
            dispatch({
              type: 'setGiftCardRecipient',
              payload: _extends({}, giftCardValue)
            });
            addGiftCardLoading(false, dispatch);
            _context2.next = 44;
            break;

          case 39:
            _context2.prev = 39;
            _context2.t3 = _context2["catch"](1);
            errors = getErrorsByCollection(_context2.t3, 'giftCard');
            dispatch({
              type: 'setGiftCardErrors',
              payload: {
                errors: errors
              }
            });
            addGiftCardLoading(false, dispatch);

          case 44:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, null, [[1, 39]]);
  }));

  return function addGiftCard(_x4, _x5) {
    return _ref3.apply(this, arguments);
  };
}();
var addGiftCardError = function addGiftCardError(errors, dispatch) {
  dispatch({
    type: 'setGiftCardErrors',
    payload: {
      errors: errors
    }
  });
};
var type$3 = ['setAvailability', 'setGiftCardRecipient', 'setGiftCardErrors', 'setGiftCardLoading'];

var giftCardReducer = function giftCardReducer(state, reducer) {
  return baseReducer(state, reducer, type$3);
};

var GiftCardContext = /*#__PURE__*/React.createContext(giftCardInitialState);

var customMessages = function customMessages(messages, v) {
  if (messages === void 0) {
    messages = [];
  }

  return _.first(messages.filter(function (m) {
    if (m.field === v.field) {
      return m.code === v.code;
    }

    if (m.resource === v.resource) {
      return m.code === v.code;
    }

    return m.code === v.code;
  }));
};

var getAllErrors = function getAllErrors(params) {
  var allErrors = params.allErrors,
      messages = params.messages,
      field = params.field,
      props = params.props,
      lineItem = params.lineItem,
      resource = params.resource;
  return allErrors.map(function (v, k) {
    var objMsg = customMessages(messages, v);

    if (field) {
      if (v.resource === 'lineItem') {
        return lineItem && v.id === lineItem['id'] && /*#__PURE__*/React__default.createElement("span", _extends({
          key: k
        }, props), (objMsg == null ? void 0 : objMsg.message) || v.message);
      }

      if (field === v.field && resource === v.resource) {
        return /*#__PURE__*/React__default.createElement("span", _extends({
          key: k
        }, props), (objMsg == null ? void 0 : objMsg.message) || v.message);
      }
    }
  });
};

var initial$2 = {
  lineItems: []
};
var LineItemContext = /*#__PURE__*/React.createContext(initial$2);

var initial$3 = {
  lineItem: {}
};
var LineItemChildrenContext = /*#__PURE__*/React.createContext(initial$3);

var propTypes$f = components.Errors.propTypes;
var defaultProps$5 = components.Errors.defaultProps;
var displayName$b = components.Errors.displayName;

var Errors = function Errors(props) {
  var children = props.children,
      _props$messages = props.messages,
      messages = _props$messages === void 0 ? [] : _props$messages,
      resource = props.resource,
      _props$field = props.field,
      field = _props$field === void 0 ? 'base' : _props$field,
      p = _objectWithoutPropertiesLoose(props, ["children", "messages", "resource", "field"]);

  var _useContext = React.useContext(OrderContext),
      orderErrors = _useContext.errors;

  var _useContext2 = React.useContext(GiftCardContext),
      giftCardErrors = _useContext2.errors;

  var _useContext3 = React.useContext(LineItemContext),
      lineItemErrors = _useContext3.errors;

  var _useContext4 = React.useContext(AddressesContext),
      addressErrors = _useContext4.errors;

  var _useContext5 = React.useContext(CustomerContext),
      customerErrors = _useContext5.errors;

  var _useContext6 = React.useContext(LineItemChildrenContext),
      lineItem = _useContext6.lineItem; // TODO add other errors


  var allErrors = [].concat(giftCardErrors || [], orderErrors || [], lineItemErrors || [], addressErrors || [], customerErrors || []);

  var parentProps = _extends({
    messages: messages,
    resource: resource,
    field: field
  }, p);

  var msgErrors = getAllErrors({
    allErrors: allErrors,
    field: field,
    messages: messages,
    props: p,
    lineItem: lineItem,
    resource: resource
  });
  return children ? /*#__PURE__*/React__default.createElement(Parent, parentProps, children) : /*#__PURE__*/React__default.createElement(React.Fragment, null, msgErrors);
};

Errors.propTypes = propTypes$f;
Errors.defaultProps = defaultProps$5;
Errors.displayName = displayName$b;

var propTypes$g = components.ExternalFunction.propTypes;
var displayName$c = components.ExternalFunction.displayName;

var ExternalFunction = function ExternalFunction(_ref) {
  var children = _ref.children,
      url = _ref.url;
  return /*#__PURE__*/React__default.createElement(ExternalFunctionContext.Provider, {
    value: {
      url: url,
      callExternalFunction: callExternalFunction
    }
  }, children);
};

ExternalFunction.propTypes = propTypes$g;
ExternalFunction.displayName = displayName$c;

var EMAIL_PATTERN = /[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,3}$/;
var validateValue = function validateValue(val, name, type, resourceType) {
  if (!val) {
    return {
      field: name,
      code: 'VALIDATION_ERROR',
      message: name + " - is required",
      resourceType: resourceType
    };
  }

  if (type === 'email' && _.isString(val) && !val.match(EMAIL_PATTERN)) {
    return {
      field: name,
      code: 'VALIDATION_ERROR',
      message: name + " - is not valid",
      resourceType: resourceType
    };
  }

  return {};
};

var validateFormFields = function validateFormFields(fields, required, resourceType) {
  var errors = [];
  var values = {
    metadata: {}
  };

  _.map(fields, function (v) {
    var isTick = !!v['checked'];
    var val = isTick ? isTick : v.value === 'on' ? false : v.value;
    var attrName = v.getAttribute('name');

    if (attrName && required.indexOf(attrName) !== -1 || v.required) {
      var _extends2;

      var error = validateValue(val, v.name, v.type, resourceType);

      if (!_.isEmpty(error)) {
        errors.push(error);
      }

      values = _extends({}, values, (_extends2 = {}, _extends2["" + v.name] = val, _extends2));
    }

    if (v.getAttribute('name')) {
      var _extends3, _extends4;

      var isMetadata = !!v.getAttribute('data-metadata');
      values = isMetadata ? _extends({}, values, {
        metadata: _extends({}, values.metadata, (_extends3 = {}, _extends3["" + v.name] = val, _extends3))
      }) : _extends({}, values, (_extends4 = {}, _extends4["" + v.name] = val, _extends4));
    }
  });

  return {
    errors: errors,
    values: values
  };
};

var fieldsExist = function fieldsExist(values, schema) {
  if (schema === void 0) {
    schema = addressFields;
  }

  if (!values['business']) {
    var required = _.without(schema, 'line_2', 'company');

    return required.length > _.keys(values).length;
  } else {
    var _required = _.without(schema, 'first_name', 'last_name');

    return _required.length > _.keys(values).length;
  }
};

var propTypes$h = components.GiftCard.propTypes;
var defaultProps$6 = components.GiftCard.defaultProps;
var displayName$d = components.GiftCard.displayName;

var GiftCard = function GiftCard(props) {
  var children = props.children,
      onSubmit = props.onSubmit;
  var name = 'giftCardForm';
  var ref = React.useRef(null);

  var _useContext = React.useContext(GiftCardContext),
      addGiftCard = _useContext.addGiftCard,
      addGiftCardError = _useContext.addGiftCardError;

  var handleSubmit = function handleSubmit(e) {
    e.preventDefault();
    var currentForm = ref.current;
    var elements = currentForm == null ? void 0 : currentForm.elements;

    var _validateFormFields = validateFormFields(elements, ['currencyCode', 'balanceCents'], 'giftCard'),
        errors = _validateFormFields.errors,
        values = _validateFormFields.values;

    if (_.isEmpty(errors)) {
      addGiftCard(values);
      currentForm == null ? void 0 : currentForm.reset();

      if (onSubmit) {
        onSubmit(values);
      }
    } else {
      addGiftCardError(errors);
    }
  };

  return /*#__PURE__*/React__default.createElement(React.Fragment, null, /*#__PURE__*/React__default.createElement("form", {
    key: name,
    name: name,
    ref: ref,
    onSubmit: handleSubmit
  }, children));
};

GiftCard.propTypes = propTypes$h;
GiftCard.defaultProps = defaultProps$6;
GiftCard.displayName = displayName$d;

var propTypes$i = components.GiftCardAmount.propTypes;
var displayName$e = components.GiftCardAmount.displayName;

var GiftCardAmount = function GiftCardAmount(props) {
  return /*#__PURE__*/React__default.createElement(BaseOrderPrice, _extends({
    base: "amount",
    type: "giftcard"
  }, props));
};

GiftCardAmount.propTypes = propTypes$i;
GiftCardAmount.displayName = displayName$e;

var propTypes$j = components.GiftCardContainer.propTypes;
var displayName$f = components.GiftCardContainer.displayName;

var GiftCardContainer = function GiftCardContainer(props) {
  var children = props.children;

  var _useReducer = React.useReducer(giftCardReducer, giftCardInitialState),
      state = _useReducer[0],
      dispatch = _useReducer[1];

  var config = React.useContext(CommerceLayerContext);

  var _useContext = React.useContext(OrderContext),
      orderId = _useContext.orderId,
      getOrder = _useContext.getOrder,
      createOrder = _useContext.createOrder;

  var giftCardValue = _extends({}, state, {
    addGiftCardRecipient: function addGiftCardRecipient$1(values) {
      return addGiftCardRecipient(values, config, dispatch);
    },
    addGiftCard: function addGiftCard$1(values) {
      return addGiftCard(_extends({}, values, {
        orderId: orderId
      }), {
        config: config,
        dispatch: dispatch,
        getOrder: getOrder,
        createOrder: createOrder
      });
    },
    addGiftCardError: function addGiftCardError$1(errors) {
      return addGiftCardError(errors, dispatch);
    },
    addGiftCardLoading: function addGiftCardLoading$1(loading) {
      return addGiftCardLoading(loading, dispatch);
    }
  });

  return /*#__PURE__*/React__default.createElement(GiftCardContext.Provider, {
    value: giftCardValue
  }, children);
};

GiftCardContainer.propTypes = propTypes$j;
GiftCardContainer.displayName = displayName$f;

var currencyOptions = [
	{
		value: "AED",
		label: "AED"
	},
	{
		value: "AFN",
		label: "AFN"
	},
	{
		value: "ALL",
		label: "ALL"
	},
	{
		value: "AMD",
		label: "AMD"
	},
	{
		value: "ANG",
		label: "ANG"
	},
	{
		value: "AOA",
		label: "AOA"
	},
	{
		value: "ARS",
		label: "ARS"
	},
	{
		value: "AUD",
		label: "AUD"
	},
	{
		value: "AWG",
		label: "AWG"
	},
	{
		value: "AZN",
		label: "AZN"
	},
	{
		value: "BAM",
		label: "BAM"
	},
	{
		value: "BBD",
		label: "BBD"
	},
	{
		value: "BDT",
		label: "BDT"
	},
	{
		value: "BGN",
		label: "BGN"
	},
	{
		value: "BHD",
		label: "BHD"
	},
	{
		value: "BIF",
		label: "BIF"
	},
	{
		value: "BMD",
		label: "BMD"
	},
	{
		value: "BND",
		label: "BND"
	},
	{
		value: "BOB",
		label: "BOB"
	},
	{
		value: "BRL",
		label: "BRL"
	},
	{
		value: "BSD",
		label: "BSD"
	},
	{
		value: "BTN",
		label: "BTN"
	},
	{
		value: "BWP",
		label: "BWP"
	},
	{
		value: "BYN",
		label: "BYN"
	},
	{
		value: "BYR",
		label: "BYR"
	},
	{
		value: "BZD",
		label: "BZD"
	},
	{
		value: "CAD",
		label: "CAD"
	},
	{
		value: "CDF",
		label: "CDF"
	},
	{
		value: "CHF",
		label: "CHF"
	},
	{
		value: "CLF",
		label: "CLF"
	},
	{
		value: "CLP",
		label: "CLP"
	},
	{
		value: "CNY",
		label: "CNY"
	},
	{
		value: "COP",
		label: "COP"
	},
	{
		value: "CRC",
		label: "CRC"
	},
	{
		value: "CUC",
		label: "CUC"
	},
	{
		value: "CUP",
		label: "CUP"
	},
	{
		value: "CVE",
		label: "CVE"
	},
	{
		value: "CZK",
		label: "CZK"
	},
	{
		value: "DJF",
		label: "DJF"
	},
	{
		value: "DKK",
		label: "DKK"
	},
	{
		value: "DOP",
		label: "DOP"
	},
	{
		value: "DZD",
		label: "DZD"
	},
	{
		value: "EGP",
		label: "EGP"
	},
	{
		value: "ERN",
		label: "ERN"
	},
	{
		value: "ETB",
		label: "ETB"
	},
	{
		value: "EUR",
		label: "EUR"
	},
	{
		value: "FJD",
		label: "FJD"
	},
	{
		value: "FKP",
		label: "FKP"
	},
	{
		value: "GBP",
		label: "GBP"
	},
	{
		value: "GEL",
		label: "GEL"
	},
	{
		value: "GHS",
		label: "GHS"
	},
	{
		value: "GIP",
		label: "GIP"
	},
	{
		value: "GMD",
		label: "GMD"
	},
	{
		value: "GNF",
		label: "GNF"
	},
	{
		value: "GTQ",
		label: "GTQ"
	},
	{
		value: "GYD",
		label: "GYD"
	},
	{
		value: "HKD",
		label: "HKD"
	},
	{
		value: "HNL",
		label: "HNL"
	},
	{
		value: "HRK",
		label: "HRK"
	},
	{
		value: "HTG",
		label: "HTG"
	},
	{
		value: "HUF",
		label: "HUF"
	},
	{
		value: "IDR",
		label: "IDR"
	},
	{
		value: "ILS",
		label: "ILS"
	},
	{
		value: "INR",
		label: "INR"
	},
	{
		value: "IQD",
		label: "IQD"
	},
	{
		value: "IRR",
		label: "IRR"
	},
	{
		value: "ISK",
		label: "ISK"
	},
	{
		value: "JMD",
		label: "JMD"
	},
	{
		value: "JOD",
		label: "JOD"
	},
	{
		value: "JPY",
		label: "JPY"
	},
	{
		value: "KES",
		label: "KES"
	},
	{
		value: "KGS",
		label: "KGS"
	},
	{
		value: "KHR",
		label: "KHR"
	},
	{
		value: "KMF",
		label: "KMF"
	},
	{
		value: "KPW",
		label: "KPW"
	},
	{
		value: "KRW",
		label: "KRW"
	},
	{
		value: "KWD",
		label: "KWD"
	},
	{
		value: "KYD",
		label: "KYD"
	},
	{
		value: "KZT",
		label: "KZT"
	},
	{
		value: "LAK",
		label: "LAK"
	},
	{
		value: "LBP",
		label: "LBP"
	},
	{
		value: "LKR",
		label: "LKR"
	},
	{
		value: "LRD",
		label: "LRD"
	},
	{
		value: "LSL",
		label: "LSL"
	},
	{
		value: "LTL",
		label: "LTL"
	},
	{
		value: "LVL",
		label: "LVL"
	},
	{
		value: "LYD",
		label: "LYD"
	},
	{
		value: "MAD",
		label: "MAD"
	},
	{
		value: "MDL",
		label: "MDL"
	},
	{
		value: "MGA",
		label: "MGA"
	},
	{
		value: "MKD",
		label: "MKD"
	},
	{
		value: "MMK",
		label: "MMK"
	},
	{
		value: "MNT",
		label: "MNT"
	},
	{
		value: "MOP",
		label: "MOP"
	},
	{
		value: "MRO",
		label: "MRO"
	},
	{
		value: "MUR",
		label: "MUR"
	},
	{
		value: "MVR",
		label: "MVR"
	},
	{
		value: "MWK",
		label: "MWK"
	},
	{
		value: "MXN",
		label: "MXN"
	},
	{
		value: "MYR",
		label: "MYR"
	},
	{
		value: "MZN",
		label: "MZN"
	},
	{
		value: "NAD",
		label: "NAD"
	},
	{
		value: "NGN",
		label: "NGN"
	},
	{
		value: "NIO",
		label: "NIO"
	},
	{
		value: "NOK",
		label: "NOK"
	},
	{
		value: "NPR",
		label: "NPR"
	},
	{
		value: "NZD",
		label: "NZD"
	},
	{
		value: "OMR",
		label: "OMR"
	},
	{
		value: "PAB",
		label: "PAB"
	},
	{
		value: "PEN",
		label: "PEN"
	},
	{
		value: "PGK",
		label: "PGK"
	},
	{
		value: "PHP",
		label: "PHP"
	},
	{
		value: "PKR",
		label: "PKR"
	},
	{
		value: "PLN",
		label: "PLN"
	},
	{
		value: "PYG",
		label: "PYG"
	},
	{
		value: "QAR",
		label: "QAR"
	},
	{
		value: "RON",
		label: "RON"
	},
	{
		value: "RSD",
		label: "RSD"
	},
	{
		value: "RUB",
		label: "RUB"
	},
	{
		value: "RWF",
		label: "RWF"
	},
	{
		value: "SAR",
		label: "SAR"
	},
	{
		value: "SBD",
		label: "SBD"
	},
	{
		value: "SCR",
		label: "SCR"
	},
	{
		value: "SDG",
		label: "SDG"
	},
	{
		value: "SEK",
		label: "SEK"
	},
	{
		value: "SGD",
		label: "SGD"
	},
	{
		value: "SHP",
		label: "SHP"
	},
	{
		value: "SKK",
		label: "SKK"
	},
	{
		value: "SLL",
		label: "SLL"
	},
	{
		value: "SOS",
		label: "SOS"
	},
	{
		value: "SRD",
		label: "SRD"
	},
	{
		value: "SSP",
		label: "SSP"
	},
	{
		value: "STD",
		label: "STD"
	},
	{
		value: "SVC",
		label: "SVC"
	},
	{
		value: "SYP",
		label: "SYP"
	},
	{
		value: "SZL",
		label: "SZL"
	},
	{
		value: "THB",
		label: "THB"
	},
	{
		value: "TJS",
		label: "TJS"
	},
	{
		value: "TMT",
		label: "TMT"
	},
	{
		value: "TND",
		label: "TND"
	},
	{
		value: "TOP",
		label: "TOP"
	},
	{
		value: "TRY",
		label: "TRY"
	},
	{
		value: "TTD",
		label: "TTD"
	},
	{
		value: "TWD",
		label: "TWD"
	},
	{
		value: "TZS",
		label: "TZS"
	},
	{
		value: "UAH",
		label: "UAH"
	},
	{
		value: "UGX",
		label: "UGX"
	},
	{
		value: "USD",
		label: "USD"
	},
	{
		value: "UYU",
		label: "UYU"
	},
	{
		value: "UZS",
		label: "UZS"
	},
	{
		value: "VEF",
		label: "VEF"
	},
	{
		value: "VND",
		label: "VND"
	},
	{
		value: "VUV",
		label: "VUV"
	},
	{
		value: "WST",
		label: "WST"
	},
	{
		value: "XAF",
		label: "XAF"
	},
	{
		value: "XAG",
		label: "XAG"
	},
	{
		value: "XAU",
		label: "XAU"
	},
	{
		value: "XBA",
		label: "XBA"
	},
	{
		value: "XBB",
		label: "XBB"
	},
	{
		value: "XBC",
		label: "XBC"
	},
	{
		value: "XBD",
		label: "XBD"
	},
	{
		value: "XCD",
		label: "XCD"
	},
	{
		value: "XDR",
		label: "XDR"
	},
	{
		value: "XOF",
		label: "XOF"
	},
	{
		value: "XPD",
		label: "XPD"
	},
	{
		value: "XPF",
		label: "XPF"
	},
	{
		value: "XPT",
		label: "XPT"
	},
	{
		value: "XTS",
		label: "XTS"
	},
	{
		value: "YER",
		label: "YER"
	},
	{
		value: "ZAR",
		label: "ZAR"
	},
	{
		value: "ZMK",
		label: "ZMK"
	},
	{
		value: "ZMW",
		label: "ZMW"
	},
	{
		value: "BTC",
		label: "BTC"
	},
	{
		value: "JEP",
		label: "JEP"
	},
	{
		value: "GGP",
		label: "GGP"
	},
	{
		value: "IMP",
		label: "IMP"
	},
	{
		value: "XFU",
		label: "XFU"
	},
	{
		value: "GBX",
		label: "GBX"
	},
	{
		value: "CNH",
		label: "CNH"
	},
	{
		value: "EEK",
		label: "EEK"
	},
	{
		value: "GHS",
		label: "GHS"
	},
	{
		value: "MTL",
		label: "MTL"
	},
	{
		value: "TMM",
		label: "TMM"
	},
	{
		value: "JPY",
		label: "JPY"
	},
	{
		value: "ZWD",
		label: "ZWD"
	},
	{
		value: "ZWL",
		label: "ZWL"
	},
	{
		value: "ZWN",
		label: "ZWN"
	},
	{
		value: "ZWR",
		label: "ZWR"
	}
];

var propTypes$k = components.GiftCardCurrencySelector.propTypes;
var defaultProps$7 = components.GiftCardCurrencySelector.defaultProps;
var displayName$g = components.GiftCardCurrencySelector.displayName;

var GiftCardCurrencySelector = function GiftCardCurrencySelector(props) {
  return /*#__PURE__*/React__default.createElement(BaseSelect$1, _extends({
    options: currencyOptions,
    name: "currencyCode"
  }, props));
};

GiftCardCurrencySelector.propTypes = propTypes$k;
GiftCardCurrencySelector.defaultProps = defaultProps$7;
GiftCardCurrencySelector.displayName = displayName$g;

var propTypes$l = components.GiftCardInput.propTypes;
var displayName$h = components.GiftCardInput.displayName;

var GiftCardInput = function GiftCardInput(props) {
  var _props$placeholder = props.placeholder,
      placeholder = _props$placeholder === void 0 ? '' : _props$placeholder,
      p = _objectWithoutPropertiesLoose(props, ["placeholder"]);

  return /*#__PURE__*/React__default.createElement(BaseInput$1, _extends({
    placeholder: placeholder
  }, p));
};

GiftCardInput.propTypes = propTypes$l;
GiftCardInput.displayName = displayName$h;

var setItemState = function setItemState(data, params, dispatch) {
  var _payload;

  dispatch({
    type: params.type,
    payload: (_payload = {}, _payload["" + params.key] = data, _payload)
  });
};
var actionType$2 = ['setItem', 'setItems', 'setQuantity', 'setOption', 'setPrices', 'setCustomLineItems', 'setCustomLineItem', 'setSkuCode'];
var itemInitialState = {
  items: {},
  item: {},
  quantity: {},
  option: {},
  prices: {},
  lineItems: {},
  lineItem: {},
  skuCode: ''
};

var itemReducer = function itemReducer(state, reducer) {
  return baseReducer(state, reducer, actionType$2);
};

var propTypes$m = components.ItemContainer.propTypes;
var displayName$i = components.ItemContainer.displayName;

var ItemContainer = function ItemContainer(props) {
  var children = props.children,
      skuCode = props.skuCode,
      lineItem = props.lineItem;

  var _useReducer = React.useReducer(itemReducer, itemInitialState),
      state = _useReducer[0],
      dispatch = _useReducer[1];

  React.useEffect(function () {
    if (skuCode) {
      setItemState(skuCode, {
        type: 'setSkuCode',
        key: 'skuCode'
      }, dispatch);
    }

    if (lineItem) {
      setItemState(lineItem, {
        type: 'setCustomLineItem',
        key: 'lineItem'
      }, dispatch);
    }
  }, []);

  var setItems = function setItems(items) {
    return setItemState(items, {
      type: 'setItems',
      key: 'items'
    }, dispatch);
  };

  var setItem = function setItem(item) {
    return setItemState(item, {
      type: 'setItem',
      key: 'item'
    }, dispatch);
  };

  var setQuantity = function setQuantity(item) {
    return setItemState(item, {
      type: 'setQuantity',
      key: 'quantity'
    }, dispatch);
  };

  var setOption = function setOption(item) {
    return setItemState(item, {
      type: 'setOption',
      key: 'option'
    }, dispatch);
  };

  var setPrices = function setPrices(item) {
    return setItemState(item, {
      type: 'setPrices',
      key: 'prices'
    }, dispatch);
  };

  var setCustomLineItems = function setCustomLineItems(item) {
    return setItemState(item, {
      type: 'setCustomLineItems',
      key: 'lineItems'
    }, dispatch);
  };

  var itemValue = _extends({}, initialItemContext, state, {
    setItems: setItems,
    setItem: setItem,
    setQuantity: setQuantity,
    setOption: setOption,
    setPrices: setPrices,
    setCustomLineItems: setCustomLineItems
  });

  return /*#__PURE__*/React__default.createElement(ItemContext.Provider, {
    value: itemValue
  }, children);
};

ItemContainer.propTypes = propTypes$m;
ItemContainer.displayName = displayName$i;

var initial$4 = {
  lineItems: [],
  shippingMethods: [],
  stockTransfers: []
};
var ShipmentChildrenContext = /*#__PURE__*/React.createContext(initial$4);

var propTypes$n = components.LineItem.propTypes;
var displayName$j = components.LineItem.displayName;

var LineItem = function LineItem(props) {
  var _props$type = props.type,
      type = _props$type === void 0 ? 'skus' : _props$type,
      children = props.children;

  var _useContext = React.useContext(LineItemContext),
      lineItems = _useContext.lineItems;

  var _useContext2 = React.useContext(ShipmentChildrenContext),
      shipmentLineItems = _useContext2.lineItems;

  var items = _.isEmpty(shipmentLineItems) ? lineItems : shipmentLineItems;
  var components = items && items.filter(function (l) {
    return l.itemType === type;
  }).map(function (lineItem, k) {
    var lineProps = {
      lineItem: lineItem
    };
    return /*#__PURE__*/React__default.createElement(LineItemChildrenContext.Provider, {
      key: k,
      value: lineProps
    }, children);
  });
  return /*#__PURE__*/React__default.createElement(React.Fragment, null, components);
};

LineItem.propTypes = propTypes$n;
LineItem.displayName = displayName$j;
LineItem.defaultProps = {
  type: 'skus'
};

var propTypes$o = components.LineItemAmount.propTypes;
var defaultProps$8 = components.LineItemAmount.defaultProps;
var displayName$k = components.LineItemAmount.displayName;

var LineItemAmount = function LineItemAmount(props) {
  var _props$format = props.format,
      format = _props$format === void 0 ? 'formatted' : _props$format,
      _props$type = props.type,
      type = _props$type === void 0 ? 'total' : _props$type,
      p = _objectWithoutPropertiesLoose(props, ["format", "type"]);

  var _useContext = React.useContext(LineItemChildrenContext),
      lineItem = _useContext.lineItem;

  var _useState = React.useState(''),
      price = _useState[0],
      setPrice = _useState[1];

  React.useEffect(function () {
    var p = getAmount('amount', type, format, lineItem);
    setPrice(p);
    return function () {
      setPrice('');
    };
  }, [lineItem]);

  var parentProps = _extends({
    price: price
  }, p);

  return props.children ? /*#__PURE__*/React__default.createElement(Parent, parentProps, props.children) : /*#__PURE__*/React__default.createElement("span", p, price);
};

LineItemAmount.propTypes = propTypes$o;
LineItemAmount.defaultProps = defaultProps$8;
LineItemAmount.displayName = displayName$k;

var propTypes$p = components.LineItemImage.propTypes;
var displayName$l = components.LineItemImage.displayName;

var LineItemImage = function LineItemImage(props) {
  var _useContext = React.useContext(LineItemChildrenContext),
      lineItem = _useContext.lineItem;

  var src = lineItem['imageUrl'];

  var parenProps = _extends({
    src: src
  }, props);

  return props.children ? /*#__PURE__*/React__default.createElement(Parent, parenProps, props.children) : /*#__PURE__*/React__default.createElement("img", _extends({
    src: src
  }, props));
};

LineItemImage.propTypes = propTypes$p;
LineItemImage.displayName = displayName$l;

var propTypes$q = components.LineItemName.propTypes;
var displayName$m = components.LineItemName.displayName;

var LineItemName = function LineItemName(props) {
  var _useContext = React.useContext(LineItemChildrenContext),
      lineItem = _useContext.lineItem;

  var labelName = lineItem['name'];

  var parentProps = _extends({}, props);

  return props.children ? /*#__PURE__*/React__default.createElement(Parent, parentProps, props.children) : /*#__PURE__*/React__default.createElement("p", props, labelName);
};

LineItemName.propTypes = propTypes$q;
LineItemName.displayName = displayName$m;

var initial$5 = {
  lineItemOption: {}
};
var LineItemOptionChildrenContext = /*#__PURE__*/React.createContext(initial$5);

var propTypes$r = components.LineItemOption.propTypes;
var displayName$n = components.LineItemOption.displayName;

var LineItemOption = function LineItemOption(props) {
  var name = props.name,
      children = props.children,
      keyClassName = props.keyClassName,
      keyId = props.keyId,
      keyStyle = props.keyStyle,
      valueClassName = props.valueClassName,
      id = props.id,
      style = props.style,
      p = _objectWithoutPropertiesLoose(props, ["name", "children", "keyClassName", "keyId", "keyStyle", "valueClassName", "id", "style"]);

  var _useContext = React.useContext(LineItemOptionChildrenContext),
      lineItemOption = _useContext.lineItemOption;

  var parentProps = _extends({}, props, {
    lineItemOption: lineItemOption
  });

  return children ? /*#__PURE__*/React__default.createElement(Parent, parentProps, props.children) : _.has(lineItemOption, "options." + name) ? /*#__PURE__*/React__default.createElement(React.Fragment, null, /*#__PURE__*/React__default.createElement("span", _extends({
    id: keyId,
    style: keyStyle,
    className: keyClassName
  }, p), name + ":"), /*#__PURE__*/React__default.createElement("span", _extends({
    id: id,
    style: style,
    className: valueClassName
  }, p), "" + lineItemOption['options'][name])) : null;
};

LineItemOption.propTypes = propTypes$r;
LineItemOption.displayName = displayName$n;

var propTypes$s = components.LineItemOptions.propTypes;
var defaultProps$9 = components.LineItemOptions.defaultProps;
var displayName$o = components.LineItemOptions.displayName;

var LineItemOptions = function LineItemOptions(props) {
  var skuOptionId = props.skuOptionId,
      title = props.title,
      children = props.children,
      _props$showName = props.showName,
      showName = _props$showName === void 0 ? true : _props$showName,
      p = _objectWithoutPropertiesLoose(props, ["skuOptionId", "title", "children", "showName"]);

  var _useContext = React.useContext(LineItemChildrenContext),
      lineItem = _useContext.lineItem;

  var lineItemOptions = !_.isEmpty(lineItem) ? lineItem['lineItemOptions']().toArray() : [];
  var options = lineItemOptions.filter(function (o) {
    // @ts-ignore
    return o.skuOption().id === skuOptionId;
  }).map(function (o, k) {
    var showTitle = showName ? /*#__PURE__*/React__default.createElement("span", p, title || o.name) : null;
    var valueProps = {
      lineItemOption: o
    };
    return /*#__PURE__*/React__default.createElement(React.Fragment, {
      key: k
    }, showTitle, /*#__PURE__*/React__default.createElement(LineItemOptionChildrenContext.Provider, {
      value: valueProps
    }, children));
  });
  return /*#__PURE__*/React__default.createElement(React.Fragment, null, options);
};

LineItemOptions.propTypes = propTypes$s;
LineItemOptions.defaultProps = defaultProps$9;
LineItemOptions.displayName = displayName$o;

var propTypes$t = components.LineItemQuantity.propTypes;
var defaultProps$a = components.LineItemQuantity.defaultProps;
var displayName$p = components.LineItemQuantity.displayName;

var LineItemQuantity = function LineItemQuantity(props) {
  var _props$max = props.max,
      max = _props$max === void 0 ? 50 : _props$max,
      _props$readonly = props.readonly,
      readonly = _props$readonly === void 0 ? false : _props$readonly,
      p = _objectWithoutPropertiesLoose(props, ["max", "readonly"]);

  var _useContext = React.useContext(LineItemChildrenContext),
      lineItem = _useContext.lineItem;

  var _useContext2 = React.useContext(LineItemContext),
      updateLineItem = _useContext2.updateLineItem;

  var options = [];

  for (var i = 1; i <= max; i++) {
    options.push( /*#__PURE__*/React__default.createElement("option", {
      key: i,
      value: "" + i
    }, i));
  }

  var handleChange = function handleChange(e) {
    var quantity = Number(e.target.value);
    updateLineItem && updateLineItem(lineItem['id'], quantity);
  };

  var quantity = lineItem['quantity'];

  var parentProps = _extends({
    handleChange: handleChange,
    quantity: quantity
  }, props);

  return props.children ? /*#__PURE__*/React__default.createElement(Parent, parentProps, props.children) : readonly ? /*#__PURE__*/React__default.createElement("span", p, quantity) : /*#__PURE__*/React__default.createElement("select", _extends({
    value: quantity,
    onChange: handleChange
  }, p), options);
};

LineItemQuantity.propTypes = propTypes$t;
LineItemQuantity.defaultProps = defaultProps$a;
LineItemQuantity.displayName = displayName$p;

var propTypes$u = components.LineItemRemoveLink.propTypes;
var defaultProps$b = components.LineItemRemoveLink.defaultProps;
var displayName$q = components.LineItemRemoveLink.displayName;

var LineItemRemoveLink = function LineItemRemoveLink(props) {
  var _props$label = props.label,
      label = _props$label === void 0 ? 'Remove' : _props$label;

  var _useContext = React.useContext(LineItemChildrenContext),
      lineItem = _useContext.lineItem;

  var _useContext2 = React.useContext(LineItemContext),
      deleteLineItem = _useContext2.deleteLineItem;

  var handleRemove = function handleRemove(e) {
    e.preventDefault();
    deleteLineItem && deleteLineItem(lineItem['id']);
  };

  var parentProps = _extends({
    handleRemove: handleRemove
  }, props);

  return props.children ? /*#__PURE__*/React__default.createElement(Parent, parentProps, props.children) : /*#__PURE__*/React__default.createElement("a", _extends({}, props, {
    href: "#",
    onClick: handleRemove
  }), label);
};

LineItemRemoveLink.propTypes = propTypes$u;
LineItemRemoveLink.defaultProps = defaultProps$b;
LineItemRemoveLink.displayName = displayName$q;

var getLineItems = function getLineItems(params) {
  var order = params.order,
      dispatch = params.dispatch,
      config = params.config,
      filters = params.filters;
  var allLineItems = [];
  order && // @ts-ignore
  order.withCredentials(config).lineItems().where(filters).includes('lineItemOptions.skuOption').all().then( /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(res) {
      var items, colResp, pageCount, index, nextItems;
      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              dispatch({
                type: 'setLoading',
                payload: {
                  loading: false
                }
              });
              items = res.toArray();
              allLineItems = [].concat(allLineItems, items);
              dispatch({
                type: 'setLineItems',
                payload: {
                  lineItems: allLineItems
                }
              });
              colResp = res;
              pageCount = res.pageCount();

              if (!(colResp.hasNextPage() && pageCount)) {
                _context.next = 18;
                break;
              }

              index = 1;

            case 8:
              if (!(index < pageCount)) {
                _context.next = 18;
                break;
              }

              _context.next = 11;
              return colResp.withCredentials(config).nextPage();

            case 11:
              colResp = _context.sent;
              nextItems = colResp.toArray();
              allLineItems = [].concat(allLineItems, nextItems);
              dispatch({
                type: 'setLineItems',
                payload: {
                  lineItems: allLineItems
                }
              });

            case 15:
              index++;
              _context.next = 8;
              break;

            case 18:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function (_x) {
      return _ref.apply(this, arguments);
    };
  }())["catch"](function (c) {
    var errors = getErrorsByCollection(c, 'lineItem');
    dispatch({
      type: 'setErrors',
      payload: {
        errors: errors
      }
    });
  });
};
var updateLineItem = /*#__PURE__*/function () {
  var _ref2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(params) {
    var config, lineItemId, quantity, getOrder, orderId, dispatch, errors, lineItem, update, _errors;

    return runtime_1.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            config = params.config, lineItemId = params.lineItemId, quantity = params.quantity, getOrder = params.getOrder, orderId = params.orderId, dispatch = params.dispatch, errors = params.errors;
            _context2.prev = 1;
            _context2.next = 4;
            return CLayer__default.LineItem.withCredentials(config).find(lineItemId);

          case 4:
            lineItem = _context2.sent;
            _context2.next = 7;
            return lineItem.withCredentials(config).update({
              quantity: quantity
            });

          case 7:
            update = _context2.sent;

            if (update.errors().empty()) {
              _context2.next = 10;
              break;
            }

            throw update;

          case 10:
            _context2.t0 = getOrder;

            if (!_context2.t0) {
              _context2.next = 14;
              break;
            }

            _context2.next = 14;
            return getOrder(orderId);

          case 14:
            if (!_.isEmpty(errors)) {
              dispatch({
                type: 'setErrors',
                payload: {
                  errors: []
                }
              });
            }

            _context2.next = 21;
            break;

          case 17:
            _context2.prev = 17;
            _context2.t1 = _context2["catch"](1);
            _errors = getErrorsByCollection(_context2.t1, 'lineItem');
            dispatch({
              type: 'setErrors',
              payload: {
                errors: _errors
              }
            });

          case 21:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, null, [[1, 17]]);
  }));

  return function updateLineItem(_x2) {
    return _ref2.apply(this, arguments);
  };
}();
var deleteLineItem = /*#__PURE__*/function () {
  var _ref3 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(params) {
    var config, lineItemId, getOrder, orderId, dispatch, errors, lineItem, destroyLineItem, _errors2;

    return runtime_1.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            config = params.config, lineItemId = params.lineItemId, getOrder = params.getOrder, orderId = params.orderId, dispatch = params.dispatch, errors = params.errors;
            _context3.prev = 1;
            _context3.next = 4;
            return CLayer__default.LineItem.withCredentials(config).find(lineItemId);

          case 4:
            lineItem = _context3.sent;
            _context3.next = 7;
            return lineItem.withCredentials(config).destroy();

          case 7:
            destroyLineItem = _context3.sent;

            if (destroyLineItem.errors().empty()) {
              _context3.next = 10;
              break;
            }

            throw destroyLineItem;

          case 10:
            _context3.t0 = getOrder;

            if (!_context3.t0) {
              _context3.next = 14;
              break;
            }

            _context3.next = 14;
            return getOrder(orderId);

          case 14:
            if (!_.isEmpty(errors)) {
              dispatch({
                type: 'setErrors',
                payload: {
                  errors: []
                }
              });
            }

            _context3.next = 21;
            break;

          case 17:
            _context3.prev = 17;
            _context3.t1 = _context3["catch"](1);
            _errors2 = getErrorsByCollection(_context3.t1, 'lineItem');
            dispatch({
              type: 'setErrors',
              payload: {
                errors: _errors2
              }
            });

          case 21:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3, null, [[1, 17]]);
  }));

  return function deleteLineItem(_x3) {
    return _ref3.apply(this, arguments);
  };
}();
var lineItemInitialState = {
  loading: false,
  lineItems: [],
  errors: []
};
var actionType$3 = ['setLineItems', 'setErrors', 'setLoading'];

var lineItemReducer = function lineItemReducer(state, reducer) {
  return baseReducer(state, reducer, actionType$3);
};

var propTypes$v = components.LineItemsContainer.propTypes;
var defaultProps$c = components.LineItemsContainer.defaultProps;
var displayName$r = components.LineItemsContainer.displayName;

var LineItemsContainer = function LineItemsContainer(props) {
  var children = props.children,
      _props$filters = props.filters,
      filters = _props$filters === void 0 ? {} : _props$filters,
      _props$loader = props.loader,
      loader = _props$loader === void 0 ? 'Loading...' : _props$loader;

  var _useContext = React.useContext(OrderContext),
      order = _useContext.order,
      getOrder = _useContext.getOrder,
      orderId = _useContext.orderId;

  var config = React.useContext(CommerceLayerContext);

  var _useReducer = React.useReducer(lineItemReducer, lineItemInitialState),
      state = _useReducer[0],
      dispatch = _useReducer[1];

  React.useEffect(function () {
    if (!_.isEmpty(order)) {
      order && getLineItems({
        order: order,
        dispatch: dispatch,
        config: config,
        filters: filters
      });
    }

    return function () {
      if (_.isEmpty(order)) {
        dispatch({
          type: 'setLineItems',
          payload: {
            lineItems: []
          }
        });
      }
    };
  }, [order]);

  var lineItemValue = _extends({}, state, {
    loader: loader,
    updateLineItem: function updateLineItem$1(lineItemId, quantity) {
      if (quantity === void 0) {
        quantity = 1;
      }

      return updateLineItem({
        lineItemId: lineItemId,
        quantity: quantity,
        dispatch: dispatch,
        config: config,
        getOrder: getOrder,
        orderId: orderId,
        errors: state.errors
      });
    },
    deleteLineItem: function deleteLineItem$1(lineItemId) {
      return deleteLineItem({
        lineItemId: lineItemId,
        dispatch: dispatch,
        config: config,
        getOrder: getOrder,
        orderId: orderId,
        errors: state.errors
      });
    }
  });

  return /*#__PURE__*/React__default.createElement(LineItemContext.Provider, {
    value: lineItemValue
  }, state.loading ? loader : children);
};

LineItemsContainer.propTypes = propTypes$v;
LineItemsContainer.defaultProps = defaultProps$c;
LineItemsContainer.displayName = displayName$r;

var getLineItemsCount = function getLineItemsCount(lineItems, quantity) {
  if (quantity === void 0) {
    quantity = 0;
  }

  var typeAccept = ['skus', 'gift_cards'];
  lineItems.filter(function (l) {
    return typeAccept.includes(l.itemType);
  }).map(function (l) {
    quantity += l.quantity;
  });
  return quantity;
};

var propTypes$w = components.LineItemsCount.propTypes;
var displayName$s = components.LineItemsCount.displayName;

var LineItemsCount = function LineItemsCount(props) {
  var children = props.children,
      p = _objectWithoutPropertiesLoose(props, ["children"]);

  var _useContext = React.useContext(LineItemContext),
      lineItems = _useContext.lineItems;

  var _useState = React.useState(0),
      quantity = _useState[0],
      setQuantity = _useState[1];

  React.useEffect(function () {
    if (!_.isEmpty(lineItems)) {
      var qty = getLineItemsCount(lineItems || []);
      setQuantity(qty);
    }

    return function () {
      setQuantity(0);
    };
  }, [lineItems]);

  var parentProps = _extends({
    quantity: quantity
  }, p);

  return children ? /*#__PURE__*/React__default.createElement(Parent, parentProps, children) : /*#__PURE__*/React__default.createElement("span", p, quantity);
};

LineItemsCount.propTypes = propTypes$w;
LineItemsCount.displayName = displayName$s;

var propTypes$x = components.MetadataInput.propTypes;
var displayName$t = components.MetadataInput.displayName;

var MetadataInput = function MetadataInput(props) {
  return /*#__PURE__*/React__default.createElement(BaseInput$1, _extends({
    "data-metadata": true
  }, props));
};

MetadataInput.propTypes = propTypes$x;
MetadataInput.displayName = displayName$t;

var getLocalOrder = function getLocalOrder(key) {
  return localStorage.getItem(key);
};
var setLocalOrder = function setLocalOrder(key, value) {
  localStorage.setItem(key, value);
};
var deleteLocalOrder = function deleteLocalOrder(key) {
  localStorage.removeItem(key);
};

var initial$6 = {
  persistKey: '',
  clearWhenPlaced: true,
  getLocalOrder: getLocalOrder,
  setLocalOrder: setLocalOrder,
  deleteLocalOrder: deleteLocalOrder
};
var OrderStorageContext = /*#__PURE__*/React.createContext(initial$6);

var propTypes$y = components.OrderContainer.propTypes;
var defaultProps$d = components.OrderContainer.defaultProps;
var displayName$u = components.OrderContainer.displayName;

var OrderContainer = function OrderContainer(props) {
  var orderId = props.orderId,
      children = props.children,
      metadata = props.metadata,
      attributes = props.attributes;

  var _useReducer = React.useReducer(orderReducer, orderInitialState),
      state = _useReducer[0],
      dispatch = _useReducer[1];

  var config = React.useContext(CommerceLayerContext);

  var _useContext = React.useContext(OrderStorageContext),
      persistKey = _useContext.persistKey,
      clearWhenPlaced = _useContext.clearWhenPlaced,
      getLocalOrder = _useContext.getLocalOrder,
      setLocalOrder = _useContext.setLocalOrder,
      deleteLocalOrder = _useContext.deleteLocalOrder;

  React.useEffect(function () {
    if (config.accessToken) {
      var localOrder = persistKey ? getLocalOrder(persistKey) : orderId;

      if (localOrder) {
        dispatch({
          type: 'setOrderId',
          payload: {
            orderId: localOrder
          }
        });

        if (!state.order) {
          getApiOrder({
            id: localOrder,
            dispatch: dispatch,
            config: config,
            persistKey: persistKey,
            clearWhenPlaced: clearWhenPlaced,
            deleteLocalOrder: deleteLocalOrder
          });
        }
      }
    }

    return function () {
      return unsetOrderState(dispatch);
    };
  }, [config.accessToken]);

  var orderValue = _extends({}, state, {
    getOrder: function getOrder(id) {
      return getApiOrder({
        id: id,
        dispatch: dispatch,
        config: config
      });
    },
    setOrderErrors: function setOrderErrors$1(collection) {
      return setOrderErrors({
        dispatch: dispatch,
        collection: collection
      });
    },
    createOrder: function () {
      var _createOrder2 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee() {
        return runtime_1.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return createOrder({
                  persistKey: persistKey,
                  dispatch: dispatch,
                  config: config,
                  state: state,
                  orderMetadata: metadata,
                  orderAttributes: attributes
                });

              case 2:
                return _context.abrupt("return", _context.sent);

              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function createOrder$1() {
        return _createOrder2.apply(this, arguments);
      }

      return createOrder$1;
    }(),
    addToCart: function addToCart$1(values) {
      return addToCart(_extends({}, values, {
        persistKey: persistKey,
        dispatch: dispatch,
        state: state,
        config: config,
        errors: state.errors,
        orderMetadata: metadata || {},
        orderAttributes: attributes,
        setLocalOrder: setLocalOrder
      }));
    },
    saveAddressToCustomerBook: function saveAddressToCustomerBook$1(type, value) {
      return saveAddressToCustomerBook({
        type: type,
        value: value,
        dispatch: dispatch
      });
    }
  });

  return /*#__PURE__*/React__default.createElement(OrderContext.Provider, {
    value: orderValue
  }, children);
};

OrderContainer.propTypes = propTypes$y;
OrderContainer.defaultProps = defaultProps$d;
OrderContainer.displayName = displayName$u;

var propTypes$z = components.OrderStorage.propTypes;
var displayName$v = components.OrderStorage.displayName;

var OrderStorage = function OrderStorage(props) {
  var children = props.children,
      _props$clearWhenPlace = props.clearWhenPlaced,
      clearWhenPlaced = _props$clearWhenPlace === void 0 ? true : _props$clearWhenPlace,
      p = _objectWithoutPropertiesLoose(props, ["children", "clearWhenPlaced"]);

  return /*#__PURE__*/React__default.createElement(OrderStorageContext.Provider, {
    value: _extends({}, p, {
      setLocalOrder: setLocalOrder,
      getLocalOrder: getLocalOrder,
      deleteLocalOrder: deleteLocalOrder,
      clearWhenPlaced: clearWhenPlaced
    })
  }, children);
};

OrderStorage.propTypes = propTypes$z;
OrderStorage.displayName = displayName$v;

var propTypes$A = {
  formattedAmount: PropTypes.string,
  formattedCompare: PropTypes.string
};
var defaultProps$e = {
  formattedAmount: '',
  formattedCompare: ''
};

var PriceTemplate = function PriceTemplate(props) {
  return /*#__PURE__*/React__default.createElement(React.Fragment, null, /*#__PURE__*/React__default.createElement("span", {
    className: props.className
  }, props.formattedAmount), props.showCompare && /*#__PURE__*/React__default.createElement("span", {
    className: props.compareClassName || ''
  }, props.formattedCompare));
};

PriceTemplate.propTypes = propTypes$A;
PriceTemplate.defaultProps = defaultProps$e;

var getPricesComponent = function getPricesComponent(skuPrices, props) {
  if (_.isEmpty(skuPrices)) {
    return /*#__PURE__*/React__default.createElement(PriceTemplate, props);
  }

  return skuPrices.map(function (p, k) {
    var showCompare = typeof props.showCompare === 'undefined' && p.compareAtAmountCents > p.amountCents || props.showCompare;
    return /*#__PURE__*/React__default.createElement(PriceTemplate, _extends({
      key: k
    }, props, {
      showCompare: showCompare,
      formattedAmount: p.formattedAmount,
      formattedCompare: p.formattedCompareAtAmount
    }));
  });
};

var getPrices = function getPrices(prices) {
  var obj = {};

  if (_.isArray(prices)) {
    prices.map(function (p) {
      if (_.has(obj, p.skuCode)) {
        obj[p.skuCode].push(p);
      } else {
        obj[p.skuCode] = [p];
      }
    });
  } else {
    _.forEach(prices, function (item) {
      var _item$prices;

      var prices = (_item$prices = item.prices()) == null ? void 0 : _item$prices.toArray();
      obj[item.code] = prices;
    });
  }

  return obj;
};

var priceInitialState = {
  loading: true,
  prices: {},
  skuCodes: [],
  errors: []
};
var getSkusPrice = function getSkusPrice(skuCodes, _ref) {
  var config = _ref.config,
      dispatch = _ref.dispatch,
      setPrices = _ref.setPrices,
      prices = _ref.prices,
      perPage = _ref.perPage,
      filters = _ref.filters;
  var allPrices = {};
  CLayer__default.Price.withCredentials(config).where(_extends({
    skuCodeIn: skuCodes.join(',')
  }, filters)).perPage(perPage).all().then( /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(r) {
      var pricesObj, meta, col, key, _pricesObj;

      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              pricesObj = getPrices(r.toArray());
              allPrices = _extends({}, allPrices, prices, pricesObj);

              if (setPrices) {
                setPrices(allPrices);
              }

              dispatch({
                type: 'setPrices',
                payload: {
                  prices: allPrices
                }
              });
              dispatch({
                type: 'setLoading',
                payload: {
                  loading: false
                }
              });
              meta = r.getMetaInfo();
              col = r;

              if (!(col.hasNextPage() && meta.pageCount)) {
                _context.next = 20;
                break;
              }

              key = 1;

            case 9:
              if (!(key < meta.pageCount)) {
                _context.next = 20;
                break;
              }

              _context.next = 12;
              return col.withCredentials(config).nextPage();

            case 12:
              col = _context.sent;
              _pricesObj = getPrices(col.toArray());
              allPrices = _extends({}, allPrices, _pricesObj);

              if (setPrices) {
                setPrices(allPrices);
              }

              dispatch({
                type: 'setPrices',
                payload: {
                  prices: allPrices
                }
              });

            case 17:
              key++;
              _context.next = 9;
              break;

            case 20:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function (_x) {
      return _ref2.apply(this, arguments);
    };
  }())["catch"](function (c) {
    var errors = getErrorsByCollection(c, 'price');
    dispatch({
      type: 'setErrors',
      payload: {
        errors: errors
      }
    });
  });
};
var unsetPriceState = function unsetPriceState(dispatch) {
  dispatch({
    type: 'setPrices',
    payload: {
      prices: {}
    }
  });
  dispatch({
    type: 'setLoading',
    payload: {
      loading: false
    }
  });
};
var typeAction$1 = ['setLoading', 'setPrices', 'setSkuCodes', 'setErrors'];

var priceReducer = function priceReducer(state, reducer) {
  return baseReducer(state, reducer, typeAction$1);
};

var PricesContext = /*#__PURE__*/React.createContext(priceInitialState);

var propTypes$B = components.Price.propTypes;
var defaultProps$f = components.Price.defaultProps;
var displayName$w = components.Price.displayName;

var Price = function Price(props) {
  var children = props.children,
      _props$skuCode = props.skuCode,
      skuCode = _props$skuCode === void 0 ? '' : _props$skuCode;

  var _useContext = React.useContext(PricesContext),
      prices = _useContext.prices,
      pricesSkuCode = _useContext.skuCode,
      loading = _useContext.loading,
      skuCodes = _useContext.skuCodes,
      setSkuCodes = _useContext.setSkuCodes,
      loader = _useContext.loader;

  var _useState = React.useState([]),
      skuPrices = _useState[0],
      setSkuPrices = _useState[1];

  var sCode = pricesSkuCode || skuCode;
  React.useEffect(function () {
    if (!_.isEmpty(prices) && _.has(prices, "" + sCode)) {
      setSkuPrices(prices[sCode]);
    } else {
      if (sCode && _.indexOf(skuCodes, sCode) === -1) {
        skuCodes.push(sCode);
        setSkuCodes && setSkuCodes(skuCodes);
      }
    }

    return function () {
      setSkuPrices([]);
    };
  }, [prices, sCode]);

  var parentProps = _extends({
    loading: loading,
    loader: loader
  }, props);

  var pricesComponent = _.isEmpty(prices) || _.isEmpty(skuPrices) ? null : getPricesComponent(skuPrices, props);
  return children ? /*#__PURE__*/React__default.createElement(Parent, parentProps, children) : /*#__PURE__*/React__default.createElement(React.Fragment, null, loading || _.isEmpty(pricesComponent) ? loader : pricesComponent);
};

Price.propTypes = propTypes$B;
Price.defaultProps = defaultProps$f;
Price.displayName = displayName$w;

var propTypes$C = components.PricesContainer.propTypes;
var defaultProps$g = components.PricesContainer.defaultProps;
var displayName$x = components.PricesContainer.displayName;

var PricesContainer = function PricesContainer(props) {
  var children = props.children,
      _props$skuCode = props.skuCode,
      skuCode = _props$skuCode === void 0 ? '' : _props$skuCode,
      _props$loader = props.loader,
      loader = _props$loader === void 0 ? 'Loading...' : _props$loader,
      _props$perPage = props.perPage,
      perPage = _props$perPage === void 0 ? 10 : _props$perPage,
      _props$filters = props.filters,
      filters = _props$filters === void 0 ? {} : _props$filters;

  var _useReducer = React.useReducer(priceReducer, priceInitialState),
      state = _useReducer[0],
      dispatch = _useReducer[1];

  var config = React.useContext(CommerceLayerContext);

  var _useContext = React.useContext(ItemContext),
      setPrices = _useContext.setPrices,
      prices = _useContext.prices,
      items = _useContext.items,
      currentItem = _useContext.item,
      itemSkuCode = _useContext.skuCode;

  if (_.indexOf(state.skuCodes, skuCode) === -1 && skuCode) state.skuCodes.push(skuCode);
  var sCode = getCurrentItemKey(currentItem) || skuCode || itemSkuCode || '';

  var setSkuCodes = function setSkuCodes(skuCodes) {
    dispatch({
      type: 'setSkuCodes',
      payload: {
        skuCodes: skuCodes
      }
    });
  };

  React.useEffect(function () {
    if (currentItem && _.has(prices, sCode)) {
      dispatch({
        type: 'setPrices',
        payload: {
          prices: prices
        }
      });
    }

    if (!_.isEmpty(items) && _.isEmpty(currentItem)) {
      var p = getPrices(items);
      dispatch({
        type: 'setPrices',
        payload: {
          prices: p
        }
      });
    }

    if (config.accessToken && _.isEmpty(currentItem) || config.accessToken && !_.has(prices, sCode)) {
      if (state.skuCodes.length > 0 || skuCode) {
        getSkusPrice(sCode && [sCode] || state.skuCodes, {
          config: config,
          dispatch: dispatch,
          setPrices: setPrices,
          prices: prices,
          perPage: perPage,
          filters: filters
        });
      }
    }

    return function () {
      if (_.isEmpty(currentItem)) {
        unsetPriceState(dispatch);
      }
    };
  }, [config.accessToken, currentItem, sCode]);

  var priceValue = _extends({}, state, {
    skuCode: sCode,
    loader: loader,
    setSkuCodes: setSkuCodes
  });

  return /*#__PURE__*/React__default.createElement(PricesContext.Provider, {
    value: priceValue
  }, children);
};

PricesContainer.propTypes = propTypes$C;
PricesContainer.defaultProps = defaultProps$g;
PricesContainer.displayName = displayName$x;

var propTypes$D = components.QuantitySelector.propTypes;
var defaultProps$h = components.QuantitySelector.defaultProps;
var displayName$y = components.QuantitySelector.displayName;

var QuantitySelector = function QuantitySelector(props) {
  var _items$skuCode, _item$sCode, _item$sCode$inventory;

  var skuCode = props.skuCode,
      skuListId = props.skuListId,
      children = props.children,
      _props$min = props.min,
      min = _props$min === void 0 ? 1 : _props$min,
      max = props.max,
      p = _objectWithoutPropertiesLoose(props, ["skuCode", "skuListId", "children", "min", "max"]);

  var _useContext = React.useContext(ItemContext),
      item = _useContext.item,
      setQuantity = _useContext.setQuantity,
      items = _useContext.items,
      quantity = _useContext.quantity,
      prices = _useContext.prices,
      itemSkuCode = _useContext.skuCode;

  var _useContext2 = React.useContext(SkuListsContext),
      skuLists = _useContext2.skuLists,
      listIds = _useContext2.listIds;

  var _useState = React.useState(min),
      value = _useState[0],
      setValue = _useState[1];

  var _useState2 = React.useState(!!p.disabled),
      disabled = _useState2[0],
      setDisabled = _useState2[1];

  var sCode = !_.isEmpty(items) && skuCode ? (_items$skuCode = items[skuCode]) == null ? void 0 : _items$skuCode.code : skuCode || getCurrentItemKey(item) || itemSkuCode;
  var inventory = _.isEmpty(item) ? 50 : (_item$sCode = item[sCode]) == null ? void 0 : (_item$sCode$inventory = _item$sCode.inventory) == null ? void 0 : _item$sCode$inventory.quantity;
  var maxInv = max || inventory;
  React.useEffect(function () {
    setValue(min);

    if (!prices[sCode] || !sCode) {
      setDisabled(true);
    }

    skuListId && setDisabled(false);

    if (sCode) {
      var _extends2;

      var qty = Number(min);
      setQuantity && setQuantity(_extends({}, quantity, (_extends2 = {}, _extends2["" + sCode] = qty, _extends2)));
      if (!_.isEmpty(prices) && _.has(prices, sCode)) setDisabled(false);
    }

    return function () {
      setValue(min);
    };
  }, [item, listIds, prices]);

  var handleChange = function handleChange(e) {
    var qty = Number(e.target.value);
    var valid = Number(qty) >= Number(min) && Number(qty) <= Number(maxInv);
    setValue(qty);

    if (!_.isEmpty(skuLists) && skuListId && valid) {
      var _extends3;

      setQuantity && setQuantity(_extends({}, quantity, (_extends3 = {}, _extends3["" + skuListId] = Number(qty), _extends3)));
    } else if (sCode && valid) {
      var _extends4;

      setQuantity && setQuantity(_extends({}, quantity, (_extends4 = {}, _extends4["" + sCode] = Number(qty), _extends4)));
    }
  };

  var handleBlur = function handleBlur(e) {
    var qty = e.target.value;
    var valid = Number(qty) >= Number(min) && Number(qty) <= Number(maxInv);

    if (!valid) {
      var resetVal = Number(qty) < Number(min) ? min : maxInv;
      setValue(resetVal);

      if (!_.isEmpty(skuLists) && skuListId) {
        var _extends5;

        setQuantity && setQuantity(_extends({}, quantity, (_extends5 = {}, _extends5["" + skuListId] = Number(resetVal), _extends5)));
      } else {
        var _extends6;

        setQuantity && setQuantity(_extends({}, quantity, (_extends6 = {}, _extends6["" + sCode] = Number(resetVal), _extends6)));
      }
    }
  };

  var parentProps = _extends({
    min: min,
    max: maxInv,
    disabled: disabled,
    handleChange: handleChange,
    handleBlur: handleBlur,
    value: value
  }, props);

  return children ? /*#__PURE__*/React__default.createElement(Parent, parentProps, children) : /*#__PURE__*/React__default.createElement("input", _extends({
    type: "number",
    max: maxInv,
    min: min,
    value: value || '',
    disabled: disabled,
    onChange: handleChange,
    onBlur: handleBlur
  }, p));
};

QuantitySelector.propTypes = propTypes$D;
QuantitySelector.defaultProps = defaultProps$h;
QuantitySelector.displayName = displayName$y;

var billingAddressController = function billingAddressController(_ref) {
  var billingAddress = _ref.billingAddress,
      billingAddressId = _ref.billingAddressId,
      errors = _ref.errors;

  var billingDisable = !_.isEmpty(errors) || _.isEmpty(billingAddress);

  if (_.isEmpty(errors) && !_.isEmpty(billingAddress)) {
    billingDisable = !!(billingAddress && fieldsExist(billingAddress));
  }

  if (billingDisable && !_.isEmpty(billingAddressId) && _.isEmpty(billingAddress)) {
    billingDisable = false;
  }

  return billingDisable;
};
var shippingAddressController = function shippingAddressController(_ref2) {
  var billingDisable = _ref2.billingDisable,
      errors = _ref2.errors,
      shipToDifferentAddress = _ref2.shipToDifferentAddress,
      shippingAddress = _ref2.shippingAddress,
      shippingAddressId = _ref2.shippingAddressId;
  var shippingDisable = !!(!billingDisable && shipToDifferentAddress);

  if (shippingDisable && _.isEmpty(errors) && !_.isEmpty(shippingAddress)) {
    shippingDisable = !!(shippingAddress && fieldsExist(shippingAddress));
  }

  if (shippingDisable && !_.isEmpty(shippingAddressId) && _.isEmpty(shippingAddress)) {
    shippingDisable = false;
  }

  return shippingDisable;
};
var countryLockController = function countryLockController(_ref3) {
  var addresses = _ref3.addresses,
      billingAddress = _ref3.billingAddress,
      billingAddressId = _ref3.billingAddressId,
      countryCodeLock = _ref3.countryCodeLock,
      shipToDifferentAddress = _ref3.shipToDifferentAddress,
      shippingAddress = _ref3.shippingAddress,
      shippingAddressId = _ref3.shippingAddressId;

  if (countryCodeLock && !_.isEmpty(addresses) && billingAddressId && !shipToDifferentAddress) {
    var addressLocked = addresses == null ? void 0 : addresses.find(function (a) {
      return (a.id === billingAddressId || a.reference === billingAddressId) && a.countryCode !== countryCodeLock;
    });
    if (!_.isEmpty(addressLocked)) return true;
  }

  if (countryCodeLock && !_.isEmpty(billingAddress) && !shipToDifferentAddress) {
    return (billingAddress == null ? void 0 : billingAddress['country_code']) !== countryCodeLock;
  }

  if (countryCodeLock && !_.isEmpty(shippingAddress) && shipToDifferentAddress) {
    return (shippingAddress == null ? void 0 : shippingAddress['country_code']) !== countryCodeLock;
  }

  if (countryCodeLock && !_.isEmpty(addresses) && shippingAddressId && shipToDifferentAddress) {
    var _addressLocked = addresses == null ? void 0 : addresses.find(function (a) {
      return (a.id === shippingAddressId || a.reference === shippingAddressId) && a.countryCode !== countryCodeLock;
    });

    if (!_.isEmpty(_addressLocked)) return true;
  }

  return false;
};

var propTypes$E = components.SaveAddressesButton.propTypes;
var defaultProps$i = components.SaveAddressesButton.defaultProps;
var displayName$z = components.SaveAddressesButton.displayName;

var SaveAddressesButton = function SaveAddressesButton(props) {
  var children = props.children,
      _props$label = props.label,
      label = _props$label === void 0 ? 'Continue to delivery' : _props$label,
      resource = props.resource,
      _props$disabled = props.disabled,
      disabled = _props$disabled === void 0 ? false : _props$disabled,
      onClick = props.onClick,
      p = _objectWithoutPropertiesLoose(props, ["children", "label", "resource", "disabled", "onClick"]);

  var _useContext = React.useContext(AddressesContext),
      errors = _useContext.errors,
      billingAddress = _useContext.billingAddress,
      shipToDifferentAddress = _useContext.shipToDifferentAddress,
      shippingAddress = _useContext.shippingAddress,
      saveAddresses = _useContext.saveAddresses,
      billingAddressId = _useContext.billingAddressId,
      shippingAddressId = _useContext.shippingAddressId;

  var _useContext2 = React.useContext(OrderContext),
      order = _useContext2.order;

  var _useContext3 = React.useContext(CustomerContext),
      addresses = _useContext3.addresses;

  var billingDisable = billingAddressController({
    billingAddress: billingAddress,
    errors: errors,
    billingAddressId: billingAddressId
  });
  var shippingDisable = shippingAddressController({
    billingDisable: billingDisable,
    errors: errors,
    shipToDifferentAddress: shipToDifferentAddress,
    shippingAddress: shippingAddress,
    shippingAddressId: shippingAddressId
  });
  var countryLockDisable = countryLockController({
    countryCodeLock: order == null ? void 0 : order.shippingCountryCodeLock,
    addresses: addresses,
    shipToDifferentAddress: shipToDifferentAddress,
    billingAddressId: billingAddressId,
    billingAddress: billingAddress,
    shippingAddress: shippingAddress,
    shippingAddressId: shippingAddressId
  });
  var disable = disabled || billingDisable || shippingDisable || countryLockDisable;

  var handleClick = /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee() {
      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!(_.isEmpty(errors) && !disable)) {
                _context.next = 4;
                break;
              }

              _context.next = 3;
              return saveAddresses();

            case 3:
              onClick && onClick();

            case 4:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function handleClick() {
      return _ref.apply(this, arguments);
    };
  }();

  var parentProps = _extends({}, p, {
    label: label,
    resource: resource,
    handleClick: handleClick,
    disabled: disable
  });

  return children ? /*#__PURE__*/React__default.createElement(Parent, parentProps, children) : /*#__PURE__*/React__default.createElement("button", _extends({
    type: "button",
    disabled: disable,
    onClick: handleClick
  }, p), label);
};

SaveAddressesButton.propTypes = propTypes$E;
SaveAddressesButton.defaultProps = defaultProps$i;
SaveAddressesButton.displayName = displayName$z;

var propTypes$F = components.SaveCustomerButton.propTypes;
var defaultProps$j = components.SaveCustomerButton.defaultProps;
var displayName$A = components.SaveCustomerButton.displayName;

var SaveCustomerButton = function SaveCustomerButton(props) {
  var children = props.children,
      _props$label = props.label,
      label = _props$label === void 0 ? 'Save' : _props$label,
      resource = props.resource,
      disabled = props.disabled,
      onClick = props.onClick,
      p = _objectWithoutPropertiesLoose(props, ["children", "label", "resource", "disabled", "onClick"]);

  var _useContext = React.useContext(CustomerContext),
      errors = _useContext.errors,
      saveCustomerUser = _useContext.saveCustomerUser,
      customerEmail = _useContext.customerEmail;

  var disable = disabled || !_.isEmpty(errors) || _.isEmpty(customerEmail);

  var handleClick = /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee() {
      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!(_.isEmpty(errors) && !disable)) {
                _context.next = 4;
                break;
              }

              _context.next = 3;
              return saveCustomerUser(customerEmail);

            case 3:
              onClick && onClick();

            case 4:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function handleClick() {
      return _ref.apply(this, arguments);
    };
  }();

  var parentProps = _extends({}, p, {
    label: label,
    resource: resource,
    handleClick: handleClick,
    disabled: disable
  });

  return children ? /*#__PURE__*/React__default.createElement(Parent, parentProps, children) : /*#__PURE__*/React__default.createElement("button", _extends({
    type: "button",
    disabled: disable,
    onClick: handleClick
  }, p), label);
};

SaveCustomerButton.propTypes = propTypes$F;
SaveCustomerButton.defaultProps = defaultProps$j;
SaveCustomerButton.displayName = displayName$A;

var shippingAddressInitialState = {
  _shippingAddressCloneId: ''
};
var setShippingAddress = /*#__PURE__*/function () {
  var _ref = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(id, options) {
    var address;
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;

            if (!(options != null && options.order)) {
              _context.next = 10;
              break;
            }

            if (!options.customerAddressId) {
              _context.next = 9;
              break;
            }

            _context.next = 5;
            return CLayer.Address.withCredentials(options.config).find(id);

          case 5:
            address = _context.sent;

            if (!(address.reference !== options.customerAddressId)) {
              _context.next = 9;
              break;
            }

            _context.next = 9;
            return address.withCredentials(options.config).update({
              reference: options.customerAddressId
            });

          case 9:
            options.dispatch({
              type: 'setShippingAddress',
              payload: {
                _shippingAddressCloneId: id
              }
            });

          case 10:
            _context.next = 15;
            break;

          case 12:
            _context.prev = 12;
            _context.t0 = _context["catch"](0);
            console.error(_context.t0);

          case 15:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[0, 12]]);
  }));

  return function setShippingAddress(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();
var setShippingCustomerAddressId = function setShippingCustomerAddressId(_ref2) {
  var customerAddressId = _ref2.customerAddressId,
      dispatch = _ref2.dispatch;
  dispatch({
    type: 'setShippingCustomerAddressId',
    payload: {
      shippingCustomerAddressId: customerAddressId
    }
  });
};
var type$4 = ['setShippingAddress', 'setShippingCustomerAddressId'];

var shippingAddressReducer = function shippingAddressReducer(state, reducer) {
  return baseReducer(state, reducer, type$4);
};

var propTypes$G = components.ShippingAddressContainer.propTypes;

var ShippingAddressContainer = function ShippingAddressContainer(props) {
  var children = props.children;

  var _useReducer = React.useReducer(shippingAddressReducer, shippingAddressInitialState),
      state = _useReducer[0],
      dispatch = _useReducer[1];

  var config = React.useContext(CommerceLayerContext);

  var _useContext = React.useContext(OrderContext),
      order = _useContext.order,
      getOrder = _useContext.getOrder;

  var _useContext2 = React.useContext(AddressesContext),
      setCloneAddress = _useContext2.setCloneAddress;

  React.useEffect(function () {
    if (order) {
      var _order$shippingAddres;

      var customerAddressId = ((_order$shippingAddres = order.shippingAddress()) == null ? void 0 : _order$shippingAddres.reference) || '';
      setShippingCustomerAddressId({
        customerAddressId: customerAddressId,
        dispatch: dispatch
      });
      setCloneAddress(customerAddressId, 'shippingAddress');
    }
  }, [order]);

  var contextValue = _extends({}, state, {
    setShippingAddress: function () {
      var _setShippingAddress2 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(id, options) {
        return runtime_1.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return setShippingAddress(id, {
                  config: config,
                  dispatch: dispatch,
                  order: order,
                  getOrder: getOrder,
                  customerAddressId: options == null ? void 0 : options.customerAddressId
                });

              case 2:
                setCloneAddress(id, 'shippingAddress');

              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function setShippingAddress$1(_x, _x2) {
        return _setShippingAddress2.apply(this, arguments);
      }

      return setShippingAddress$1;
    }()
  });

  return /*#__PURE__*/React__default.createElement(ShippingAddressContext.Provider, {
    value: contextValue
  }, children);
};

ShippingAddressContainer.propTypes = propTypes$G;

var propTypes$H = components.ShippingAddressForm.propTypes;

var ShippingAddressForm = function ShippingAddressForm(props) {
  var children = props.children,
      _props$autoComplete = props.autoComplete,
      autoComplete = _props$autoComplete === void 0 ? 'on' : _props$autoComplete,
      _props$reset = props.reset,
      reset = _props$reset === void 0 ? false : _props$reset,
      p = _objectWithoutPropertiesLoose(props, ["children", "autoComplete", "reset"]);

  var _useRapidForm = useRapidForm(),
      validation = _useRapidForm.validation,
      values = _useRapidForm.values,
      errors = _useRapidForm.errors,
      resetForm = _useRapidForm.reset;

  var _useContext = React.useContext(AddressesContext),
      setAddressErrors = _useContext.setAddressErrors,
      setAddress = _useContext.setAddress,
      shipToDifferentAddress = _useContext.shipToDifferentAddress;

  var _useContext2 = React.useContext(OrderContext),
      saveAddressToCustomerBook = _useContext2.saveAddressToCustomerBook;

  var ref = React.useRef(null);
  React.useEffect(function () {
    if (!_.isEmpty(errors)) {
      var formErrors = [];

      for (var fieldName in errors) {
        var _errors$fieldName = errors[fieldName],
            code = _errors$fieldName.code,
            message = _errors$fieldName.message;
        formErrors.push({
          code: code,
          message: message,
          resource: 'shippingAddress',
          field: fieldName
        });
      }

      !_.isEmpty(formErrors) && shipToDifferentAddress && setAddressErrors(formErrors);
    } else if (!_.isEmpty(values) && shipToDifferentAddress) {
      setAddressErrors([]);

      for (var name in values) {
        var field = values[name];

        if (field != null && field.value) {
          values[name.replace('shipping_address_', '')] = field.value;
          delete values[name];
        }

        if ((field == null ? void 0 : field.type) === 'checkbox') {
          delete values[name];
          saveAddressToCustomerBook('ShippingAddress', field.checked);
        }
      }

      setAddress({
        values: values,
        resource: 'shippingAddress'
      });
    }

    if (reset && (!_.isEmpty(values) || !_.isEmpty(errors))) {
      saveAddressToCustomerBook && saveAddressToCustomerBook('ShippingAddress', false);

      if (ref) {
        var _ref$current;

        (_ref$current = ref.current) == null ? void 0 : _ref$current.reset();
        resetForm({
          target: ref.current
        });
        setAddressErrors([]);
        setAddress({
          values: {},
          resource: 'shippingAddress'
        });
      }
    }
  }, [values, errors, shipToDifferentAddress, reset]);

  var setValue = function setValue(name, value) {
    var _field;

    var field = (_field = {}, _field[name.replace('shipping_address_', '')] = value, _field);
    setAddress({
      values: _extends({}, values, field),
      resource: 'shippingAddress'
    });
  };

  return /*#__PURE__*/React__default.createElement(ShippingAddressFormContext.Provider, {
    value: {
      validation: validation,
      setValue: setValue
    }
  }, /*#__PURE__*/React__default.createElement("form", _extends({
    ref: ref,
    autoComplete: autoComplete
  }, p), children));
};

ShippingAddressForm.propTypes = propTypes$H;

var propTypes$I = components.ShippingAmount.propTypes;
var displayName$B = components.ShippingAmount.displayName;

var ShippingAmount = function ShippingAmount(props) {
  return /*#__PURE__*/React__default.createElement(BaseOrderPrice, _extends({
    base: "amount",
    type: "shipping"
  }, props));
};

ShippingAmount.propTypes = propTypes$I;
ShippingAmount.displayName = displayName$B;

var propTypes$J = components.SkuList.propTypes;
var displayName$C = components.SkuList.displayName;

var SkuList = function SkuList(props) {
  var id = props.id,
      children = props.children;

  var _useContext = React.useContext(SkuListsContext),
      listIds = _useContext.listIds;

  React.useEffect(function () {
    if (!listIds.includes(id)) {
      listIds.push(id);
    }
  }, []);
  return /*#__PURE__*/React__default.createElement(React.Fragment, null, children);
};

SkuList.propTypes = propTypes$J;
SkuList.displayName = displayName$C;

var propTypes$K = components.SkuListsContainer.propTypes;
var displayName$D = components.SkuListsContainer.displayName;

var SkuListsContainer = function SkuListsContainer(props) {
  var children = props.children;

  var _useReducer = React.useReducer(skuListsReducer, skuListsInitialState),
      state = _useReducer[0],
      dispatch = _useReducer[1];

  var config = React.useContext(CommerceLayerContext);
  React.useEffect(function () {
    if (state.listIds.length > 0 && config.accessToken) {
      getSkuList({
        listIds: state.listIds,
        dispatch: dispatch,
        config: config,
        state: state
      });
    }
  }, [config.accessToken]);
  return /*#__PURE__*/React__default.createElement(SkuListsContext.Provider, {
    value: state
  }, children);
};

SkuListsContainer.propTypes = propTypes$K;
SkuListsContainer.displayName = displayName$D;

var initial$7 = {
  skuCode: ''
};
var SkuOptionChildrenContext = /*#__PURE__*/React.createContext(initial$7);

var getSkuOptions = /*#__PURE__*/function () {
  var _ref = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(params) {
    var skuOptions, dispatch;
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            skuOptions = params.skuOptions, dispatch = params.dispatch;
            dispatch({
              type: 'setSkuOptions',
              payload: {
                skuOptions: skuOptions
              }
            });

          case 2:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function getSkuOptions(_x) {
    return _ref.apply(this, arguments);
  };
}();
var actionType$4 = ['setSkuOptions', 'setErrors'];
var skuOptionsInitialState = {
  skuCode: '',
  skuOptions: []
};

var skuOptionsReducer = function skuOptionsReducer(state, reducer) {
  return baseReducer(state, reducer, actionType$4);
};

var SkuOptionsContext = /*#__PURE__*/React.createContext(skuOptionsInitialState);

var propTypes$L = components.SkuOption.propTypes;
var displayName$E = components.SkuOption.displayName;

var SkuOption = function SkuOption(props) {
  var id = props.id;

  var _useContext = React.useContext(SkuOptionsContext),
      skuOptions = _useContext.skuOptions,
      skuCode = _useContext.skuCode;

  var items = skuOptions && skuOptions.filter(function (l) {
    return l.id === id;
  }).map(function (skuOption, k) {
    return /*#__PURE__*/React__default.createElement(SkuOptionChildrenContext.Provider, {
      key: k,
      value: {
        skuOption: skuOption,
        skuCode: skuCode
      }
    }, props.children);
  });
  return /*#__PURE__*/React__default.createElement(React.Fragment, null, items);
};

SkuOption.propTypes = propTypes$L;
SkuOption.displayName = displayName$E;

var propTypes$M = components.SkuOptionInput.propTypes;
var displayName$F = components.SkuOptionInput.displayName;

var SkuOptionInput = function SkuOptionInput(props) {
  var name = props.name;

  var _useContext = React.useContext(ItemContext),
      option = _useContext.option,
      setOption = _useContext.setOption;

  var _useContext2 = React.useContext(SkuOptionChildrenContext),
      skuOption = _useContext2.skuOption,
      skuCode = _useContext2.skuCode;

  var handleChange = function handleChange(event) {
    var _extends2, _extends3, _o;

    var val = event.target.value;
    var options = _.has(option, skuCode + "." + (skuOption == null ? void 0 : skuOption.id)) ? option[skuCode]["" + (skuOption == null ? void 0 : skuOption.id)]['options'] : {};
    var o = (_o = {}, _o[skuCode] = _extends({}, option[skuCode], (_extends3 = {}, _extends3["" + (skuOption == null ? void 0 : skuOption.id)] = {
      skuOptionId: skuOption == null ? void 0 : skuOption.id,
      options: _extends({}, options, (_extends2 = {}, _extends2[name] = val, _extends2))
    }, _extends3)), _o);
    setOption && setOption(o);
  };

  return /*#__PURE__*/React__default.createElement(BaseInput$1, _extends({
    onChange: handleChange
  }, props));
};

SkuOptionInput.propTypes = propTypes$M;
SkuOptionInput.displayName = displayName$F;

var propTypes$N = components.SkuOptionsContainer.propTypes;
var displayName$G = components.SkuOptionsContainer.displayName;

var SkuOptionsContainer = function SkuOptionsContainer(props) {
  var _items$skuCode;

  var skuCode = props.skuCode,
      children = props.children;

  var _useReducer = React.useReducer(skuOptionsReducer, skuOptionsInitialState),
      state = _useReducer[0],
      dispatch = _useReducer[1];

  var config = React.useContext(CommerceLayerContext);

  var _useContext = React.useContext(ItemContext),
      item = _useContext.item,
      items = _useContext.items;

  var sCode = !_.isEmpty(items) && skuCode ? (_items$skuCode = items[skuCode]) == null ? void 0 : _items$skuCode.code : skuCode || getCurrentItemKey(item);

  var skuOptionsValue = _extends({}, state, {
    skuCode: sCode
  });

  React.useEffect(function () {
    if (sCode && item[sCode].skuOptions) {
      var _item$sCode$skuOption;

      getSkuOptions({
        skuOptions: (_item$sCode$skuOption = item[sCode].skuOptions()) == null ? void 0 : _item$sCode$skuOption.toArray(),
        dispatch: dispatch
      });
    }

    return function () {
      if (_.isEmpty(sCode)) {
        dispatch({
          type: 'setSkuOptions',
          payload: {
            skuOptions: []
          }
        });
      }
    };
  }, [config, sCode]);
  return /*#__PURE__*/React__default.createElement(SkuOptionsContext.Provider, {
    value: skuOptionsValue
  }, children);
};

SkuOptionsContainer.propTypes = propTypes$N;
SkuOptionsContainer.displayName = displayName$G;

var propTypes$O = components.SubTotalAmount.propTypes;
var defaultProps$k = components.SubTotalAmount.defaultProps;
var displayName$H = components.SubTotalAmount.displayName;

var SubTotalAmount = function SubTotalAmount(props) {
  return /*#__PURE__*/React__default.createElement(BaseOrderPrice, _extends({
    base: "amount",
    type: "subtotal"
  }, props));
};

SubTotalAmount.propTypes = propTypes$O;
SubTotalAmount.defaultProps = defaultProps$k;
SubTotalAmount.displayName = displayName$H;

var propTypes$P = components.SubmitButton.propTypes;
var defaultProps$l = components.SubmitButton.defaultProps;
var displayName$I = components.SubmitButton.displayName;

var SubmitButton = function SubmitButton(props) {
  var children = props.children,
      _props$label = props.label,
      label = _props$label === void 0 ? 'Submit' : _props$label,
      p = _objectWithoutPropertiesLoose(props, ["children", "label"]);

  var parentProps = _extends({}, p, {
    label: label
  });

  return children ? /*#__PURE__*/React__default.createElement(Parent, parentProps, children) : /*#__PURE__*/React__default.createElement("button", _extends({
    type: "submit"
  }, p), label);
};

SubmitButton.propTypes = propTypes$P;
SubmitButton.defaultProps = defaultProps$l;
SubmitButton.displayName = displayName$I;

var propTypes$Q = components.TaxesAmount.propTypes;
var defaultProps$m = components.TaxesAmount.defaultProps;
var displayName$J = components.TaxesAmount.displayName;

var TaxesAmount = function TaxesAmount(props) {
  return /*#__PURE__*/React__default.createElement(BaseOrderPrice, _extends({
    base: "amount",
    type: "totalTax"
  }, props));
};

TaxesAmount.propTypes = propTypes$Q;
TaxesAmount.defaultProps = defaultProps$m;
TaxesAmount.displayName = displayName$J;

var propTypes$R = components.TotalAmount.propTypes;
var defaultProps$n = components.TotalAmount.defaultProps;
var displayName$K = components.TotalAmount.displayName;

var TotalAmount = function TotalAmount(props) {
  return /*#__PURE__*/React__default.createElement(BaseOrderPrice, _extends({
    base: "totalAmount",
    type: "withTaxes"
  }, props));
};

TotalAmount.propTypes = propTypes$R;
TotalAmount.defaultProps = defaultProps$n;
TotalAmount.displayName = displayName$K;

var propTypes$S = {
  variants: PropTypes.any.isRequired,
  onChange: PropTypes.func,
  options: /*#__PURE__*/PropTypes.arrayOf( /*#__PURE__*/PropTypes.shape({
    label: PropTypes.string.isRequired,
    code: PropTypes.string.isRequired,
    lineItem: /*#__PURE__*/PropTypes.shape({
      name: PropTypes.string.isRequired,
      imageUrl: PropTypes.string
    })
  }).isRequired).isRequired,
  name: PropTypes.string,
  children: PropTypes.func,
  type: /*#__PURE__*/PropTypes.oneOf(['select', 'radio']),
  loader: PropTypes.element,
  placeholder: PropTypes.string,
  skuCode: PropTypes.string
};

var VariantTemplate = function VariantTemplate(props) {
  var id = props.id,
      variants = props.variants,
      type = props.type,
      placeholder = props.placeholder,
      options = props.options,
      skuCode = props.skuCode,
      handleChange = props.handleChange,
      prs = _objectWithoutPropertiesLoose(props, ["id", "variants", "type", "placeholder", "options", "skuCode", "handleChange"]);

  var vars = _.keys(variants).map(function (v, k) {
    var checked = skuCode === v;
    return type === 'select' ? /*#__PURE__*/React__default.createElement("option", {
      key: variants[v].id,
      "data-sku-id": variants[v].id,
      value: variants[v].code
    }, options.length > 0 ? options[k].label : variants[v].name) : /*#__PURE__*/React__default.createElement(React.Fragment, {
      key: variants[v].id
    }, /*#__PURE__*/React__default.createElement("input", _extends({
      id: id && id + "-" + k,
      defaultChecked: checked,
      type: "radio",
      value: variants[v].code,
      onChange: function onChange(e) {
        return handleChange && handleChange(e.target.value, variants[v].id);
      }
    }, prs)), options.length > 0 ? options[k].label : variants[v].name);
  });

  if (type === 'select') {
    return /*#__PURE__*/React__default.createElement("select", _extends({
      id: id,
      onChange: function onChange(e) {
        var v = e.target.value;
        var i = e.target.selectedIndex;
        var id = e.target[i].dataset.skuId;
        handleChange && handleChange(v, id);
      },
      value: skuCode || ''
    }, prs), /*#__PURE__*/React__default.createElement("option", {
      disabled: !!skuCode
    }, placeholder), vars);
  }

  return /*#__PURE__*/React__default.createElement(React.Fragment, null, vars);
};

VariantTemplate.propTypes = propTypes$S;

var getSkus = function getSkus(prices) {
  var obj = {};
  prices.map(function (sku) {
    obj[sku.code] = sku;
  });
  return obj;
};

var setVariantSkuCodes = function setVariantSkuCodes(_ref) {
  var skuCodes = _ref.skuCodes,
      dispatch = _ref.dispatch,
      setCustomLineItems = _ref.setCustomLineItems;
  var lineItems = {};
  var sCodes = skuCodes.map(function (s) {
    if (_.has(s, 'lineItem')) {
      lineItems[s.code] = s.lineItem;
    }

    return s.code;
  });

  if (!_.isEmpty(lineItems)) {
    setCustomLineItems && setCustomLineItems(lineItems);
  }

  dispatch({
    type: 'setSkuCodes',
    payload: {
      skuCodes: sCodes
    }
  });
};
var setSkuCode = function setSkuCode(params) {
  var id = params.id,
      code = params.code,
      config = params.config,
      setItem = params.setItem,
      dispatch = params.dispatch;

  if (id) {
    CLayer__default.Sku.withCredentials(config).includes('skuOptions').find(id).then(function (s) {
      var _setItem;

      setItem && setItem((_setItem = {}, _setItem["" + code] = s, _setItem));
    })["catch"](function (c) {
      var errors = getErrorsByCollection(c, 'variant');
      dispatch({
        type: 'setErrors',
        payload: {
          errors: errors
        }
      });
    });
  }
};
var getVariants = function getVariants(params) {
  var config = params.config,
      state = params.state,
      skuCode = params.skuCode,
      dispatch = params.dispatch,
      setItem = params.setItem,
      filters = params.filters;
  CLayer__default.Sku.withCredentials(config).where(_extends({
    codeIn: state.skuCodes.join(',')
  }, filters)).all().then(function (r) {
    var skusObj = getSkus(r.toArray());

    if (skuCode) {
      setSkuCode({
        code: skusObj[skuCode].code,
        id: skusObj[skuCode].id,
        config: config,
        dispatch: dispatch,
        setItem: setItem
      });
    }

    dispatch({
      type: 'setVariants',
      payload: {
        variants: skusObj
      }
    });
    dispatch({
      type: 'setLoading',
      payload: {
        loading: false
      }
    });
  })["catch"](function (c) {
    var errors = getErrorsByCollection(c, 'variant');
    dispatch({
      type: 'setErrors',
      payload: {
        errors: errors
      }
    });
  });
};
var unsetVariantState = function unsetVariantState(dispatch) {
  dispatch({
    type: 'setSkuCode',
    payload: {
      skuCode: ''
    }
  });
  dispatch({
    type: 'setVariants',
    payload: {
      variants: {}
    }
  });
  dispatch({
    type: 'setLoading',
    payload: {
      loading: false
    }
  });
};
var variantInitialState = {
  loading: false,
  variants: {},
  skuCodes: [],
  skuCode: '',
  errors: [],
  currentSkuId: '',
  currentSkuInventory: {
    available: false,
    quantity: 0,
    levels: []
  },
  currentQuantity: 1,
  currentPrices: []
};
var actionType$5 = ['setLoading', 'setVariants', 'setSkuCodes', 'setSkuCode', 'setCurrentSkuId', 'setCurrentSkuInventory', 'setCurrentPrices', 'setErrors'];

var variantReducer = function variantReducer(state, reducer) {
  return baseReducer(state, reducer, actionType$5);
};

var VariantsContext = /*#__PURE__*/React.createContext(variantInitialState);

var propTypes$T = components.VariantSelector.propTypes;
var defaultProps$o = components.VariantSelector.defaultProps;
var displayName$L = components.VariantSelector.displayName;

var VariantSelector = function VariantSelector(props) {
  var children = props.children,
      type = props.type,
      placeholder = props.placeholder,
      skuCode = props.skuCode,
      name = props.name,
      options = props.options,
      prs = _objectWithoutPropertiesLoose(props, ["children", "type", "placeholder", "skuCode", "name", "options"]);

  var _useContext = React.useContext(VariantsContext),
      setSkuCode = _useContext.setSkuCode,
      variantSkuCode = _useContext.skuCode,
      loading = _useContext.loading,
      variants = _useContext.variants,
      setSkuCodes = _useContext.setSkuCodes;

  React.useEffect(function () {
    setSkuCodes && setSkuCodes(options);
    return function () {
      setSkuCodes && setSkuCodes([]);
    };
  }, [options]);
  var sCode = variantSkuCode || skuCode || '';

  var DefaultTemplate = function DefaultTemplate() {
    return loading ? /*#__PURE__*/React__default.createElement(React.Fragment, null, props.loader || 'Loading...') : /*#__PURE__*/React__default.createElement(VariantTemplate, _extends({
      variants: variants,
      type: type,
      placeholder: placeholder,
      skuCode: sCode,
      options: options,
      handleChange: setSkuCode,
      name: name
    }, prs));
  };

  var parentProps = _extends({
    variants: variants,
    loading: loading,
    handleSelect: setSkuCode,
    skuCode: sCode
  }, props);

  return children ? /*#__PURE__*/React__default.createElement(Parent, parentProps, children) : /*#__PURE__*/React__default.createElement(React.Fragment, null, /*#__PURE__*/React__default.createElement(DefaultTemplate, null));
};

VariantSelector.propTypes = propTypes$T;
VariantSelector.defaultProps = defaultProps$o;
VariantSelector.displayName = displayName$L;

var propTypes$U = components.VariantsContainer.propTypes;
var defaultProps$p = components.VariantsContainer.defaultProps;
var displayName$M = components.VariantsContainer.displayName;

var VariantsContainer = function VariantsContainer(props) {
  var children = props.children,
      _props$skuCode = props.skuCode,
      skuCode = _props$skuCode === void 0 ? '' : _props$skuCode,
      _props$filters = props.filters,
      filters = _props$filters === void 0 ? {} : _props$filters;
  var config = React.useContext(CommerceLayerContext);

  var _useContext = React.useContext(ItemContext),
      setItem = _useContext.setItem,
      setItems = _useContext.setItems,
      items = _useContext.items,
      currentItem = _useContext.item,
      setCustomLineItems = _useContext.setCustomLineItems,
      itemSkuCode = _useContext.skuCode;

  var _useReducer = React.useReducer(variantReducer, variantInitialState),
      state = _useReducer[0],
      dispatch = _useReducer[1];

  var sCode = getCurrentItemKey(currentItem) || skuCode || state.skuCode || itemSkuCode || '';
  React.useEffect(function () {
    if (!_.isEmpty(items) && !_.isEmpty(state.variants)) {
      if (!_.isEqual(items, state.variants)) {
        var mergeItems = _extends({}, items, state.variants);

        setItems && setItems(mergeItems);
      }
    }

    if (state.skuCodes.length >= 1 && config.accessToken) {
      dispatch({
        type: 'setLoading',
        payload: {
          loading: true
        }
      });
      getVariants({
        config: config,
        state: state,
        dispatch: dispatch,
        setItem: setItem,
        skuCode: sCode,
        filters: filters
      });
    }

    return function () {
      return unsetVariantState(dispatch);
    };
  }, [config]);

  var variantValue = _extends({}, state, {
    skuCode: sCode,
    setSkuCode: function setSkuCode$1(code, id, lineItem) {
      if (lineItem === void 0) {
        lineItem = {};
      }

      if (!_.isEmpty(lineItem)) {
        var _setCustomLineItems;

        setCustomLineItems && setCustomLineItems((_setCustomLineItems = {}, _setCustomLineItems[code] = lineItem, _setCustomLineItems));
      }

      setSkuCode({
        code: code,
        id: id,
        config: config,
        setItem: setItem,
        dispatch: dispatch
      });
    },
    setSkuCodes: function setSkuCodes(skuCodes) {
      return setVariantSkuCodes({
        skuCodes: skuCodes,
        dispatch: dispatch,
        setCustomLineItems: setCustomLineItems
      });
    }
  });

  return /*#__PURE__*/React__default.createElement(VariantsContext.Provider, {
    value: variantValue
  }, children);
};

VariantsContainer.propTypes = propTypes$U;
VariantsContainer.defaultProps = defaultProps$p;
VariantsContainer.displayName = displayName$M;

var shipmentInitialState = {
  errors: []
};
var setShipmentErrors = function setShipmentErrors(errors, dispatch) {
  dispatch && dispatch({
    type: 'setErrors',
    payload: {
      errors: errors
    }
  });
};
var getShipments = /*#__PURE__*/function () {
  var _ref2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(_ref) {
    var order, dispatch, config, _order$withCredential, shipments;

    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            order = _ref.order, dispatch = _ref.dispatch, config = _ref.config;
            _context.prev = 1;
            _context.next = 4;
            return (_order$withCredential = order.withCredentials(config).shipments()) == null ? void 0 : _order$withCredential.includes('availableShippingMethods', 'availableShippingMethods.deliveryLeadTimeForShipment', 'shipmentLineItems', 'shipmentLineItems.lineItem', 'stockTransfers', 'shippingMethod').load();

          case 4:
            shipments = _context.sent;
            console.log('shipments', shipments);
            dispatch({
              type: 'setShipments',
              payload: {
                shipments: shipments == null ? void 0 : shipments.toArray()
              }
            });
            _context.next = 12;
            break;

          case 9:
            _context.prev = 9;
            _context.t0 = _context["catch"](1);
            console.error(_context.t0);

          case 12:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[1, 9]]);
  }));

  return function getShipments(_x) {
    return _ref2.apply(this, arguments);
  };
}();
var setShippingMethod = /*#__PURE__*/function () {
  var _ref4 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(_ref3) {
    var config, shipmentId, shippingMethodId, getOrder, order, shipment, shippingMethod;
    return runtime_1.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            config = _ref3.config, shipmentId = _ref3.shipmentId, shippingMethodId = _ref3.shippingMethodId, getOrder = _ref3.getOrder, order = _ref3.order;
            _context2.prev = 1;

            if (!shippingMethodId) {
              _context2.next = 10;
              break;
            }

            _context2.next = 5;
            return CLayer.Shipment.withCredentials(config).includes('availableShippingMethods', 'availableShippingMethods.deliveryLeadTimeForShipment', 'shipmentLineItems', 'shipmentLineItems.lineItem', 'stockTransfers', 'shippingMethod').find(shipmentId);

          case 5:
            shipment = _context2.sent;
            shippingMethod = CLayer.ShippingMethod.build({
              id: shippingMethodId
            });
            _context2.next = 9;
            return shipment.withCredentials(config).update({
              shippingMethod: shippingMethod
            });

          case 9:
            getOrder && order && getOrder(order.id);

          case 10:
            _context2.next = 15;
            break;

          case 12:
            _context2.prev = 12;
            _context2.t0 = _context2["catch"](1);
            console.error(_context2.t0);

          case 15:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, null, [[1, 12]]);
  }));

  return function setShippingMethod(_x2) {
    return _ref4.apply(this, arguments);
  };
}();
var type$5 = ['setErrors', 'setShipments', 'setShippingMethod'];

var shipmentReducer = function shipmentReducer(state, reducer) {
  return baseReducer(state, reducer, type$5);
};

var defaultShipmentContext = {
  setShipmentErrors: setShipmentErrors,
  setShippingMethod: /*#__PURE__*/function () {
    var _setShippingMethod = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee() {
      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return");

            case 1:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    function setShippingMethod() {
      return _setShippingMethod.apply(this, arguments);
    }

    return setShippingMethod;
  }()
};
var ShipmentContext = /*#__PURE__*/React.createContext(defaultShipmentContext);

var propTypes$V = components.ShipmentsContainer.propTypes;
var displayName$N = components.ShipmentsContainer.displayName;

var ShipmentsContainer = function ShipmentsContainer(props) {
  var children = props.children;

  var _useReducer = React.useReducer(shipmentReducer, shipmentInitialState),
      state = _useReducer[0],
      dispatch = _useReducer[1];

  var _useContext = React.useContext(OrderContext),
      order = _useContext.order,
      getOrder = _useContext.getOrder;

  var config = React.useContext(CommerceLayerContext);
  React.useEffect(function () {
    // TODO: Get shipments
    if (order) {
      getShipments({
        order: order,
        dispatch: dispatch,
        config: config
      });
    }
  }, [order]);

  var contextValue = _extends({}, state, {
    setShipmentErrors: function setShipmentErrors(errors) {
      return defaultShipmentContext['setShipmentErrors'](errors, dispatch);
    },
    setShippingMethod: function () {
      var _setShippingMethod2 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(shipmentId, shippingMethodId) {
        return runtime_1.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return setShippingMethod({
                  shippingMethodId: shippingMethodId,
                  shipmentId: shipmentId,
                  config: config,
                  getOrder: getOrder,
                  order: order
                });

              case 2:
                return _context.abrupt("return", _context.sent);

              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function setShippingMethod$1(_x, _x2) {
        return _setShippingMethod2.apply(this, arguments);
      }

      return setShippingMethod$1;
    }()
  });

  return /*#__PURE__*/React__default.createElement(ShipmentContext.Provider, {
    value: contextValue
  }, children);
};

ShipmentsContainer.propTypes = propTypes$V;
ShipmentsContainer.displayName = displayName$N;

var propTypes$W = components.Shipment.propTypes;
var displayName$O = components.Shipment.displayName;

var Shipment = function Shipment(_ref) {
  var children = _ref.children;

  var _useContext = React.useContext(ShipmentContext),
      shipments = _useContext.shipments;

  var components = shipments && shipments.map(function (shipment, k) {
    var _shipment$shipmentLin, _shipment$availableSh, _shipment$shippingMet, _shipment$stockTransf;

    var shipmentLineItems = (_shipment$shipmentLin = shipment.shipmentLineItems()) == null ? void 0 : _shipment$shipmentLin.toArray();
    var lineItems = shipmentLineItems == null ? void 0 : shipmentLineItems.map(function (shipmentLineItem) {
      return shipmentLineItem.lineItem();
    });
    var shippingMethods = (_shipment$availableSh = shipment.availableShippingMethods()) == null ? void 0 : _shipment$availableSh.toArray();
    var currentShippingMethodId = (_shipment$shippingMet = shipment.shippingMethod()) == null ? void 0 : _shipment$shippingMet.id;
    var stockTransfers = (_shipment$stockTransf = shipment.stockTransfers()) == null ? void 0 : _shipment$stockTransf.toArray();
    var shipmentProps = {
      lineItems: lineItems,
      shippingMethods: shippingMethods,
      currentShippingMethodId: currentShippingMethodId,
      stockTransfers: stockTransfers
    };
    return /*#__PURE__*/React__default.createElement(ShipmentChildrenContext.Provider, {
      key: k,
      value: shipmentProps
    }, children);
  });
  return /*#__PURE__*/React__default.createElement(React.Fragment, null, components);
};

Shipment.propTypes = propTypes$W;
Shipment.displayName = displayName$O;

var initial$8 = {
  shippingMethod: {},
  deliveryLeadTimeForShipment: {}
};
var ShippingMethodChildrenContext = /*#__PURE__*/React.createContext(initial$8);

var propTypes$X = components.ShippingMethod.propTypes;
var displayName$P = components.ShippingMethod.displayName;

var ShippingMethod = function ShippingMethod(props) {
  var children = props.children,
      readonly = props.readonly,
      _props$emptyText = props.emptyText,
      emptyText = _props$emptyText === void 0 ? "There are not any shipping method available" : _props$emptyText;

  var _useContext = React.useContext(ShipmentChildrenContext),
      shippingMethods = _useContext.shippingMethods,
      currentShippingMethodId = _useContext.currentShippingMethodId;

  var _useState = React.useState([]),
      items = _useState[0],
      setItems = _useState[1];

  React.useEffect(function () {
    var methods = shippingMethods && shippingMethods.filter(function (s) {
      if (readonly) return s.id === currentShippingMethodId;
      return true;
    }).map(function (shippingMethod, k) {
      // NOTE: Remove with new SDK version
      // @ts-ignore
      var deliveryLeadTimeForShipment = shippingMethod.deliveryLeadTimeForShipment();
      var shippingProps = {
        shippingMethod: shippingMethod,
        currentShippingMethodId: currentShippingMethodId,
        deliveryLeadTimeForShipment: deliveryLeadTimeForShipment
      };
      return /*#__PURE__*/React__default.createElement(ShippingMethodChildrenContext.Provider, {
        key: k,
        value: shippingProps
      }, children);
    });
    if (methods) setItems(methods);
  }, [currentShippingMethodId]);
  var components = !_.isEmpty(items) && items || emptyText;
  return /*#__PURE__*/React__default.createElement(React.Fragment, null, components);
};

ShippingMethod.propTypes = propTypes$X;
ShippingMethod.displayName = displayName$P;

var propTypes$Y = components.ShippingMethodName.propTypes;
var displayName$Q = components.ShippingMethodName.displayName;

var ShippingMethodName = function ShippingMethodName(props) {
  var _useContext = React.useContext(ShippingMethodChildrenContext),
      shippingMethod = _useContext.shippingMethod;

  var labelName = shippingMethod['name'];

  var parentProps = _extends({}, props);

  return props.children ? /*#__PURE__*/React__default.createElement(Parent, parentProps, props.children) : /*#__PURE__*/React__default.createElement("p", props, labelName);
};

ShippingMethodName.propTypes = propTypes$Y;
ShippingMethodName.displayName = displayName$Q;

var propTypes$Z = components.ShippingMethodRadioButton.propTypes;
var displayName$R = components.ShippingMethodRadioButton.displayName;

var ShippingMethodRadioButton = function ShippingMethodRadioButton(props) {
  var onChange = props.onChange,
      p = _objectWithoutPropertiesLoose(props, ["onChange"]);

  var _useContext = React.useContext(ShippingMethodChildrenContext),
      shippingMethod = _useContext.shippingMethod,
      currentShippingMethodId = _useContext.currentShippingMethodId;

  var _useContext2 = React.useContext(ShipmentContext),
      setShippingMethod = _useContext2.setShippingMethod;

  var shipmentId = shippingMethod.shipmentId || '';
  var shippingMethodId = shippingMethod.id;
  var name = "shipment-" + shipmentId;
  var checked = shippingMethod.id === currentShippingMethodId;

  var handleOnChange = /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee() {
      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return setShippingMethod(shipmentId, shippingMethodId);

            case 2:
              onChange && onChange(shippingMethod);

            case 3:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function handleOnChange() {
      return _ref.apply(this, arguments);
    };
  }();

  var parentProps = _extends({
    handleOnChange: handleOnChange
  }, props);

  return props.children ? /*#__PURE__*/React__default.createElement(Parent, parentProps, props.children) : /*#__PURE__*/React__default.createElement("input", _extends({
    type: "radio",
    name: name,
    onChange: handleOnChange,
    defaultChecked: checked
  }, p));
};

ShippingMethodRadioButton.propTypes = propTypes$Z;
ShippingMethodRadioButton.displayName = displayName$R;

var propTypes$_ = components.ShippingMethodPrice.propTypes;
var displayName$S = components.ShippingMethodPrice.displayName;

var ShippingMethodPrice = function ShippingMethodPrice(props) {
  var _props$format = props.format,
      format = _props$format === void 0 ? 'formatted' : _props$format,
      _props$type = props.type,
      type = _props$type === void 0 ? 'amountForShipment' : _props$type,
      _props$base = props.base,
      base = _props$base === void 0 ? 'price' : _props$base,
      _props$labelFreeOver = props.labelFreeOver,
      labelFreeOver = _props$labelFreeOver === void 0 ? 'Free' : _props$labelFreeOver,
      p = _objectWithoutPropertiesLoose(props, ["format", "type", "base", "labelFreeOver"]);

  var _useContext = React.useContext(ShippingMethodChildrenContext),
      shippingMethod = _useContext.shippingMethod;

  var _useState = React.useState(''),
      price = _useState[0],
      setPrice = _useState[1];

  var _useState2 = React.useState(0),
      priceCent = _useState2[0],
      setPriceCent = _useState2[1];

  React.useEffect(function () {
    var p = getAmount(base, type, format, shippingMethod);
    setPrice(p);
    var c = getAmount(base, type, 'cents', shippingMethod);
    setPriceCent(c);
    return function () {
      setPrice('');
      setPriceCent(0);
    };
  }, [shippingMethod]);

  var parentProps = _extends({
    price: price
  }, p);

  return props.children ? /*#__PURE__*/React__default.createElement(Parent, parentProps, props.children) : /*#__PURE__*/React__default.createElement("span", p, priceCent === 0 ? labelFreeOver : price);
};

ShippingMethodPrice.propTypes = propTypes$_;
ShippingMethodPrice.displayName = displayName$S;

var initial$9 = {
  stockTransfer: {}
};
var StockTransferChildrenContext = /*#__PURE__*/React.createContext(initial$9);

var propTypes$$ = components.StockTransfer.propTypes;
var displayName$T = components.StockTransfer.displayName;

var StockTransfer = function StockTransfer(props) {
  var children = props.children;

  var _useContext = React.useContext(LineItemChildrenContext),
      lineItem = _useContext.lineItem;

  var _useContext2 = React.useContext(ShipmentChildrenContext),
      stockTransfers = _useContext2.stockTransfers;

  var components = stockTransfers == null ? void 0 : stockTransfers.filter(function (stock) {
    return stock.skuCode === lineItem.skuCode;
  }).map(function (stockTransfer, k) {
    var stockTransferProps = {
      stockTransfer: stockTransfer
    };
    return /*#__PURE__*/React__default.createElement(StockTransferChildrenContext.Provider, {
      key: k,
      value: stockTransferProps
    }, children);
  });
  return /*#__PURE__*/React__default.createElement(React.Fragment, null, components);
};

StockTransfer.propTypes = propTypes$$;
StockTransfer.displayName = displayName$T;

var propTypes$10 = components.StockTransferField.propTypes;
var displayName$U = components.StockTransferField.displayName;

var StockTransferField = function StockTransferField(props) {
  var type = props.type;

  var _useContext = React.useContext(StockTransferChildrenContext),
      stockTransfer = _useContext.stockTransfer;

  var text = stockTransfer ? stockTransfer[type] : '';

  var parentProps = _extends({}, props);

  return props.children ? /*#__PURE__*/React__default.createElement(Parent, parentProps, props.children) : /*#__PURE__*/React__default.createElement("p", props, text);
};

StockTransferField.propTypes = propTypes$10;
StockTransferField.displayName = displayName$U;

var propTypes$11 = components.DeliveryLeadTime.propTypes;
var displayName$V = components.DeliveryLeadTime.displayName;

var DeliveryLeadTime = function DeliveryLeadTime(props) {
  var type = props.type,
      p = _objectWithoutPropertiesLoose(props, ["type"]);

  var _useContext = React.useContext(ShippingMethodChildrenContext),
      deliveryLeadTimeForShipment = _useContext.deliveryLeadTimeForShipment;

  var text = deliveryLeadTimeForShipment && deliveryLeadTimeForShipment[type];

  var parentProps = _extends({
    text: text
  }, p);

  return props.children ? /*#__PURE__*/React__default.createElement(Parent, parentProps, props.children) : /*#__PURE__*/React__default.createElement("span", p, text);
};

DeliveryLeadTime.propTypes = propTypes$11;
DeliveryLeadTime.displayName = displayName$V;

exports.AddToCartButton = AddToCartButton;
exports.Address = Address;
exports.AddressCountrySelector = AddressCountrySelector;
exports.AddressField = AddressField;
exports.AddressInput = AddressInput;
exports.AddressesContainer = AddressesContainer;
exports.AvailabilityContainer = AvailabilityContainer;
exports.AvailabilityTemplate = AvailabilityTemplate;
exports.BillingAddressContainer = BillingAddressContainer;
exports.BillingAddressForm = BillingAddressForm;
exports.CheckoutLink = CheckoutLink;
exports.CommerceLayer = CommerceLayer;
exports.CustomerContainer = CustomerContainer;
exports.CustomerInput = CustomerInput;
exports.DeliveryLeadTime = DeliveryLeadTime;
exports.DiscountAmount = DiscountAmount;
exports.Errors = Errors;
exports.ExternalFunction = ExternalFunction;
exports.GiftCard = GiftCard;
exports.GiftCardAmount = GiftCardAmount;
exports.GiftCardContainer = GiftCardContainer;
exports.GiftCardCurrencySelector = GiftCardCurrencySelector;
exports.GiftCardInput = GiftCardInput;
exports.ItemContainer = ItemContainer;
exports.LineItem = LineItem;
exports.LineItemAmount = LineItemAmount;
exports.LineItemImage = LineItemImage;
exports.LineItemName = LineItemName;
exports.LineItemOption = LineItemOption;
exports.LineItemOptions = LineItemOptions;
exports.LineItemQuantity = LineItemQuantity;
exports.LineItemRemoveLink = LineItemRemoveLink;
exports.LineItemsContainer = LineItemsContainer;
exports.LineItemsCount = LineItemsCount;
exports.MetadataInput = MetadataInput;
exports.OrderContainer = OrderContainer;
exports.OrderStorage = OrderStorage;
exports.Price = Price;
exports.PricesContainer = PricesContainer;
exports.QuantitySelector = QuantitySelector;
exports.SaveAddressesButton = SaveAddressesButton;
exports.SaveCustomerButton = SaveCustomerButton;
exports.Shipment = Shipment;
exports.ShipmentsContainer = ShipmentsContainer;
exports.ShippingAddressContainer = ShippingAddressContainer;
exports.ShippingAddressForm = ShippingAddressForm;
exports.ShippingAmount = ShippingAmount;
exports.ShippingMethod = ShippingMethod;
exports.ShippingMethodName = ShippingMethodName;
exports.ShippingMethodPrice = ShippingMethodPrice;
exports.ShippingMethodRadioButton = ShippingMethodRadioButton;
exports.SkuList = SkuList;
exports.SkuListsContainer = SkuListsContainer;
exports.SkuOption = SkuOption;
exports.SkuOptionInput = SkuOptionInput;
exports.SkuOptionsContainer = SkuOptionsContainer;
exports.StockTransfer = StockTransfer;
exports.StockTransferField = StockTransferField;
exports.SubTotalAmount = SubTotalAmount;
exports.SubmitButton = SubmitButton;
exports.TaxesAmount = TaxesAmount;
exports.TotalAmount = TotalAmount;
exports.VariantSelector = VariantSelector;
exports.VariantsContainer = VariantsContainer;
//# sourceMappingURL=react-components.cjs.development.js.map
