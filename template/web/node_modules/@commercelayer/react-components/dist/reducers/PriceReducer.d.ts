import { BaseAction, LoaderType } from "../typings/index";
import { PriceCollection } from '@commercelayer/js-sdk';
import { CommerceLayerConfig } from "../context/CommerceLayerContext";
import { Dispatch } from 'react';
import { ItemPrices } from './ItemReducer';
import { BaseError } from "../typings/errors";
export declare type SkuPrices = PriceCollection[];
export interface Prices {
    [key: string]: SkuPrices;
}
declare type SkuCodesPrice = string[];
export interface SetSkuCodesPrice {
    (skuCodes: SkuCodesPrice): void;
}
export interface PriceState {
    loading: boolean;
    prices: Prices;
    skuCodes: SkuCodesPrice;
    errors?: BaseError[];
    skuCode?: string;
    setSkuCodes?: SetSkuCodesPrice;
    loader?: LoaderType;
}
export interface PriceAction extends BaseAction {
    type: PriceActionType;
}
export declare const priceInitialState: PriceState;
export interface GetSkusPrice {
    (skuCodes: SkuCodesPrice, options: {
        config: CommerceLayerConfig;
        dispatch: Dispatch<PriceAction>;
        setPrices: ((item: ItemPrices) => void) | undefined;
        prices: ItemPrices;
        perPage: number;
        filters: Record<string, any>;
    }): void;
}
export declare const getSkusPrice: GetSkusPrice;
export interface UnsetPriceState {
    (dispatch: Dispatch<PriceAction>): void;
}
export declare const unsetPriceState: UnsetPriceState;
export declare type PriceActionType = 'setLoading' | 'setPrices' | 'setSkuCodes' | 'setErrors';
declare const priceReducer: (state: PriceState, reducer: PriceAction) => PriceState;
export default priceReducer;
