import { CustomerCollection } from '@commercelayer/js-sdk';
import { BaseMetadata } from "../typings/index";
import { MarketCollection, GiftCardRecipientCollection } from '@commercelayer/js-sdk';
import { Dispatch } from 'react';
import { CommerceLayerConfig } from "../context/CommerceLayerContext";
import { BaseError } from "../typings/errors";
export declare type GiftCardActionType = 'setAvailability' | 'setGiftCardRecipient' | 'setGiftCardErrors' | 'setGiftCardLoading';
export interface GiftCardRecipientI {
    email: string;
    firstName?: string;
    lastName?: string;
    referenceOrigin?: string;
    reference?: string;
    metadata?: BaseMetadata;
    customer?: CustomerCollection;
}
export interface GiftCardI {
    currencyCode?: string;
    balanceCent?: number;
    balanceMaxCents?: number;
    singleUse?: boolean;
    rechargeable?: boolean;
    imageUrl?: string;
    expiresAt?: null | Date;
    firstName?: string;
    lastName?: string;
    email?: string;
    referenceOrigin?: string;
    recipientEmail?: string;
    reference?: string;
    metadata?: BaseMetadata;
    orderId?: string;
}
export interface GiftCardActionPayload extends GiftCardI {
    market?: MarketCollection;
    giftCardRecipient?: GiftCardRecipientCollection;
    errors?: BaseError[];
    loading?: boolean;
}
export interface GiftCardState extends GiftCardActionPayload {
    currencyCode: string;
    balanceCent: number;
    addGiftCardRecipient?: (values: GiftCardRecipientI & Record<string, any>) => void;
    addGiftCard?: (values: GiftCardI & Record<string, any>) => void;
    addGiftCardError?: (errors: BaseError[]) => void;
    addGiftCardLoading?: (loading: boolean) => void;
}
export interface GiftCardAction {
    type: GiftCardActionType;
    payload: GiftCardActionPayload;
}
export declare const giftCardInitialState: GiftCardState;
export interface AddGiftCardRecipient {
    <V extends GiftCardRecipientI>(values: V, config: CommerceLayerConfig, dispatch: Dispatch<GiftCardAction>): void;
}
export interface AddGiftCard {
    <V extends GiftCardI>(values: V, configParameters: {
        getOrder?: (id: string) => void;
        createOrder?: () => Promise<string>;
        config: CommerceLayerConfig;
        dispatch: Dispatch<GiftCardAction>;
    }): void;
}
export interface AddGiftCardError {
    <V extends BaseError[]>(errors: V, dispatch: Dispatch<GiftCardAction>): void;
}
export interface AddGiftCardLoading {
    <V extends boolean>(loading: V, dispatch: Dispatch<GiftCardAction>): void;
}
export declare const addGiftCardRecipient: AddGiftCardRecipient;
export declare const addGiftCardLoading: AddGiftCardLoading;
export declare const addGiftCard: AddGiftCard;
export declare const addGiftCardError: AddGiftCardError;
declare const giftCardReducer: (state: GiftCardState, reducer: GiftCardAction) => GiftCardState;
export default giftCardReducer;
