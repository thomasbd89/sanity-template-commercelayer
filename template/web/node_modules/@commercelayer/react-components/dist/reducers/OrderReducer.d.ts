import { OrderCollection } from '@commercelayer/js-sdk';
import { Dispatch } from 'react';
import { SetLocalOrder, DeleteLocalOrder } from "../utils/localStorage";
import { CommerceLayerConfig } from "../context/CommerceLayerContext";
import { ItemOption, CustomLineItem } from './ItemReducer';
import { BaseMetadataObject } from "../typings/index";
import { BaseError } from "../typings/errors";
export interface GetOrderParams {
    clearWhenPlaced?: boolean;
    config: CommerceLayerConfig;
    deleteLocalOrder?: DeleteLocalOrder;
    dispatch: Dispatch<OrderActions>;
    id: string;
    persistKey?: string;
}
export interface GetOrder {
    (params: GetOrderParams): void;
}
export interface SetOrderErrors {
    (params: {
        dispatch: Dispatch<OrderActions>;
        collection: any;
    }): {
        success: boolean;
    };
}
declare type CreateOrderParams = Pick<AddToCartParams, 'config' | 'dispatch' | 'persistKey' | 'state' | 'orderMetadata' | 'orderAttributes' | 'setLocalOrder'>;
export interface CreateOrder {
    (params: CreateOrderParams): Promise<string>;
}
export interface AddToCartParams {
    skuCode: string;
    persistKey: string;
    config: CommerceLayerConfig;
    dispatch: Dispatch<OrderActions>;
    state: Partial<OrderState>;
    skuId?: string;
    quantity?: number;
    option?: ItemOption;
    lineItem?: CustomLineItem;
    orderMetadata?: BaseMetadataObject;
    orderAttributes?: Record<string, any>;
    errors?: BaseError[];
    setLocalOrder?: SetLocalOrder;
}
export interface AddToCartImportParams extends Omit<AddToCartParams, 'skuCode' | 'skuId' | 'quantity' | 'option' | 'lineItem'> {
    lineItems: CustomLineItem[];
}
export declare type AddToCartReturn = Promise<{
    success: boolean;
}>;
export interface AddToCart {
    (params: AddToCartParams): AddToCartReturn;
}
export interface AddToCartImport {
    (params: AddToCartImportParams): AddToCartReturn;
}
export interface UnsetOrderState {
    (dispatch: Dispatch<OrderActions>): void;
}
export interface OrderPayload {
    loading?: boolean;
    orderId?: string;
    order?: OrderCollection;
    errors?: BaseError[];
}
export declare type AddToCartValues = {
    skuCode: string;
    skuId?: string;
    quantity?: number;
    option?: ItemOption;
    lineItem?: CustomLineItem;
};
export declare type AddToCartImportValues = Pick<AddToCartImportParams, 'lineItems'>;
export declare type getOrderContext = (id: string) => void;
export interface OrderState extends OrderPayload {
    loading: boolean;
    orderId: string;
    order: OrderCollection | undefined;
    saveBillingAddressToCustomerBook: boolean;
    saveShippingAddressToCustomerBook: boolean;
    getOrder?: getOrderContext;
    createOrder?: () => Promise<string>;
    addToCart: (values: AddToCartValues) => AddToCartReturn;
    setOrderErrors: (collection: any) => {
        success: boolean;
    };
    saveAddressToCustomerBook: (type: 'BillingAddress' | 'ShippingAddress', value: boolean) => void;
}
export interface OrderActions {
    type: OrderActionType;
    payload: OrderPayload;
}
export declare type OrderActionType = 'setLoading' | 'setOrderId' | 'setOrder' | 'setSingleQuantity' | 'setCurrentSkuCodes' | 'setCurrentSkuPrices' | 'setCurrentItem' | 'setErrors' | 'setSaveAddressToCustomerBook';
export declare const createOrder: CreateOrder;
export declare const getApiOrder: GetOrder;
export declare const addToCart: AddToCart;
export declare const unsetOrderState: UnsetOrderState;
export declare const setOrderErrors: SetOrderErrors;
declare type SaveAddressToCustomerBook = (params: {
    dispatch: Dispatch<OrderActions>;
    type: 'BillingAddress' | 'ShippingAddress';
    value: boolean;
}) => void;
export declare const saveAddressToCustomerBook: SaveAddressToCustomerBook;
export declare const orderInitialState: Partial<OrderState>;
declare const orderReducer: (state: Partial<OrderState>, reducer: OrderActions) => Partial<OrderState>;
export default orderReducer;
