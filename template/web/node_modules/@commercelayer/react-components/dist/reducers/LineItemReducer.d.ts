import { LineItemCollection, OrderCollection } from '@commercelayer/js-sdk';
import { Dispatch } from 'react';
import { CommerceLayerConfig } from "../context/CommerceLayerContext";
import { getOrderContext } from './OrderReducer';
import { LoaderType } from "../typings/index";
import { BaseError } from "../typings/errors";
export declare type UpdateLineItemParams = {
    lineItemId: string;
    quantity?: number;
    dispatch: Dispatch<LineItemAction>;
    config: CommerceLayerConfig;
    getOrder: getOrderContext | undefined;
    orderId: string;
    errors: BaseError[] | undefined;
};
export interface UpdateLineItem {
    (params: UpdateLineItemParams): void;
}
export declare type DeleteLineItemParam = Record<string, any> & UpdateLineItemParams;
export interface DeleteLineItem {
    (params: DeleteLineItemParam): void;
}
export declare type GetLineItemsParams = {
    dispatch: Dispatch<LineItemAction>;
    config: CommerceLayerConfig;
    order: OrderCollection | null;
    filters: Record<string, any>;
};
export interface GetLineItems {
    (params: GetLineItemsParams): void;
}
export interface LineItemPayload {
    loading?: boolean;
    loader?: LoaderType;
    lineItems?: LineItemCollection[];
    errors?: BaseError[];
}
export interface LineItemState extends LineItemPayload {
    updateLineItem?: (lineItemId: string, quantity?: number) => void;
    deleteLineItem?: (lineItemId: string) => void;
}
export interface LineItemAction {
    type: LineItemActionType;
    payload: LineItemPayload;
}
export declare const getLineItems: GetLineItems;
export declare const updateLineItem: UpdateLineItem;
export declare const deleteLineItem: DeleteLineItem;
export declare const lineItemInitialState: LineItemState;
export declare type LineItemActionType = 'setLineItems' | 'setErrors' | 'setLoading';
declare const lineItemReducer: (state: LineItemState, reducer: LineItemAction) => LineItemState;
export default lineItemReducer;
