import { Dispatch } from 'react';
import { BaseError } from "../typings/errors";
import { AddressCollection, OrderCollection } from '@commercelayer/js-sdk';
import { CommerceLayerConfig } from "../context/CommerceLayerContext";
import { getOrderContext } from './OrderReducer';
export declare type CustomerActionType = 'setErrors' | 'setCustomerEmail' | 'setAddresses';
export interface CustomerActionPayload {
    addresses: AddressCollection[];
    customerEmail: string;
    errors: BaseError[];
}
export declare type CustomerState = Partial<CustomerActionPayload>;
export interface CustomerAction {
    type: CustomerActionType;
    payload: Partial<CustomerActionPayload>;
}
export declare type SetSaveOnBlur = (args: {
    saveOnBlur: boolean;
    dispatch: Dispatch<CustomerAction>;
}) => void;
export declare type SaveCustomerUser = (args: {
    config: CommerceLayerConfig;
    customerEmail: string;
    dispatch: Dispatch<CustomerAction>;
    order?: OrderCollection;
    getOrder: getOrderContext;
}) => Promise<void>;
export declare const saveCustomerUser: SaveCustomerUser;
export interface SetCustomerErrors {
    <V extends BaseError[]>(errors: V, dispatch?: Dispatch<CustomerAction>): void;
}
export declare const setCustomerErrors: SetCustomerErrors;
export declare type SetCustomerEmail = (customerEmail: string, dispatch?: Dispatch<CustomerAction>) => void;
export declare const setCustomerEmail: SetCustomerEmail;
export declare type GetCustomerAddresses = (params: {
    config: CommerceLayerConfig;
    dispatch: Dispatch<CustomerAction>;
}) => Promise<void>;
export declare const getCustomerAddresses: GetCustomerAddresses;
export declare const customerInitialState: CustomerState;
declare const customerReducer: (state: CustomerState, reducer: CustomerAction) => CustomerState;
export default customerReducer;
