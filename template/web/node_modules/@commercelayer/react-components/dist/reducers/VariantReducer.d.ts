import { SkuCollection } from '@commercelayer/js-sdk';
import { VariantOptions } from "../components/VariantSelector";
import { Dispatch } from 'react';
import { CommerceLayerConfig } from "../context/CommerceLayerContext";
import { Items, CustomLineItem, SetCustomLineItems } from './ItemReducer';
import { BaseError } from "../typings/errors";
declare type SetSkuCodeVariantParams = {
    code: string;
    id: string;
    config: CommerceLayerConfig;
    dispatch: Dispatch<VariantAction>;
    setItem: ((item: Items) => void) | undefined;
};
export interface SetSkuCodeVariant {
    (params: SetSkuCodeVariantParams): void;
}
declare type SetVariantSkuCodesParams = {
    skuCodes: VariantOptions[];
    dispatch: Dispatch<VariantAction>;
    setCustomLineItems?: SetCustomLineItems;
};
export interface SetVariantSkuCodes {
    (params: SetVariantSkuCodesParams): void;
}
export interface VariantsObject {
    [key: string]: SkuCollection;
}
export declare type SetSkuCode = (code: string, id: string, lineItem?: CustomLineItem) => void;
export interface VariantPayload {
    loading?: boolean;
    variants?: VariantsObject | Record<string, any>;
    skuCodes?: string[];
    skuCode?: string;
    errors?: BaseError[];
    currentSkuId?: string;
    currentSkuInventory?: any;
    currentQuantity?: number;
    currentPrices?: SkuCollection[];
    setSkuCode?: SetSkuCode;
    setSkuCodes?: (skuCodes: VariantOptions[]) => void;
}
export interface VariantState extends VariantPayload {
    skuCodes: string[];
    variants: VariantsObject | Record<string, any>;
}
export interface VariantAction {
    type: VariantActionType;
    payload: VariantPayload;
}
export declare const setVariantSkuCodes: SetVariantSkuCodes;
export interface UnsetVariantState {
    (dispatch: Dispatch<VariantAction>): void;
}
export declare const setSkuCode: SetSkuCodeVariant;
declare type GetVariantsParams = {
    config: CommerceLayerConfig;
    state: VariantState;
    skuCode: string;
    dispatch: Dispatch<VariantAction>;
    filters: Record<string, any>;
    setItem: ((item: Items) => void) | undefined;
};
export interface GetVariants {
    (params: GetVariantsParams): void;
}
export declare const getVariants: GetVariants;
export declare const unsetVariantState: UnsetVariantState;
export declare const variantInitialState: VariantState;
export declare type VariantActionType = 'setLoading' | 'setVariants' | 'setSkuCodes' | 'setSkuCode' | 'setCurrentSkuId' | 'setCurrentSkuInventory' | 'setCurrentPrices' | 'setErrors';
declare const variantReducer: (state: VariantState, reducer: VariantAction) => VariantState;
export default variantReducer;
