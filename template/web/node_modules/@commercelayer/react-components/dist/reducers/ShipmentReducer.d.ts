import { Dispatch } from 'react';
import { BaseError } from "../typings/errors";
import { OrderCollection, ShipmentCollection } from '@commercelayer/js-sdk';
import { CommerceLayerConfig } from "../context/CommerceLayerContext";
import { getOrderContext } from './OrderReducer';
export declare type ShipmentActionType = 'setErrors' | 'setShipments' | 'setShippingMethod';
export interface ShipmentActionPayload {
    errors: BaseError[];
    shipments: ShipmentCollection[];
}
export declare type ShipmentState = Partial<ShipmentActionPayload>;
export interface ShipmentAction {
    type: ShipmentActionType;
    payload: Partial<ShipmentActionPayload>;
}
export declare const shipmentInitialState: ShipmentState;
export interface SetShipmentErrors {
    <V extends BaseError[]>(errors: V, dispatch?: Dispatch<ShipmentAction>): void;
}
export declare const setShipmentErrors: SetShipmentErrors;
declare type GetShipments = (args: {
    order: OrderCollection;
    dispatch: Dispatch<ShipmentAction>;
    config: CommerceLayerConfig;
}) => Promise<void>;
export declare const getShipments: GetShipments;
declare type SetShippingMethod = (args: {
    config: CommerceLayerConfig;
    shipmentId: string;
    shippingMethodId: string;
    order?: OrderCollection;
    getOrder?: getOrderContext;
}) => Promise<void>;
export declare const setShippingMethod: SetShippingMethod;
declare const shipmentReducer: (state: ShipmentState, reducer: ShipmentAction) => ShipmentState;
export default shipmentReducer;
