import { FunctionComponent, ReactNode } from 'react';
import PropTypes from 'prop-types';
import { BaseSelectorType } from "../../typings/index";
import { VariantsObject, SetSkuCode } from "../../reducers/VariantReducer";
import { VariantOptions } from "../VariantSelector";
export declare const propTypes: {
    variants: PropTypes.Validator<any>;
    onChange: PropTypes.Requireable<(...args: any[]) => any>;
    options: PropTypes.Validator<PropTypes.InferProps<{
        label: PropTypes.Validator<string>;
        code: PropTypes.Validator<string>;
        lineItem: PropTypes.Requireable<PropTypes.InferProps<{
            name: PropTypes.Validator<string>;
            imageUrl: PropTypes.Requireable<string>;
        }>>;
    }>[]>;
    name: PropTypes.Requireable<string>;
    children: PropTypes.Requireable<(...args: any[]) => any>;
    type: PropTypes.Requireable<BaseSelectorType>;
    loader: PropTypes.Requireable<PropTypes.ReactElementLike>;
    placeholder: PropTypes.Requireable<string>;
    skuCode: PropTypes.Requireable<string>;
};
export declare type VariantTemplateProps = {
    variants: VariantsObject | Record<string, any>;
    handleChange?: SetSkuCode;
    options: VariantOptions[];
    type?: BaseSelectorType;
    loader?: ReactNode;
    placeholder?: string;
    skuCode?: string;
} & JSX.IntrinsicElements['input'] & JSX.IntrinsicElements['select'];
declare const VariantTemplate: FunctionComponent<VariantTemplateProps>;
export default VariantTemplate;
