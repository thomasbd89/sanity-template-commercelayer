import { useCallback, useReducer } from 'react';
import _ from 'lodash-es';

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

// TODO: refactor in one way
var fetchReducer = function fetchReducer(state, action) {
  if (action.type === 'change') {
    var _state$errors;

    if (action.name && (_state$errors = state.errors) != null && _state$errors.hasOwnProperty(action.name)) {
      delete state.errors[action.name];
    }

    state = _extends({}, state, {
      data: _extends({}, state.data, action.data),
      errors: _extends({}, state.errors, action.errors)
    });
  }

  if (action.type === 'setRef') {
    state = _extends({}, state, {
      refs: _extends({}, state.refs, action.data)
    });
  }

  if (action.type === 'error') {
    state = _extends({}, state, {
      data: _extends({}, state.data, action.data),
      errors: _extends({}, state.errors, action.errors)
    });
  }

  if (action.type === 'reset') {
    state = _extends({}, state, {
      data: {},
      errors: {}
    });
  }

  return state;
};

var DEFAULT_PATTERN = /\w+/;
var EMAIL_PATTERN = /[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,3}$/;
var PW_PATTERN = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d).{6,}$/;

var isEmpty = function isEmpty(_ref) {
  var value = _ref.value,
      type = _ref.type,
      checked = _ref.checked;

  if (type === ('checkbox' )) {
    return !checked;
  }

  if (Array.isArray(value)) {
    var _value$find;

    value = (_value$find = value.find(function (v) {
      return v !== '';
    })) == null ? void 0 : _value$find.length;
  }

  return !value;
};

var isValidPattern = function isValidPattern(val, type, pattern) {
  var obj = {
    error: false,
    message: ''
  };
  var objError = {
    error: true,
    message: "please enter a valid format",
    code: 'VALIDATION_ERROR'
  };

  if (type === 'email' && !val.match(pattern || EMAIL_PATTERN)) {
    obj = _extends({}, obj, objError);
  }

  if (type === 'password' && !val.match(pattern || PW_PATTERN)) {
    obj = _extends({}, obj, objError);
  }

  if (type === 'text' && !val.match(pattern || DEFAULT_PATTERN)) {
    obj = _extends({}, obj, objError);
  }

  return obj;
};

var validateValue = function validateValue(data) {
  if (!data.required) {
    return {
      error: false,
      message: ''
    };
  }

  if (isEmpty(data)) {
    return {
      error: true,
      message: data.name + " is required",
      code: 'EMPTY_ERROR'
    };
  }

  return isValidPattern(data.value, data.type, data.pattern);
};

var setErrors = function setErrors(data, dispatch) {
  var _data3, _data4;

  var _validateValue = validateValue(data),
      error = _validateValue.error,
      message = _validateValue.message,
      code = _validateValue.code;

  if (error) {
    var _data, _errors, _data2, _errors2;

    dispatch({
      type: 'error',
      name: data.name,
      data: (_data = {}, _data[data.name] = _extends({}, data), _data),
      errors: (_errors = {}, _errors[data.name] = {
        error: error,
        message: message,
        code: code
      }, _errors)
    });
    return {
      data: (_data2 = {}, _data2[data.name] = _extends({}, data), _data2),
      errors: (_errors2 = {}, _errors2[data.name] = {
        message: message,
        code: code
      }, _errors2)
    };
  }

  dispatch({
    type: 'change',
    name: data.name,
    data: (_data3 = {}, _data3[data.name] = _extends({}, data), _data3)
  });
  return {
    data: (_data4 = {}, _data4[data.name] = _extends({}, data), _data4)
  };
};

var multiSelectValues = function multiSelectValues(options) {
  var v = Array.from(options).filter(function (o) {
    return o.selected;
  }).map(function (o) {
    return o.value;
  });
  return v.join(',');
};

var handleChange = function handleChange(e, dispatch) {
  var _data;

  var element = e != null && e.currentTarget ? e.currentTarget : e;
  var m = element.multiple;
  var v = m ? multiSelectValues(element == null ? void 0 : element.options) : element.value;
  var n = element.name;
  var t = element.type;
  var r = element.required;
  var c = element == null ? void 0 : element.checked;
  var p = element == null ? void 0 : element.pattern;
  var data = (_data = {}, _data[n] = {
    checked: c,
    name: n,
    pattern: p,
    required: r,
    type: t,
    value: v
  }, _data);
  return setErrors(data[n], dispatch);
};

var useValidation = function useValidation(dispatch) {
  return useCallback(function (ref) {
    if (ref) {
      var _data;

      var name = ref.name,
          value = ref.value;
      dispatch({
        type: 'setRef',
        data: (_data = {}, _data[name] = ref, _data)
      });

      if (value) {
        handleChange(ref, dispatch);
      }

      ref.oninput = function (e) {
        return handleChange(e, dispatch);
      };
    }
  }, [dispatch]);
};

var resetAll = function resetAll(dispatch) {
  dispatch({
    type: 'reset'
  });
};

var useSubmitValidation = function useSubmitValidation(dispatch) {
  return useCallback(function (ref) {
    if (ref) {
      ref.onsubmit = function (e) {
        _.map(e.currentTarget.elements, function (e) {
          var _e$currentTarget;

          if ((_e$currentTarget = e.currentTarget) != null && _e$currentTarget.name) {
            handleChange(e, dispatch);
          }
        });
      };
    }
  }, [dispatch]);
};

var useRapidForm = function useRapidForm() {
  var _useReducer = useReducer(fetchReducer, {
    data: {},
    errors: {},
    refs: {}
  }),
      state = _useReducer[0],
      dispatch = _useReducer[1];

  var ValidationHook = useValidation(dispatch);
  var SubmitValidation = useSubmitValidation(dispatch);

  var reset = function reset(e) {
    if (e.currentTarget) {
      e.currentTarget.reset();
    } else if (_.has(e.target, 'reset')) {
      // @ts-ignore
      e.target.reset();
    }

    resetAll(dispatch);
  };

  return {
    handleSubmit: function handleSubmit(c) {
      return function (e) {
        var tempState = {
          data: {},
          errors: {}
        };
        e.preventDefault();

        _.map(e.currentTarget.elements, function (e) {
          if (e.name) {
            var st = handleChange(e, dispatch);
            tempState = {
              data: _extends({}, tempState.data, st.data),
              errors: _extends({}, tempState.errors, st.errors)
            };
          }
        });

        var newState = {
          data: _.isEmpty(state.data) ? tempState.data : state.data,
          errors: _.isEmpty(state.errors) ? tempState.errors : state.errors
        };
        return c(newState.data, newState.errors, e);
      };
    },
    errors: state.errors,
    validation: ValidationHook,
    submitValidation: SubmitValidation,
    reset: reset,
    values: state.data,
    setValue: function setValue(name, value) {
      var field = state.refs[name];

      if (field) {
        field.value = value;
        setErrors({
          checked: field.checked,
          name: name,
          pattern: field.pattern,
          required: field.required,
          type: field.type,
          value: value
        }, dispatch);
      }
    },
    setError: function setError(error) {
      var _errors;

      var name = error.name,
          e = _objectWithoutPropertiesLoose(error, ["name"]);

      dispatch({
        type: 'error',
        name: name,
        errors: (_errors = {}, _errors[name] = _extends({}, e, {
          error: true
        }), _errors)
      });
    }
  };
};

export default useRapidForm;
//# sourceMappingURL=rapid-form.esm.js.map
