import { SyntheticEvent } from 'react';
import { ResetFunc } from '../utils/reset';
import { GenericError } from '../utils/validateValue';
export interface GeneralObject {
    [key: string]: string | string[] | Record<string, any>;
}
export interface ErrorsObj {
    [key: string]: GenericError;
}
export interface SubmitCallback<E = SyntheticEvent<HTMLFormElement>> {
    (data: Record<string, any>, errors: ErrorsObj, event: E): void;
}
export interface HandleSubmit<C> {
    (callback: C): (event: SyntheticEvent<HTMLFormElement>) => void;
}
export interface ReturnParams {
    handleSubmit: HandleSubmit<SubmitCallback>;
    errors: ErrorsObj;
    validation: any;
    submitValidation: any;
    reset: ResetFunc;
    values: Record<string, any>;
    setValue: (name: string, value: string) => void;
    setError: (error: Pick<GenericError, 'code' | 'message'> & {
        name: string;
    }) => void;
}
export interface UseRapidForm {
    (): ReturnParams;
}
declare const useRapidForm: UseRapidForm;
export default useRapidForm;
