{"version":3,"file":"rapid-form.cjs.production.min.js","sources":["../src/utils/fetchReducer.ts","../src/utils/validateValue.ts","../src/utils/setErrors.ts","../src/utils/handleChange.ts","../src/utils/multiSelect.ts","../src/hooks/useRapidForm.ts","../src/hooks/useValidation.ts","../src/hooks/useSubmitValidation .ts","../src/utils/reset.ts"],"sourcesContent":["import { Reducer } from 'react'\nimport { ErrorsObj } from '../hooks/useRapidForm'\n\nexport interface State {\n  data: Record<string, any>\n  errors: ErrorsObj\n  refs: Record<string, any>\n  name?: string\n}\n\nexport interface Action {\n  type: 'change' | 'error' | 'reset' | 'setRef'\n  data?: Record<string, any>\n  errors?: ErrorsObj\n  name?: string | number\n}\n\n// TODO: refactor in one way\nconst fetchReducer: Reducer<State, Action> = (state, action) => {\n  if (action.type === 'change') {\n    if (action.name && state.errors?.hasOwnProperty(action.name)) {\n      delete state.errors[action.name]\n    }\n    state = {\n      ...state,\n      data: {\n        ...state.data,\n        ...action.data,\n      },\n      errors: {\n        ...state.errors,\n        ...action.errors,\n      },\n    }\n  }\n  if (action.type === 'setRef') {\n    state = {\n      ...state,\n      refs: {\n        ...state.refs,\n        ...action.data,\n      },\n    }\n  }\n  if (action.type === 'error') {\n    state = {\n      ...state,\n      data: {\n        ...state.data,\n        ...action.data,\n      },\n      errors: {\n        ...state.errors,\n        ...action.errors,\n      },\n    }\n  }\n  if (action.type === 'reset') {\n    state = {\n      ...state,\n      data: {},\n      errors: {},\n    }\n  }\n  return state\n}\n\nexport default fetchReducer\n","const DEFAULT_PATTERN = /\\w+/\nconst EMAIL_PATTERN = /[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,3}$/\nconst PW_PATTERN = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d).{6,}$/\n// const PW_PATTERN = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[#$^+=!*()@%&]).{10,}$/\n// NOTE: At least one lower case English letter, (?=.*?[a-z])\n// NOTE: At least one upper case English letter, (?=.*?[A-Z])\n// NOTE: At least one digit, (?=.*\\d)\n// NOTE: At least one special character, (?=.*?[#?!@$%^&*-]) (Removed)\n// NOTE: Minimum ten in length .{6,} (with the anchors)\n\nexport type GenericValue =\n  | string\n  | string[]\n  | number\n  | undefined\n  | Record<string, any>\n\nexport interface GenericItem {\n  value: GenericValue\n  type: string\n  checked?: boolean\n}\n\nexport interface GenericItemAttribute extends GenericItem {\n  name: string\n  required: boolean\n  value: string\n  pattern?: GenericPattern\n}\n\nexport interface IsEmpty {\n  (object: GenericItem): boolean\n}\n\nexport type GenericError = {\n  error: boolean\n  message: string\n  code?: 'EMPTY_ERROR' | 'VALIDATION_ERROR'\n}\n\nexport type GenericPattern = RegExp | string\n\nexport interface IsValidPattern {\n  (value: string, type: string, pattern?: GenericPattern): GenericError\n}\n\nexport interface ValidateValue {\n  (data: GenericItemAttribute): GenericError\n}\n\nconst isEmpty: IsEmpty = ({ value, type, checked }) => {\n  if (type === ('checkbox' || 'radio')) {\n    return !checked\n  }\n  if (Array.isArray(value)) {\n    value = value.find((v) => v !== '')?.length\n  }\n  return !value\n}\n\nconst isValidPattern: IsValidPattern = (val, type, pattern) => {\n  let obj = {\n    error: false,\n    message: '',\n  }\n  const objError: GenericError = {\n    error: true,\n    message: `please enter a valid format`,\n    code: 'VALIDATION_ERROR',\n  }\n  if (type === 'email' && !val.match(pattern || EMAIL_PATTERN)) {\n    obj = { ...obj, ...objError }\n  }\n  if (type === 'password' && !val.match(pattern || PW_PATTERN)) {\n    obj = { ...obj, ...objError }\n  }\n  if (type === 'text' && !val.match(pattern || DEFAULT_PATTERN)) {\n    obj = { ...obj, ...objError }\n  }\n  return obj\n}\n\nconst validateValue: ValidateValue = (data) => {\n  if (!data.required) {\n    return {\n      error: false,\n      message: '',\n    }\n  }\n  if (isEmpty(data)) {\n    return {\n      error: true,\n      message: `${data.name} is required`,\n      code: 'EMPTY_ERROR',\n    }\n  }\n  return isValidPattern(data.value, data.type, data.pattern)\n}\n\nexport default validateValue\n","import validateValue from './validateValue'\nimport { Dispatch } from 'react'\nimport { Action } from './fetchReducer'\nimport { GenericItemAttribute } from './validateValue'\n\nexport interface SetErrors {\n  (data: GenericItemAttribute, dispatch: Dispatch<Action>): void\n}\n\nconst setErrors: SetErrors = (data, dispatch) => {\n  const { error, message, code } = validateValue(data)\n  if (error) {\n    dispatch({\n      type: 'error',\n      name: data.name,\n      data: {\n        [data.name]: {\n          ...data\n        }\n      },\n      errors: {\n        [data.name]: {\n          error,\n          message,\n          code\n        }\n      }\n    })\n    return {\n      data: {\n        [data.name]: {\n          ...data\n        }\n      },\n      errors: {\n        [data.name]: {\n          message,\n          code\n        }\n      }\n    }\n  }\n  dispatch({\n    type: 'change',\n    name: data.name,\n    data: {\n      [data.name]: {\n        ...data\n      }\n    }\n  })\n  return {\n    data: {\n      [data.name]: {\n        ...data\n      }\n    }\n  }\n}\n\nexport default setErrors\n","import setErrors from './setErrors'\nimport multiSelectValues from './multiSelect'\nimport { Dispatch } from 'react'\nimport { Action, State } from './fetchReducer'\nimport { GenericItemAttribute } from './validateValue'\n\nexport interface GenericEventTarget {\n  currentTarget?: {\n    multiple?: boolean\n    options: HTMLOptionsCollection\n    dataset?: {\n      typevalue?: 'array' | 'string'\n    }\n    name: string\n    value: string\n    type: string\n    required: boolean\n    checked?: boolean\n    pattern?: string\n  }\n}\n\nexport interface GenericElement extends GenericEventTarget {\n  multiple?: boolean\n  options: HTMLOptionsCollection\n  dataset?: {\n    typevalue?: 'array' | 'string'\n  }\n  name: string\n  value: string\n  type: string\n  required: boolean\n  checked?: boolean\n  pattern?: string\n}\n\nexport interface FormData {\n  [key: string]: GenericItemAttribute\n}\n\nexport interface HandleChange {\n  (event: GenericElement, dispatch: Dispatch<Action>): void | State\n}\n\nconst handleChange: HandleChange = (e, dispatch) => {\n  const element = e?.currentTarget ? e.currentTarget : e\n  const m = element.multiple\n  const v = m ? multiSelectValues(element?.options) : element.value\n  const n = element.name\n  const t = element.type\n  const r = element.required\n  const c = element?.checked\n  const p = element?.pattern\n  const data = {\n    [n]: {\n      checked: c,\n      name: n,\n      pattern: p,\n      required: r,\n      type: t,\n      value: v,\n    },\n  }\n  return setErrors(data[n], dispatch)\n}\n\nexport default handleChange\n","export interface MultiSelectValues {\n  (options: HTMLOptionsCollection): string\n}\n\nconst multiSelectValues: MultiSelectValues = options => {\n  const v = Array.from(options)\n    .filter(o => o.selected)\n    .map(o => o.value)\n  return v.join(',')\n}\n\nexport default multiSelectValues\n","import { useReducer, SyntheticEvent } from 'react'\nimport fetchReducer from '../utils/fetchReducer'\nimport useValidation from './useValidation'\nimport resetAll from '../utils/reset'\nimport { ResetFunc } from '../utils/reset'\nimport useSubmitValidation from './useSubmitValidation '\nimport _ from 'lodash'\nimport handleChange, { GenericElement } from '../utils/handleChange'\nimport { State } from '../utils/fetchReducer'\nimport { GenericError } from '../utils/validateValue'\nimport setErrors from '../utils/setErrors'\n\nexport interface GeneralObject {\n  [key: string]: string | string[] | Record<string, any>\n}\n\nexport interface ErrorsObj {\n  [key: string]: GenericError\n}\n\nexport interface SubmitCallback<E = SyntheticEvent<HTMLFormElement>> {\n  (data: Record<string, any>, errors: ErrorsObj, event: E): void\n}\n\nexport interface HandleSubmit<C> {\n  (callback: C): (event: SyntheticEvent<HTMLFormElement>) => void\n}\n\nexport interface ReturnParams {\n  handleSubmit: HandleSubmit<SubmitCallback>\n  errors: ErrorsObj\n  validation: any\n  submitValidation: any\n  reset: ResetFunc\n  values: Record<string, any>\n  setValue: (name: string, value: string) => void\n  setError: (\n    error: Pick<GenericError, 'code' | 'message'> & { name: string }\n  ) => void\n}\n\nexport interface UseRapidForm {\n  (): ReturnParams\n}\n\nconst useRapidForm: UseRapidForm = () => {\n  const [state, dispatch] = useReducer(fetchReducer, {\n    data: {},\n    errors: {},\n    refs: {},\n  })\n  const ValidationHook = useValidation(dispatch)\n  const SubmitValidation = useSubmitValidation(dispatch)\n  const reset: ResetFunc = (e) => {\n    if (e.currentTarget) {\n      e.currentTarget.reset()\n    } else if (_.has(e.target, 'reset')) {\n      // @ts-ignore\n      e.target.reset()\n    }\n    resetAll(dispatch)\n  }\n  return {\n    handleSubmit: (c) => (e): void => {\n      let tempState = {\n        data: {},\n        errors: {},\n      }\n      e.preventDefault()\n      _.map(e.currentTarget.elements, (e: GenericElement) => {\n        if (e.name) {\n          const st = handleChange(e, dispatch) as State\n          tempState = {\n            data: { ...tempState.data, ...st.data },\n            errors: { ...tempState.errors, ...st.errors },\n          }\n        }\n      })\n      const newState = {\n        data: _.isEmpty(state.data) ? tempState.data : state.data,\n        errors: _.isEmpty(state.errors) ? tempState.errors : state.errors,\n      }\n      return c(newState.data, newState.errors, e)\n    },\n    errors: state.errors,\n    validation: ValidationHook,\n    submitValidation: SubmitValidation,\n    reset,\n    values: state.data,\n    setValue: (name: string, value: string) => {\n      const field = state.refs[name]\n      if (field) {\n        field.value = value\n        setErrors(\n          {\n            checked: field.checked,\n            name,\n            pattern: field.pattern,\n            required: field.required,\n            type: field.type,\n            value,\n          },\n          dispatch\n        )\n      }\n    },\n    setError: (error) => {\n      const { name, ...e } = error\n      dispatch({\n        type: 'error',\n        name,\n        errors: {\n          [name]: {\n            ...e,\n            error: true,\n          },\n        },\n      })\n    },\n  }\n}\n\nexport default useRapidForm\n","import { useCallback, Dispatch } from 'react'\nimport handleChange, { GenericElement } from '../utils/handleChange'\nimport { Action } from '../utils/fetchReducer'\n\nexport interface UseValidationInterface {\n  (dispatch: Dispatch<Action>): void\n}\n\nconst useValidation: UseValidationInterface = (dispatch) => {\n  return useCallback(\n    (ref): void => {\n      if (ref) {\n        const { name, value } = ref\n        dispatch({\n          type: 'setRef',\n          data: {\n            [name]: ref,\n          },\n        })\n        if (value) {\n          handleChange(ref, dispatch)\n        }\n        ref.oninput = (e: GenericElement): any => handleChange(e, dispatch)\n      }\n    },\n    [dispatch]\n  )\n}\n\nexport default useValidation\n","import { Dispatch, useCallback } from 'react'\nimport { Action } from '../utils/fetchReducer'\nimport _ from 'lodash'\nimport handleChange, { GenericElement } from '../utils/handleChange'\n\nexport interface SubmitValidation {\n  (dispatch: Dispatch<Action>): void\n}\n\nconst useSubmitValidation: SubmitValidation = dispatch => {\n  return useCallback(\n    (ref): void => {\n      if (ref) {\n        ref.onsubmit = (e: HTMLFormElement): void => {\n          _.map(e.currentTarget.elements, (e: GenericElement) => {\n            if (e.currentTarget?.name) {\n              handleChange(e, dispatch)\n            }\n          })\n        }\n      }\n    },\n    [dispatch]\n  )\n}\n\nexport default useSubmitValidation\n","import { SyntheticEvent, Dispatch } from 'react'\nimport { Action } from './fetchReducer'\n\nexport interface ResetFunc {\n  (event: SyntheticEvent<HTMLFormElement>): void\n}\n\nexport interface ResetAll {\n  (dispacth: Dispatch<Action>): void\n}\n\nconst resetAll: ResetAll = dispatch => {\n  dispatch({\n    type: 'reset'\n  })\n}\n\nexport default resetAll\n"],"names":["fetchReducer","state","action","type","name","errors","_state$errors","hasOwnProperty","data","refs","DEFAULT_PATTERN","EMAIL_PATTERN","PW_PATTERN","setErrors","dispatch","required","value","checked","Array","isArray","find","v","_value$find","length","val","pattern","obj","error","message","objError","code","match","validateValue","handleChange","e","element","currentTarget","multiple","from","options","filter","o","selected","map","join","n","useReducer","ValidationHook","useCallback","ref","oninput","useValidation","SubmitValidation","onsubmit","_","elements","_e$currentTarget","useSubmitValidation","handleSubmit","c","tempState","preventDefault","st","newState","isEmpty","validation","submitValidation","reset","has","target","resetAll","values","setValue","field","setError"],"mappings":"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"}