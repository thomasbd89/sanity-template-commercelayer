export declare type GenericValue = string | string[] | number | undefined | Record<string, any>;
export interface GenericItem {
    value: GenericValue;
    type: string;
    checked?: boolean;
}
export interface GenericItemAttribute extends GenericItem {
    name: string;
    required: boolean;
    value: string;
    pattern?: GenericPattern;
}
export interface IsEmpty {
    (object: GenericItem): boolean;
}
export declare type GenericError = {
    error: boolean;
    message: string;
    code?: 'EMPTY_ERROR' | 'VALIDATION_ERROR';
};
export declare type GenericPattern = RegExp | string;
export interface IsValidPattern {
    (value: string, type: string, pattern?: GenericPattern): GenericError;
}
export interface ValidateValue {
    (data: GenericItemAttribute): GenericError;
}
declare const validateValue: ValidateValue;
export default validateValue;
