{"ast":null,"code":"import axios from 'axios';\nimport _ from 'lodash';\nimport { parseLocale } from '../parser';\n\nconst fetchDatoAPI = async (query, url = '') => {\n  const {\n    DATO_API_TOKEN\n  } = process.env;\n  const client = axios.create({\n    baseURL: 'https://graphql.datocms.com/',\n    timeout: 1000,\n    headers: {\n      Authorization: `Bearer ${DATO_API_TOKEN}`,\n      'Content-Type': 'application/json'\n    }\n  });\n  const params = JSON.stringify({\n    query\n  });\n  return await client.post(url, params);\n};\n\nexport const datoAllCountries = async (locale = 'en-US') => {\n  const lang = parseLocale(locale, '_', '-');\n  const query = `{\n    allCountries(locale: ${lang}) {\n      code\n      id\n      image {\n        url\n      }\n      marketid\n      name\n      domain\n      defaultlocale\n      catalog {\n        id\n      }\n    }\n  }`;\n\n  try {\n    const {\n      data: {\n        data\n      }\n    } = await fetchDatoAPI(query);\n    return data.allCountries.map(country => {\n      country['marketId'] = country['marketid'];\n      country['defaultLocale'] = country['defaultlocale'];\n      delete country['marketid'];\n      delete country['defaultlocale'];\n      return country;\n    });\n  } catch (error) {\n    console.error(error);\n    return null;\n  }\n};\nexport const datoAllTaxonomies = async (catalogId, locale = 'en-US') => {\n  const lang = parseLocale(locale, '_', '-');\n  const query = `{\n    allCatalogs(locale: ${lang}, filter: {id: {eq: \"${catalogId}\"}}) {\n      id\n      name\n      taxonomies {\n        name\n        label\n        taxons {\n          id\n          name\n          label\n          products {\n            id\n            images {\n              url\n            }\n            name\n            reference\n            slug\n            variants {\n              code\n            }\n          }\n        }\n      }\n    }\n  }`;\n\n  try {\n    const {\n      data: {\n        data\n      }\n    } = await fetchDatoAPI(query);\n\n    const catalog = _.first(data.allCatalogs);\n\n    return catalog === null || catalog === void 0 ? void 0 : catalog.taxonomies;\n  } catch (error) {\n    console.error(error);\n    return null;\n  }\n};\nexport const datoGetProduct = async (slug, locale = 'en-US') => {\n  const lang = parseLocale(locale, '_', '-');\n  const query = `{\n    product(filter: {slug: {eq: \"${slug}\"}}, locale: ${lang}) {\n      id\n      images {\n        url\n      }\n      name\n      reference\n      slug\n      description\n      variants {\n        images {\n          url\n        }\n        code\n        name\n        size {\n          name\n        }\n      }\n    }\n  }`;\n\n  try {\n    const {\n      data: {\n        data\n      }\n    } = await fetchDatoAPI(query);\n    return data === null || data === void 0 ? void 0 : data.product;\n  } catch (error) {\n    console.error(error);\n    return null;\n  }\n};\nexport default {\n  datoAllCountries,\n  datoAllTaxonomies,\n  datoGetProduct\n};","map":{"version":3,"sources":["/Users/bolajiayodeji/Tunnel/CL/sanity-commercelayer-starter/template/web/utils/dato/api.ts"],"names":["axios","_","parseLocale","fetchDatoAPI","query","url","DATO_API_TOKEN","process","env","client","create","baseURL","timeout","headers","Authorization","params","JSON","stringify","post","datoAllCountries","locale","lang","data","allCountries","map","country","error","console","datoAllTaxonomies","catalogId","catalog","first","allCatalogs","taxonomies","datoGetProduct","slug","product"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,CAAP,MAAc,QAAd;AAEA,SAASC,WAAT,QAA4B,WAA5B;;AAEA,MAAMC,YAAY,GAAG,OAAOC,KAAP,EAAsBC,GAAG,GAAG,EAA5B,KAAmC;AACtD,QAAM;AAAEC,IAAAA;AAAF,MAAqBC,OAAO,CAACC,GAAnC;AACA,QAAMC,MAAM,GAAGT,KAAK,CAACU,MAAN,CAAa;AAC1BC,IAAAA,OAAO,EAAE,8BADiB;AAE1BC,IAAAA,OAAO,EAAE,IAFiB;AAG1BC,IAAAA,OAAO,EAAE;AACPC,MAAAA,aAAa,EAAG,UAASR,cAAe,EADjC;AAEP,sBAAgB;AAFT;AAHiB,GAAb,CAAf;AAQA,QAAMS,MAAM,GAAGC,IAAI,CAACC,SAAL,CAAe;AAAEb,IAAAA;AAAF,GAAf,CAAf;AACA,SAAO,MAAMK,MAAM,CAACS,IAAP,CAAYb,GAAZ,EAAiBU,MAAjB,CAAb;AACD,CAZD;;AAcA,OAAO,MAAMI,gBAAgB,GAAG,OAAOC,MAAc,GAAG,OAAxB,KAAoC;AAClE,QAAMC,IAAI,GAAGnB,WAAW,CAACkB,MAAD,EAAS,GAAT,EAAc,GAAd,CAAxB;AACA,QAAMhB,KAAK,GAAI;AACjB,2BAA2BiB,IAAK;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAfE;;AAgBA,MAAI;AACF,UAAM;AACJC,MAAAA,IAAI,EAAE;AAAEA,QAAAA;AAAF;AADF,QAEF,MAAMnB,YAAY,CAACC,KAAD,CAFtB;AAGA,WAAOkB,IAAI,CAACC,YAAL,CAAkBC,GAAlB,CAAuBC,OAAD,IAAkB;AAC7CA,MAAAA,OAAO,CAAC,UAAD,CAAP,GAAsBA,OAAO,CAAC,UAAD,CAA7B;AACAA,MAAAA,OAAO,CAAC,eAAD,CAAP,GAA2BA,OAAO,CAAC,eAAD,CAAlC;AACA,aAAOA,OAAO,CAAC,UAAD,CAAd;AACA,aAAOA,OAAO,CAAC,eAAD,CAAd;AACA,aAAOA,OAAP;AACD,KANM,CAAP;AAOD,GAXD,CAWE,OAAOC,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACA,WAAO,IAAP;AACD;AACF,CAjCM;AAmCP,OAAO,MAAME,iBAAiB,GAAG,OAC/BC,SAD+B,EAE/BT,MAAc,GAAG,OAFc,KAG5B;AACH,QAAMC,IAAI,GAAGnB,WAAW,CAACkB,MAAD,EAAS,GAAT,EAAc,GAAd,CAAxB;AACA,QAAMhB,KAAK,GAAI;AACjB,0BAA0BiB,IAAK,wBAAuBQ,SAAU;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IA1BE;;AA2BA,MAAI;AACF,UAAM;AACJP,MAAAA,IAAI,EAAE;AAAEA,QAAAA;AAAF;AADF,QAEF,MAAMnB,YAAY,CAACC,KAAD,CAFtB;;AAGA,UAAM0B,OAAO,GAAG7B,CAAC,CAAC8B,KAAF,CAAqBT,IAAI,CAACU,WAA1B,CAAhB;;AACA,WAAOF,OAAP,aAAOA,OAAP,uBAAOA,OAAO,CAAEG,UAAhB;AACD,GAND,CAME,OAAOP,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACA,WAAO,IAAP;AACD;AACF,CA1CM;AA4CP,OAAO,MAAMQ,cAAc,GAAG,OAAOC,IAAP,EAAqBf,MAAM,GAAG,OAA9B,KAA0C;AACtE,QAAMC,IAAI,GAAGnB,WAAW,CAACkB,MAAD,EAAS,GAAT,EAAc,GAAd,CAAxB;AACA,QAAMhB,KAAK,GAAI;AACjB,mCAAmC+B,IAAK,gBAAed,IAAK;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IArBE;;AAsBA,MAAI;AACF,UAAM;AACJC,MAAAA,IAAI,EAAE;AAAEA,QAAAA;AAAF;AADF,QAEF,MAAMnB,YAAY,CAACC,KAAD,CAFtB;AAGA,WAAOkB,IAAP,aAAOA,IAAP,uBAAOA,IAAI,CAAEc,OAAb;AACD,GALD,CAKE,OAAOV,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACA,WAAO,IAAP;AACD;AACF,CAjCM;AAmCP,eAAe;AACbP,EAAAA,gBADa;AAEbS,EAAAA,iBAFa;AAGbM,EAAAA;AAHa,CAAf","sourcesContent":["import axios from 'axios'\nimport _ from 'lodash'\nimport { DatoCatalog } from './typings'\nimport { parseLocale } from '../parser'\n\nconst fetchDatoAPI = async (query: string, url = '') => {\n  const { DATO_API_TOKEN } = process.env\n  const client = axios.create({\n    baseURL: 'https://graphql.datocms.com/',\n    timeout: 1000,\n    headers: {\n      Authorization: `Bearer ${DATO_API_TOKEN}`,\n      'Content-Type': 'application/json',\n    },\n  })\n  const params = JSON.stringify({ query })\n  return await client.post(url, params)\n}\n\nexport const datoAllCountries = async (locale: string = 'en-US') => {\n  const lang = parseLocale(locale, '_', '-')\n  const query = `{\n    allCountries(locale: ${lang}) {\n      code\n      id\n      image {\n        url\n      }\n      marketid\n      name\n      domain\n      defaultlocale\n      catalog {\n        id\n      }\n    }\n  }`\n  try {\n    const {\n      data: { data },\n    } = await fetchDatoAPI(query)\n    return data.allCountries.map((country: any) => {\n      country['marketId'] = country['marketid']\n      country['defaultLocale'] = country['defaultlocale']\n      delete country['marketid']\n      delete country['defaultlocale']\n      return country\n    })\n  } catch (error) {\n    console.error(error)\n    return null\n  }\n}\n\nexport const datoAllTaxonomies = async (\n  catalogId: string,\n  locale: string = 'en-US'\n) => {\n  const lang = parseLocale(locale, '_', '-')\n  const query = `{\n    allCatalogs(locale: ${lang}, filter: {id: {eq: \"${catalogId}\"}}) {\n      id\n      name\n      taxonomies {\n        name\n        label\n        taxons {\n          id\n          name\n          label\n          products {\n            id\n            images {\n              url\n            }\n            name\n            reference\n            slug\n            variants {\n              code\n            }\n          }\n        }\n      }\n    }\n  }`\n  try {\n    const {\n      data: { data },\n    } = await fetchDatoAPI(query)\n    const catalog = _.first<DatoCatalog>(data.allCatalogs)\n    return catalog?.taxonomies\n  } catch (error) {\n    console.error(error)\n    return null\n  }\n}\n\nexport const datoGetProduct = async (slug: string, locale = 'en-US') => {\n  const lang = parseLocale(locale, '_', '-')\n  const query = `{\n    product(filter: {slug: {eq: \"${slug}\"}}, locale: ${lang}) {\n      id\n      images {\n        url\n      }\n      name\n      reference\n      slug\n      description\n      variants {\n        images {\n          url\n        }\n        code\n        name\n        size {\n          name\n        }\n      }\n    }\n  }`\n  try {\n    const {\n      data: { data },\n    } = await fetchDatoAPI(query)\n    return data?.product\n  } catch (error) {\n    console.error(error)\n    return null\n  }\n}\n\nexport default {\n  datoAllCountries,\n  datoAllTaxonomies,\n  datoGetProduct,\n}\n"]},"metadata":{},"sourceType":"module"}