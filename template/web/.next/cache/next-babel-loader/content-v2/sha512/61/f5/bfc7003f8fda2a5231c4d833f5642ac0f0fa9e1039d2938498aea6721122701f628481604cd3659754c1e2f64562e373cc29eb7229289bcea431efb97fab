{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport Cookies from 'js-cookie';\nimport { getSalesChannelToken } from '@commercelayer/js-auth';\nexport var useGetToken = function useGetToken(_ref) {\n  _s();\n\n  var clientId = _ref.clientId,\n      endpoint = _ref.endpoint,\n      countryCode = _ref.countryCode,\n      _ref$scope = _ref.scope,\n      scope = _ref$scope === void 0 ? 'market:all' : _ref$scope;\n\n  var _useState = useState(''),\n      token = _useState[0],\n      setToken = _useState[1];\n\n  useEffect(function () {\n    var getCookieToken = Cookies.get(\"clAccessToken-\".concat(countryCode));\n\n    if (!getCookieToken && clientId && endpoint) {\n      var getToken = /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n          var auth;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _context.next = 2;\n                  return getSalesChannelToken({\n                    clientId: clientId,\n                    endpoint: endpoint,\n                    scope: scope // NOTE: take it from country\n\n                  });\n\n                case 2:\n                  auth = _context.sent;\n                  setToken(auth === null || auth === void 0 ? void 0 : auth.accessToken); // TODO: add to LocalStorage\n\n                  Cookies.set(\"clAccessToken-\".concat(countryCode), auth === null || auth === void 0 ? void 0 : auth.accessToken, {\n                    // @ts-ignore\n                    expires: auth === null || auth === void 0 ? void 0 : auth.expires\n                  });\n\n                case 5:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function getToken() {\n          return _ref2.apply(this, arguments);\n        };\n      }();\n\n      getToken();\n    } else {\n      setToken(getCookieToken || '');\n    }\n  });\n  return token;\n};\n\n_s(useGetToken, \"vf+oyXHY90mQMbpq6nUOg8QmBuc=\");","map":{"version":3,"sources":["/Users/bolajiayodeji/Tunnel/CL/sanity-commercelayer-starter/template/web/hooks/GetToken.ts"],"names":["useState","useEffect","Cookies","getSalesChannelToken","useGetToken","clientId","endpoint","countryCode","scope","token","setToken","getCookieToken","get","getToken","auth","accessToken","set","expires"],"mappings":";;;;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAASC,oBAAT,QAAqC,wBAArC;AAWA,OAAO,IAAMC,WAAwB,GAAG,SAA3BA,WAA2B,OAKlC;AAAA;;AAAA,MAJJC,QAII,QAJJA,QAII;AAAA,MAHJC,QAGI,QAHJA,QAGI;AAAA,MAFJC,WAEI,QAFJA,WAEI;AAAA,wBADJC,KACI;AAAA,MADJA,KACI,2BADI,YACJ;;AAAA,kBACsBR,QAAQ,CAAC,EAAD,CAD9B;AAAA,MACGS,KADH;AAAA,MACUC,QADV;;AAEJT,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMU,cAAc,GAAGT,OAAO,CAACU,GAAR,yBAA6BL,WAA7B,EAAvB;;AACA,QAAI,CAACI,cAAD,IAAmBN,QAAnB,IAA+BC,QAAnC,EAA6C;AAC3C,UAAMO,QAAQ;AAAA,6EAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBACIV,oBAAoB,CAAC;AACtCE,oBAAAA,QAAQ,EAARA,QADsC;AAEtCC,oBAAAA,QAAQ,EAARA,QAFsC;AAGtCE,oBAAAA,KAAK,EAALA,KAHsC,CAG/B;;AAH+B,mBAAD,CADxB;;AAAA;AACTM,kBAAAA,IADS;AAMfJ,kBAAAA,QAAQ,CAACI,IAAD,aAACA,IAAD,uBAACA,IAAI,CAAEC,WAAP,CAAR,CANe,CAMuB;;AACtCb,kBAAAA,OAAO,CAACc,GAAR,yBACmBT,WADnB,GAEEO,IAFF,aAEEA,IAFF,uBAEEA,IAAI,CAAEC,WAFR,EAGE;AACE;AACAE,oBAAAA,OAAO,EAAEH,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEG;AAFjB,mBAHF;;AAPe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAH;;AAAA,wBAARJ,QAAQ;AAAA;AAAA;AAAA,SAAd;;AAgBAA,MAAAA,QAAQ;AACT,KAlBD,MAkBO;AACLH,MAAAA,QAAQ,CAACC,cAAc,IAAI,EAAnB,CAAR;AACD;AACF,GAvBQ,CAAT;AAwBA,SAAOF,KAAP;AACD,CAhCM;;GAAML,W","sourcesContent":["import { useState, useEffect } from 'react'\nimport Cookies from 'js-cookie'\nimport { getSalesChannelToken } from '@commercelayer/js-auth'\n\ntype UseGetToken = {\n  (args: {\n    clientId: string\n    endpoint: string\n    scope?: string\n    countryCode: string\n  }): string\n}\n\nexport const useGetToken: UseGetToken = ({\n  clientId,\n  endpoint,\n  countryCode,\n  scope = 'market:all',\n}) => {\n  const [token, setToken] = useState('')\n  useEffect(() => {\n    const getCookieToken = Cookies.get(`clAccessToken-${countryCode}`)\n    if (!getCookieToken && clientId && endpoint) {\n      const getToken = async () => {\n        const auth = await getSalesChannelToken({\n          clientId,\n          endpoint,\n          scope, // NOTE: take it from country\n        })\n        setToken(auth?.accessToken as string) // TODO: add to LocalStorage\n        Cookies.set(\n          `clAccessToken-${countryCode}`,\n          auth?.accessToken as string,\n          {\n            // @ts-ignore\n            expires: auth?.expires,\n          }\n        )\n      }\n      getToken()\n    } else {\n      setToken(getCookieToken || '')\n    }\n  })\n  return token\n}\n"]},"metadata":{},"sourceType":"module"}