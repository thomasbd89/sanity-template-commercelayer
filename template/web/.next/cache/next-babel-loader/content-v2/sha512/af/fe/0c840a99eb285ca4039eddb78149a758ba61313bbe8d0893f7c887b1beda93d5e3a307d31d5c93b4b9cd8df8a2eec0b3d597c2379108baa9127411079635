{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createClient } from 'contentful';\nimport _ from 'lodash'; // import { parseProductName } from '../parser'\n\nconst contentfulCredential = {\n  space: process.env.CONTENTFUL_SPACE_ID,\n  accessToken: process.env.CONTENTFUL_DELIVERY_ACCESS_TOKEN\n};\nconst client = process.env.BUILD_CMS === 'contentful' ? createClient(contentfulCredential) : null;\n\nconst getClient = () => client;\n\nfunction parseCountry({\n  fields,\n  sys\n}) {\n  const catalog = _objectSpread(_objectSpread({}, fields.catalog.fields), {}, {\n    id: fields.catalog.sys.id\n  });\n\n  return _objectSpread(_objectSpread({}, fields), {}, {\n    catalog,\n    id: sys.id,\n    image: parseImage(fields.image)\n  });\n}\n\nfunction parseImage(entry) {\n  return {\n    title: entry.fields.title,\n    url: entry.fields.file.url\n  };\n}\n\nfunction parseCountryEntries(entries, cb = parseCountry) {\n  var _entries$items;\n\n  return entries === null || entries === void 0 ? void 0 : (_entries$items = entries.items) === null || _entries$items === void 0 ? void 0 : _entries$items.map(cb);\n}\n\nconst getLocale = locale => {\n  const lang = locale.split('-');\n  return lang.length > 1 ? `${lang[0].toLowerCase()}-${lang[1].toUpperCase()}` : _.first(lang);\n};\n\nexport const contentfulAllCountries = async (locale = 'en-US') => {\n  const newLocale = getLocale(locale);\n  const countries = await getClient().getEntries({\n    content_type: 'country',\n    order: 'fields.name',\n    locale: newLocale\n  });\n  return parseCountryEntries(countries);\n};\n\nfunction parseTaxonomies(catalogs, items = []) {\n  catalogs.map(catalog => {\n    catalog.fields.taxonomies.map(taxonomy => {\n      const {\n        fields\n      } = taxonomy;\n      const taxons = fields.taxons.map(taxon => {\n        const products = !_.isEmpty(taxon.fields.products) ? taxon.fields.products.map(product => {\n          const images = product.fields.images.map(image => {\n            const url = image.fields.file.url;\n            return _objectSpread(_objectSpread({}, image.fields), {}, {\n              url\n            });\n          });\n          const variants = product.fields.variants.map(variant => variant.fields);\n          return _objectSpread(_objectSpread({}, product.fields), {}, {\n            images,\n            variants\n          });\n        }) : [];\n        return _objectSpread(_objectSpread({}, taxon.fields), {}, {\n          products\n        });\n      });\n      items.push(_objectSpread(_objectSpread({}, fields), {}, {\n        taxons\n      }));\n    });\n  });\n  return items;\n}\n\nfunction parseProduct(product) {\n  if (!product) return {};\n  const p = product.fields;\n  const variants = p.variants.map(variant => {\n    const images = variant.fields.images.map(image => {\n      const url = image.fields.file.url;\n      return _objectSpread(_objectSpread({}, image.fields), {}, {\n        url\n      });\n    });\n    const size = variant.fields.size.fields;\n    return _objectSpread(_objectSpread({}, variant.fields), {}, {\n      images,\n      size\n    });\n  });\n  const images = p.images.map(image => {\n    const url = image.fields.file.url;\n    return _objectSpread(_objectSpread({}, image.fields), {}, {\n      url\n    });\n  });\n  return _objectSpread(_objectSpread({}, p), {}, {\n    variants,\n    images\n  });\n}\n\nexport async function getAllProducts(locale = 'en-US') {\n  const categories = await getClient().getEntries({\n    content_type: 'category',\n    locale: getLocale(locale)\n  });\n  return parseTaxonomies(categories.items);\n}\nexport const contentfulAllTaxonomies = async (catalogId, locale = 'en-US') => {\n  const catalog = await getClient().getEntries({\n    content_type: 'catalog',\n    'sys.id': catalogId,\n    locale: getLocale(locale),\n    include: 4\n  });\n  return parseTaxonomies(catalog.items);\n};\nexport const contentfulAllTaxons = async (locale = 'en-US') => {\n  const taxons = await getClient().getEntries({\n    content_type: 'taxon',\n    locale: getLocale(locale),\n    include: 2\n  });\n  return taxons.items.map(taxon => taxon.fields);\n};\nexport async function contentfulGetProduct(slug, locale = 'en-US') {\n  const lang = getLocale(locale);\n  const products = await getClient().getEntries({\n    content_type: 'product',\n    include: 2,\n    locale: lang,\n    'fields.slug[localeCode]': slug\n  });\n\n  const item = _.first(products.items.filter(product => product.fields.slug === slug));\n\n  return parseProduct(item);\n}\nexport const getAllProductsByLocale = async () => {\n  const {\n    BUILD_LANGUAGES\n  } = process.env;\n  const languages = BUILD_LANGUAGES;\n  const promises = [];\n  languages.split(',').forEach(language => {\n    promises.push(getAllProducts(language));\n  });\n\n  try {\n    const products = await Promise.all(promises);\n    return _.concat([], ...products);\n  } catch (err) {\n    console.log('err products', err);\n    debugger;\n    return [];\n  }\n};\nexport async function getCountry(countryCode, locale = 'en-US') {\n  const {\n    items\n  } = await getClient().getEntries({\n    content_type: 'country',\n    include: 2,\n    locale: getLocale(locale),\n    'fields.code': countryCode.toUpperCase()\n  });\n  return _.first(items);\n}\nexport default {\n  contentfulAllCountries,\n  contentfulAllTaxonomies,\n  contentfulGetProduct\n};","map":{"version":3,"sources":["/Users/bolajiayodeji/Tunnel/CL/sanity-commercelayer-starter/utils/contentful/api.ts"],"names":["createClient","_","contentfulCredential","space","process","env","CONTENTFUL_SPACE_ID","accessToken","CONTENTFUL_DELIVERY_ACCESS_TOKEN","client","BUILD_CMS","getClient","parseCountry","fields","sys","catalog","id","image","parseImage","entry","title","url","file","parseCountryEntries","entries","cb","items","map","getLocale","locale","lang","split","length","toLowerCase","toUpperCase","first","contentfulAllCountries","newLocale","countries","getEntries","content_type","order","parseTaxonomies","catalogs","taxonomies","taxonomy","taxons","taxon","products","isEmpty","product","images","variants","variant","push","parseProduct","p","size","getAllProducts","categories","contentfulAllTaxonomies","catalogId","include","contentfulAllTaxons","contentfulGetProduct","slug","item","filter","getAllProductsByLocale","BUILD_LANGUAGES","languages","promises","forEach","language","Promise","all","concat","err","console","log","getCountry","countryCode"],"mappings":"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","sourcesContent":["import { createClient, ContentfulClientApi, Entry } from 'contentful'\nimport {\n  ContentfulProduct,\n  ContentfulCountry,\n  ContentfulCatalog,\n  ContentfulTaxonomy,\n  ContentfulTaxon,\n} from './typings'\nimport _ from 'lodash'\n// import { parseProductName } from '../parser'\nimport { Taxonomy, Taxon } from '../../typings/models'\n\nconst contentfulCredential = {\n  space: process.env.CONTENTFUL_SPACE_ID as string,\n  accessToken: process.env.CONTENTFUL_DELIVERY_ACCESS_TOKEN as string,\n}\n\nconst client =\n  process.env.BUILD_CMS === 'contentful'\n    ? createClient(contentfulCredential)\n    : null\n\ntype GetClient = () => ContentfulClientApi | null\n\nconst getClient: GetClient = () => client\n\nexport type Country = Entry<{\n  name: string\n  code: string\n  catalog: Entry<ContentfulCatalog>\n  defaultLocale: string\n  market_id: string\n  domain: string\n  image: ImageEntry\n}>\n\nfunction parseCountry({ fields, sys }: Country) {\n  const catalog = {\n    ...fields.catalog.fields,\n    id: fields.catalog.sys.id,\n  }\n  return {\n    ...fields,\n    catalog,\n    id: sys.id,\n    image: parseImage(fields.image),\n  }\n}\n\ntype ImageEntry = Entry<{\n  title: string\n  file: {\n    url: string\n    contentType: string\n  }\n}>\n\nfunction parseImage(entry: ImageEntry) {\n  return {\n    title: entry.fields.title,\n    url: entry.fields.file.url,\n  }\n}\n\ntype CountryEntries = {\n  items: Country[]\n}\n\nfunction parseCountryEntries(entries: CountryEntries, cb = parseCountry) {\n  return entries?.items?.map(cb)\n}\n\nconst getLocale = (locale: string) => {\n  const lang = locale.split('-')\n  return lang.length > 1\n    ? `${lang[0].toLowerCase()}-${lang[1].toUpperCase()}`\n    : _.first(lang)\n}\n\nexport const contentfulAllCountries = async (locale = 'en-US') => {\n  const newLocale = getLocale(locale)\n  const countries = await getClient().getEntries({\n    content_type: 'country',\n    order: 'fields.name',\n    locale: newLocale,\n  })\n  return parseCountryEntries(countries as CountryEntries)\n}\n\nfunction parseTaxonomies(\n  catalogs: ContentfulCatalog[],\n  items: Taxonomy[] = []\n) {\n  catalogs.map((catalog) => {\n    catalog.fields.taxonomies.map((taxonomy: ContentfulTaxonomy) => {\n      const { fields } = taxonomy\n      const taxons = fields.taxons.map((taxon: ContentfulTaxon) => {\n        const products = !_.isEmpty(taxon.fields.products)\n          ? taxon.fields.products.map((product) => {\n              const images = product.fields.images.map((image) => {\n                const url = image.fields.file.url\n                return { ...image.fields, url }\n              })\n              const variants = product.fields.variants.map(\n                (variant) => variant.fields\n              )\n              return { ...product.fields, images, variants }\n            })\n          : []\n        return { ...taxon.fields, products }\n      })\n      items.push({ ...fields, taxons })\n    })\n  })\n  return items\n}\nfunction parseProduct(product?: ContentfulProduct) {\n  if (!product) return {}\n  const p = product.fields\n  const variants = p.variants.map((variant) => {\n    const images = variant.fields.images.map((image) => {\n      const url = image.fields.file.url\n      return { ...image.fields, url }\n    })\n    const size = variant.fields.size.fields\n    return {\n      ...variant.fields,\n      images,\n      size,\n    }\n  })\n  const images = p.images.map((image) => {\n    const url = image.fields.file.url\n    return { ...image.fields, url }\n  })\n  return {\n    ...p,\n    variants,\n    images,\n  }\n}\n\nexport async function getAllProducts(locale = 'en-US') {\n  const categories: any = await getClient().getEntries({\n    content_type: 'category',\n    locale: getLocale(locale),\n  })\n  return parseTaxonomies(categories.items)\n}\n\nexport const contentfulAllTaxonomies = async (\n  catalogId: string,\n  locale = 'en-US'\n) => {\n  const catalog: any = await getClient().getEntries({\n    content_type: 'catalog',\n    'sys.id': catalogId,\n    locale: getLocale(locale),\n    include: 4,\n  })\n  return parseTaxonomies(catalog.items)\n}\n\nexport const contentfulAllTaxons = async (\n  locale = 'en-US'\n): Promise<Taxon[]> => {\n  const taxons: any = await getClient().getEntries({\n    content_type: 'taxon',\n    locale: getLocale(locale),\n    include: 2,\n  })\n  return taxons.items.map((taxon: ContentfulTaxon) => taxon.fields)\n}\n\nexport async function contentfulGetProduct(slug: string, locale = 'en-US') {\n  const lang = getLocale(locale)\n  const products = await getClient().getEntries<ContentfulProduct['fields']>({\n    content_type: 'product',\n    include: 2,\n    locale: lang,\n    'fields.slug[localeCode]': slug,\n  })\n  const item = _.first(\n    products.items.filter((product) => product.fields.slug === slug)\n  )\n  return parseProduct(item)\n}\n\nexport const getAllProductsByLocale = async () => {\n  const { BUILD_LANGUAGES } = process.env\n  const languages = BUILD_LANGUAGES as string\n  const promises: any[] = []\n  languages.split(',').forEach((language) => {\n    promises.push(getAllProducts(language))\n  })\n  try {\n    const products = await Promise.all(promises)\n    return _.concat([], ...products)\n  } catch (err) {\n    console.log('err products', err)\n    debugger\n    return []\n  }\n}\n\nexport async function getCountry(countryCode: string, locale = 'en-US') {\n  const { items } = await getClient().getEntries<ContentfulCountry['fields']>({\n    content_type: 'country',\n    include: 2,\n    locale: getLocale(locale),\n    'fields.code': countryCode.toUpperCase(),\n  })\n  return _.first(items)\n}\n\nexport default {\n  contentfulAllCountries,\n  contentfulAllTaxonomies,\n  contentfulGetProduct,\n}\n"]},"metadata":{},"sourceType":"module"}