{"ast":null,"code":"import { useState, useEffect } from 'react';\nimport Cookies from 'js-cookie';\nimport { getSalesChannelToken } from '@commercelayer/js-auth';\nexport const useGetToken = ({\n  clientId,\n  endpoint,\n  countryCode,\n  scope = 'market:all'\n}) => {\n  const {\n    0: token,\n    1: setToken\n  } = useState('');\n  useEffect(() => {\n    const getCookieToken = Cookies.get(`clAccessToken-${countryCode}`);\n\n    if (!getCookieToken && clientId && endpoint) {\n      const getToken = async () => {\n        const auth = await getSalesChannelToken({\n          clientId,\n          endpoint,\n          scope // NOTE: take it from country\n\n        });\n        setToken(auth === null || auth === void 0 ? void 0 : auth.accessToken); // TODO: add to LocalStorage\n\n        Cookies.set(`clAccessToken-${countryCode}`, auth === null || auth === void 0 ? void 0 : auth.accessToken, {\n          // @ts-ignore\n          expires: auth === null || auth === void 0 ? void 0 : auth.expires\n        });\n      };\n\n      getToken();\n    } else {\n      setToken(getCookieToken || '');\n    }\n  });\n  return token;\n};","map":{"version":3,"sources":["/Users/bolajiayodeji/Tunnel/CL/sanity-commercelayer-starter/hooks/GetToken.ts"],"names":["useState","useEffect","Cookies","getSalesChannelToken","useGetToken","clientId","endpoint","countryCode","scope","token","setToken","getCookieToken","get","getToken","auth","accessToken","set","expires"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAASC,oBAAT,QAAqC,wBAArC;AAWA,OAAO,MAAMC,WAAwB,GAAG,CAAC;AACvCC,EAAAA,QADuC;AAEvCC,EAAAA,QAFuC;AAGvCC,EAAAA,WAHuC;AAIvCC,EAAAA,KAAK,GAAG;AAJ+B,CAAD,KAKlC;AACJ,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBV,QAAQ,CAAC,EAAD,CAAlC;AACAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMU,cAAc,GAAGT,OAAO,CAACU,GAAR,CAAa,iBAAgBL,WAAY,EAAzC,CAAvB;;AACA,QAAI,CAACI,cAAD,IAAmBN,QAAnB,IAA+BC,QAAnC,EAA6C;AAC3C,YAAMO,QAAQ,GAAG,YAAY;AAC3B,cAAMC,IAAI,GAAG,MAAMX,oBAAoB,CAAC;AACtCE,UAAAA,QADsC;AAEtCC,UAAAA,QAFsC;AAGtCE,UAAAA,KAHsC,CAG/B;;AAH+B,SAAD,CAAvC;AAKAE,QAAAA,QAAQ,CAACI,IAAD,aAACA,IAAD,uBAACA,IAAI,CAAEC,WAAP,CAAR,CAN2B,CAMW;;AACtCb,QAAAA,OAAO,CAACc,GAAR,CACG,iBAAgBT,WAAY,EAD/B,EAEEO,IAFF,aAEEA,IAFF,uBAEEA,IAAI,CAAEC,WAFR,EAGE;AACE;AACAE,UAAAA,OAAO,EAAEH,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEG;AAFjB,SAHF;AAQD,OAfD;;AAgBAJ,MAAAA,QAAQ;AACT,KAlBD,MAkBO;AACLH,MAAAA,QAAQ,CAACC,cAAc,IAAI,EAAnB,CAAR;AACD;AACF,GAvBQ,CAAT;AAwBA,SAAOF,KAAP;AACD,CAhCM","sourcesContent":["import { useState, useEffect } from 'react'\nimport Cookies from 'js-cookie'\nimport { getSalesChannelToken } from '@commercelayer/js-auth'\n\ntype UseGetToken = {\n  (args: {\n    clientId: string\n    endpoint: string\n    scope?: string\n    countryCode: string\n  }): string\n}\n\nexport const useGetToken: UseGetToken = ({\n  clientId,\n  endpoint,\n  countryCode,\n  scope = 'market:all',\n}) => {\n  const [token, setToken] = useState('')\n  useEffect(() => {\n    const getCookieToken = Cookies.get(`clAccessToken-${countryCode}`)\n    if (!getCookieToken && clientId && endpoint) {\n      const getToken = async () => {\n        const auth = await getSalesChannelToken({\n          clientId,\n          endpoint,\n          scope, // NOTE: take it from country\n        })\n        setToken(auth?.accessToken as string) // TODO: add to LocalStorage\n        Cookies.set(\n          `clAccessToken-${countryCode}`,\n          auth?.accessToken as string,\n          {\n            // @ts-ignore\n            expires: auth?.expires,\n          }\n        )\n      }\n      getToken()\n    } else {\n      setToken(getCookieToken || '')\n    }\n  })\n  return token\n}\n"]},"metadata":{},"sourceType":"module"}